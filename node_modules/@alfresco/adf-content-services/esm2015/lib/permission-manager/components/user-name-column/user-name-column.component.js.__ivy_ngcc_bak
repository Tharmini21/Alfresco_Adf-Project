/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, Input } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { NodeEntry } from '@alfresco/js-api';
import { NodePermissionService } from '../../services/node-permission.service';
export class UserNameColumnComponent {
    constructor(nodePermissionService) {
        this.nodePermissionService = nodePermissionService;
        this.displayText$ = new BehaviorSubject('');
        this.subTitleText$ = new BehaviorSubject('');
    }
    ngOnInit() {
        var _a, _b;
        if (this.context != null) {
            const { person, group, authorityId } = (_b = (_a = this.context.row.obj) === null || _a === void 0 ? void 0 : _a.entry) !== null && _b !== void 0 ? _b : this.context.row.obj;
            const permissionGroup = authorityId ? { displayName: authorityId } : null;
            this.updatePerson(person);
            this.updateGroup(group || permissionGroup);
        }
        if (this.node) {
            const { person, group } = this.nodePermissionService.transformNodeToUserPerson(this.node.entry);
            this.updatePerson(person);
            this.updateGroup(group);
        }
    }
    updatePerson(person) {
        var _a, _b, _c;
        if (person) {
            this.displayText$.next(`${(_a = person.firstName) !== null && _a !== void 0 ? _a : ''} ${(_b = person.lastName) !== null && _b !== void 0 ? _b : ''}`);
            this.subTitleText$.next((_c = person.email) !== null && _c !== void 0 ? _c : '');
        }
    }
    updateGroup(group) {
        if (group) {
            this.displayText$.next(group.displayName);
        }
    }
}
UserNameColumnComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-user-name-column',
                template: `
        <div class="adf-ellipsis-cell" [attr.data-automation-id]="displayText$ | async">
            <span class="adf-user-name-column" title="{{ displayText$ | async }}"> {{ displayText$ | async }}</span>
            <br/>
            <span class="adf-user-email-column" title="{{ subTitleText$ | async }}" *ngIf="subTitleText$ | async">
                {{ subTitleText$ | async }}
            </span>
        </div>
    `,
                host: { class: 'adf-user-name-column adf-datatable-content-cell adf-expand-cell-5 adf-ellipsis-cell' }
            },] }
];
UserNameColumnComponent.ctorParameters = () => [
    { type: NodePermissionService }
];
UserNameColumnComponent.propDecorators = {
    context: [{ type: Input }],
    node: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlci1uYW1lLWNvbHVtbi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiL2hvbWUvdHJhdmlzL2J1aWxkL0FsZnJlc2NvL2FsZnJlc2NvLW5nMi1jb21wb25lbnRzL2xpYi9jb250ZW50LXNlcnZpY2VzL3NyYy8iLCJzb3VyY2VzIjpbImxpYi9wZXJtaXNzaW9uLW1hbmFnZXIvY29tcG9uZW50cy91c2VyLW5hbWUtY29sdW1uL3VzZXItbmFtZS1jb2x1bW4uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7R0FlRztBQUVILE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFVLE1BQU0sZUFBZSxDQUFDO0FBQ3pELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDdkMsT0FBTyxFQUFTLFNBQVMsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ3BELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLHdDQUF3QyxDQUFDO0FBZ0IvRSxNQUFNLE9BQU8sdUJBQXVCO0lBVWhDLFlBQW9CLHFCQUE0QztRQUE1QywwQkFBcUIsR0FBckIscUJBQXFCLENBQXVCO1FBSGhFLGlCQUFZLEdBQUcsSUFBSSxlQUFlLENBQVMsRUFBRSxDQUFDLENBQUM7UUFDL0Msa0JBQWEsR0FBRyxJQUFJLGVBQWUsQ0FBUyxFQUFFLENBQUMsQ0FBQztJQUVtQixDQUFDO0lBRXBFLFFBQVE7O1FBQ0osSUFBSSxJQUFJLENBQUMsT0FBTyxJQUFJLElBQUksRUFBRTtZQUN0QixNQUFNLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxXQUFXLEVBQUUsZUFBRyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLDBDQUFFLEtBQUssbUNBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDO1lBQzNGLE1BQU0sZUFBZSxHQUFHLFdBQVcsQ0FBQyxDQUFDLENBQUMsRUFBRSxXQUFXLEVBQUUsV0FBVyxFQUFZLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztZQUNwRixJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQzFCLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxJQUFJLGVBQWUsQ0FBQyxDQUFDO1NBQzlDO1FBRUQsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ1gsTUFBTSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsR0FBRyxJQUFJLENBQUMscUJBQXFCLENBQUMseUJBQXlCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNoRyxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQzFCLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDM0I7SUFDTCxDQUFDO0lBRU8sWUFBWSxDQUFDLE1BQW9COztRQUNyQyxJQUFJLE1BQU0sRUFBRTtZQUNSLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEdBQUcsTUFBQSxNQUFNLENBQUMsU0FBUyxtQ0FBSSxFQUFFLElBQUksTUFBQSxNQUFNLENBQUMsUUFBUSxtQ0FBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQzdFLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxPQUFDLE1BQU0sQ0FBQyxLQUFLLG1DQUFJLEVBQUUsQ0FBQyxDQUFDO1NBQy9DO0lBQ04sQ0FBQztJQUVRLFdBQVcsQ0FBQyxLQUFZO1FBQzVCLElBQUksS0FBSyxFQUFFO1lBQ1AsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1NBQzdDO0lBQ0wsQ0FBQzs7O1lBbkRKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsc0JBQXNCO2dCQUNoQyxRQUFRLEVBQUU7Ozs7Ozs7O0tBUVQ7Z0JBQ0QsSUFBSSxFQUFFLEVBQUUsS0FBSyxFQUFFLHFGQUFxRixFQUFFO2FBQ3pHOzs7WUFmUSxxQkFBcUI7OztzQkFpQnpCLEtBQUs7bUJBR0wsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBHcm91cCwgTm9kZUVudHJ5IH0gZnJvbSAnQGFsZnJlc2NvL2pzLWFwaSc7XG5pbXBvcnQgeyBOb2RlUGVybWlzc2lvblNlcnZpY2UgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9ub2RlLXBlcm1pc3Npb24uc2VydmljZSc7XG5pbXBvcnQgeyBFY21Vc2VyTW9kZWwgfSBmcm9tICdAYWxmcmVzY28vYWRmLWNvcmUnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ2FkZi11c2VyLW5hbWUtY29sdW1uJyxcbiAgICB0ZW1wbGF0ZTogYFxuICAgICAgICA8ZGl2IGNsYXNzPVwiYWRmLWVsbGlwc2lzLWNlbGxcIiBbYXR0ci5kYXRhLWF1dG9tYXRpb24taWRdPVwiZGlzcGxheVRleHQkIHwgYXN5bmNcIj5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiYWRmLXVzZXItbmFtZS1jb2x1bW5cIiB0aXRsZT1cInt7IGRpc3BsYXlUZXh0JCB8IGFzeW5jIH19XCI+IHt7IGRpc3BsYXlUZXh0JCB8IGFzeW5jIH19PC9zcGFuPlxuICAgICAgICAgICAgPGJyLz5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiYWRmLXVzZXItZW1haWwtY29sdW1uXCIgdGl0bGU9XCJ7eyBzdWJUaXRsZVRleHQkIHwgYXN5bmMgfX1cIiAqbmdJZj1cInN1YlRpdGxlVGV4dCQgfCBhc3luY1wiPlxuICAgICAgICAgICAgICAgIHt7IHN1YlRpdGxlVGV4dCQgfCBhc3luYyB9fVxuICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICA8L2Rpdj5cbiAgICBgLFxuICAgIGhvc3Q6IHsgY2xhc3M6ICdhZGYtdXNlci1uYW1lLWNvbHVtbiBhZGYtZGF0YXRhYmxlLWNvbnRlbnQtY2VsbCBhZGYtZXhwYW5kLWNlbGwtNSBhZGYtZWxsaXBzaXMtY2VsbCcgfVxufSlcbmV4cG9ydCBjbGFzcyBVc2VyTmFtZUNvbHVtbkNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gICAgQElucHV0KClcbiAgICBjb250ZXh0OiBhbnk7XG5cbiAgICBASW5wdXQoKVxuICAgIG5vZGU6IE5vZGVFbnRyeTtcblxuICAgIGRpc3BsYXlUZXh0JCA9IG5ldyBCZWhhdmlvclN1YmplY3Q8c3RyaW5nPignJyk7XG4gICAgc3ViVGl0bGVUZXh0JCA9IG5ldyBCZWhhdmlvclN1YmplY3Q8c3RyaW5nPignJyk7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIG5vZGVQZXJtaXNzaW9uU2VydmljZTogTm9kZVBlcm1pc3Npb25TZXJ2aWNlKSB7fVxuXG4gICAgbmdPbkluaXQoKSB7XG4gICAgICAgIGlmICh0aGlzLmNvbnRleHQgIT0gbnVsbCkge1xuICAgICAgICAgICAgY29uc3QgeyBwZXJzb24sIGdyb3VwLCBhdXRob3JpdHlJZCB9ID0gdGhpcy5jb250ZXh0LnJvdy5vYmo/LmVudHJ5ID8/IHRoaXMuY29udGV4dC5yb3cub2JqO1xuICAgICAgICAgICAgY29uc3QgcGVybWlzc2lvbkdyb3VwID0gYXV0aG9yaXR5SWQgPyB7IGRpc3BsYXlOYW1lOiBhdXRob3JpdHlJZCB9IGFzICBHcm91cCA6IG51bGw7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVBlcnNvbihwZXJzb24pO1xuICAgICAgICAgICAgdGhpcy51cGRhdGVHcm91cChncm91cCB8fCBwZXJtaXNzaW9uR3JvdXApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMubm9kZSkge1xuICAgICAgICAgICAgY29uc3QgeyBwZXJzb24sIGdyb3VwIH0gPSB0aGlzLm5vZGVQZXJtaXNzaW9uU2VydmljZS50cmFuc2Zvcm1Ob2RlVG9Vc2VyUGVyc29uKHRoaXMubm9kZS5lbnRyeSk7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVBlcnNvbihwZXJzb24pO1xuICAgICAgICAgICAgdGhpcy51cGRhdGVHcm91cChncm91cCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIHVwZGF0ZVBlcnNvbihwZXJzb246IEVjbVVzZXJNb2RlbCkge1xuICAgICAgICBpZiAocGVyc29uKSB7XG4gICAgICAgICAgICB0aGlzLmRpc3BsYXlUZXh0JC5uZXh0KGAke3BlcnNvbi5maXJzdE5hbWUgPz8gJyd9ICR7cGVyc29uLmxhc3ROYW1lID8/ICcnfWApO1xuICAgICAgICAgICAgdGhpcy5zdWJUaXRsZVRleHQkLm5leHQocGVyc29uLmVtYWlsID8/ICcnKTtcbiAgICAgICAgfVxuICAgfVxuXG4gICAgcHJpdmF0ZSB1cGRhdGVHcm91cChncm91cDogR3JvdXApIHtcbiAgICAgICAgaWYgKGdyb3VwKSB7XG4gICAgICAgICAgICB0aGlzLmRpc3BsYXlUZXh0JC5uZXh0KGdyb3VwLmRpc3BsYXlOYW1lKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdfQ==