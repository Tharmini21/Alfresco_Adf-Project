/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { SearchConfigurationService, SearchService } from '@alfresco/adf-core';
import { NodeEntry } from '@alfresco/js-api';
import { Component, EventEmitter, Output, ViewChild, ViewEncapsulation } from '@angular/core';
import { FormControl } from '@angular/forms';
import { debounceTime } from 'rxjs/operators';
import { SearchPermissionConfigurationService } from './search-config-permission.service';
import { SearchComponent } from '../../../search/components/search.component';
import { MatSelectionList } from '@angular/material/list';
export class AddPermissionPanelComponent {
    constructor() {
        this.select = new EventEmitter();
        this.searchInput = new FormControl();
        this.searchedWord = '';
        this.debounceSearch = 200;
        this.selectedItems = [];
        this.EVERYONE = new NodeEntry({ entry: { nodeType: 'cm:authorityContainer', properties: { 'cm:authorityName': 'GROUP_EVERYONE' } } });
        this.searchInput.valueChanges
            .pipe(debounceTime(this.debounceSearch))
            .subscribe((searchValue) => {
            const selectionOptions = this.matSelectionList.selectedOptions.selected.map(option => option.value);
            this.selectedItems.push(...selectionOptions);
            this.matSelectionList.deselectAll();
            this.searchedWord = searchValue;
            if (!searchValue) {
                this.search.resetResults();
            }
        });
    }
    onSelectionChange() {
        const currentSelection = this.matSelectionList.selectedOptions.selected.map(option => option.value);
        const uniqueSelection = [...currentSelection, ...this.selectedItems]
            .reduce((uniquesElements, currentElement) => {
            const isExist = uniquesElements.find(uniqueElement => uniqueElement.entry.id === currentElement.entry.id);
            if (!isExist) {
                uniquesElements.push(currentElement);
            }
            return uniquesElements;
        }, []);
        this.select.emit(uniqueSelection);
    }
    clearSearch() {
        this.searchedWord = '';
        this.selectedItems.splice(0, this.selectedItems.length);
        this.search.resetResults();
    }
}
AddPermissionPanelComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-add-permission-panel',
                template: "<mat-form-field floatPlaceholder=\"never\"\n                class=\"adf-permission-search-input\">\n    <input matInput\n           id=\"searchInput\"\n           [formControl]=\"searchInput\"\n           type=\"text\"\n           placeholder=\"{{'PERMISSION_MANAGER.ADD-PERMISSION.SEARCH' | translate}}\"\n           [value]=\"searchedWord\">\n\n    <mat-icon *ngIf=\"searchedWord?.length > 0\"\n              class=\"adf-permission-search-icon\"\n              data-automation-id=\"adf-permission-clear-input\"\n              id=\"adf-permission-clear-input\"\n              matSuffix\n              (click)=\"clearSearch()\">clear\n    </mat-icon>\n\n    <mat-icon *ngIf=\"searchedWord?.length === 0\"\n              class=\"adf-permission-search-icon\"\n              data-automation-id=\"adf-permission-search-icon\"\n              matSuffix>search\n    </mat-icon>\n</mat-form-field>\n\n<div *ngIf=\"searchedWord?.length === 0\"\n     class=\"adf-permission-start-message\"\n     id=\"adf-add-permission-type-search\">\n    <span>{{'PERMISSION_MANAGER.ADD-PERMISSION.TYPE-MESSAGE' | translate}}</span>\n</div>\n\n<adf-search #search\n            [searchTerm]=\"searchedWord\"\n            id=\"adf-add-permission-authority-results\"\n            class=\"adf-permission-result-list\"\n            [class.adf-permission-result-list-search]=\"searchedWord.length === 0\">\n    <ng-template let-data>\n        <mat-selection-list class=\"adf-permission-result-list-elements\" (keydown.control.a)=\"onSelectionChange()\"\n                            (selectionChange)=\"onSelectionChange()\">\n            <mat-list-option id=\"adf-add-permission-group-everyone\"\n                             class=\"adf-list-option-item\"\n                             #eveyone\n                             disableRipple\n                             [value]=\"EVERYONE\">\n                <adf-user-icon-column [node]=\"EVERYONE\" id=\"add-group-icon\" [selected]=\"eveyone.selected\"></adf-user-icon-column>\n                <p class=\"adf-result-name\">\n                    {{'PERMISSION_MANAGER.ADD-PERMISSION.EVERYONE' | translate}}\n                </p>\n            </mat-list-option>\n\n            <mat-list-option *ngFor=\"let item of data?.list?.entries; let idx = index\"\n                             disableRipple\n                             [value]=\"item\"\n                             class=\"adf-list-option-item\"\n                             id=\"result_option_{{idx}}\"\n                             #option>\n                <adf-user-icon-column [node]=\"item\" [selected]=\"option.selected\"></adf-user-icon-column>\n                <p class=\"adf-result-name\">\n                    <ng-container *ngIf=\"item.entry?.properties['cm:authorityDisplayName']; else authorityName\">\n                        {{item.entry.properties['cm:authorityDisplayName']}}\n                    </ng-container>\n                    <ng-template #authorityName>\n                        <ng-container *ngIf=\"item.entry?.properties['cm:authorityName']; else owner\">\n                            {{item.entry.properties['cm:authorityName']}}\n                        </ng-container>\n                    </ng-template>\n                    <ng-template #owner>\n                        {{item.entry?.properties['cm:firstName'] ? item.entry?.properties['cm:firstName'] : '' }}\n                        {{item.entry?.properties['cm:lastName'] ? item.entry?.properties['cm:lastName']: ''}}\n                    </ng-template>\n                </p>\n            </mat-list-option>\n        </mat-selection-list>\n    </ng-template>\n</adf-search>\n",
                encapsulation: ViewEncapsulation.None,
                providers: [
                    { provide: SearchConfigurationService, useClass: SearchPermissionConfigurationService },
                    SearchService
                ]
            },] }
];
AddPermissionPanelComponent.ctorParameters = () => [];
AddPermissionPanelComponent.propDecorators = {
    search: [{ type: ViewChild, args: ['search', { static: true },] }],
    matSelectionList: [{ type: ViewChild, args: [MatSelectionList, { static: false },] }],
    select: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,