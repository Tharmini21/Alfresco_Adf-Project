/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { AllowableOperationsEnum, ContentService } from '@alfresco/adf-core';
import { Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';
import { NodePermissionService } from '../../services/node-permission.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../../services/node-permission.service';
import * as ɵngcc2 from '@alfresco/adf-core';
import * as ɵngcc3 from './add-permission-panel.component';
import * as ɵngcc4 from '@angular/material/button';
import * as ɵngcc5 from '@ngx-translate/core';
export class AddPermissionComponent {
    constructor(nodePermissionService, contentService) {
        this.nodePermissionService = nodePermissionService;
        this.contentService = contentService;
        this.success = new EventEmitter();
        this.error = new EventEmitter();
        this.selectedItems = [];
    }
    ngOnInit() {
        this.nodePermissionService.getNodeWithRoles(this.nodeId).subscribe(({ node, roles }) => {
            this.currentNode = node;
            this.currentNodeRoles = roles;
        });
    }
    onSelect(selection) {
        this.selectedItems = selection;
    }
    isAddEnabled() {
        return this.contentService.hasAllowableOperations(this.currentNode, AllowableOperationsEnum.UPDATEPERMISSIONS) &&
            this.selectedItems.length !== 0;
    }
    applySelection() {
        if (this.contentService.hasAllowableOperations(this.currentNode, AllowableOperationsEnum.UPDATEPERMISSIONS)) {
            const permissions = this.transformNodeToPermissionElement(this.selectedItems, this.currentNodeRoles[0].role);
            this.nodePermissionService.updateNodePermissions(this.nodeId, permissions)
                .subscribe((node) => {
                this.success.emit(node);
            }, (error) => {
                this.error.emit(error);
            });
        }
    }
    transformNodeToPermissionElement(nodes, role) {
        return nodes.map((node) => {
            var _a;
            return {
                'authorityId': (_a = node.entry.properties['cm:authorityName']) !== null && _a !== void 0 ? _a : node.entry.properties['cm:userName'],
                'name': role,
                'accessStatus': 'ALLOWED'
            };
        });
    }
}
AddPermissionComponent.ɵfac = function AddPermissionComponent_Factory(t) { return new (t || AddPermissionComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NodePermissionService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ContentService)); };
AddPermissionComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: AddPermissionComponent, selectors: [["adf-add-permission"]], inputs: { nodeId: "nodeId" }, outputs: { success: "success", error: "error" }, decls: 5, vars: 4, consts: [[3, "select"], ["id", "adf-add-permission-actions"], ["mat-button", "", "id", "adf-add-permission-action-button", 1, "adf-permission-action", 3, "disabled", "click"]], template: function AddPermissionComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "adf-add-permission-panel", 0);
        ɵngcc0.ɵɵlistener("select", function AddPermissionComponent_Template_adf_add_permission_panel_select_0_listener($event) { return ctx.onSelect($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵelementStart(2, "button", 2);
        ɵngcc0.ɵɵlistener("click", function AddPermissionComponent_Template_button_click_2_listener() { return ctx.applySelection(); });
        ɵngcc0.ɵɵtext(3);
        ɵngcc0.ɵɵpipe(4, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("disabled", !ctx.isAddEnabled());
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(4, 2, "PERMISSION_MANAGER.ADD-PERMISSION.ADD-ACTION"), " ");
    } }, directives: [ɵngcc3.AddPermissionPanelComponent, ɵngcc4.MatButton], pipes: [ɵngcc5.TranslatePipe], encapsulation: 2 });
AddPermissionComponent.ctorParameters = () => [
    { type: NodePermissionService },
    { type: ContentService }
];
AddPermissionComponent.propDecorators = {
    nodeId: [{ type: Input }],
    success: [{ type: Output }],
    error: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AddPermissionComponent, [{
        type: Component,
        args: [{
                selector: 'adf-add-permission',
                template: "<adf-add-permission-panel\n    (select)=\"onSelect($event)\">\n</adf-add-permission-panel>\n<div id=\"adf-add-permission-actions\">\n   <button mat-button\n          id=\"adf-add-permission-action-button\"\n          class=\"adf-permission-action\"\n          [disabled]=\"!isAddEnabled()\"\n          (click)=\"applySelection()\">\n     {{'PERMISSION_MANAGER.ADD-PERMISSION.ADD-ACTION' | translate}}\n    </button>\n</div>\n",
                encapsulation: ViewEncapsulation.None
            }]
    }], function () { return [{ type: ɵngcc1.NodePermissionService }, { type: ɵngcc2.ContentService }]; }, { success: [{
            type: Output
        }], error: [{
            type: Output
        }], nodeId: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRkLXBlcm1pc3Npb24uY29tcG9uZW50LmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9ob21lL3RyYXZpcy9idWlsZC9BbGZyZXNjby9hbGZyZXNjby1uZzItY29tcG9uZW50cy9saWIvY29udGVudC1zZXJ2aWNlcy9zcmMvbGliL3Blcm1pc3Npb24tbWFuYWdlci9jb21wb25lbnRzL2FkZC1wZXJtaXNzaW9uL2FkZC1wZXJtaXNzaW9uLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBRUgsT0FBTyxFQUFFLHVCQUF1QixFQUFFLGNBQWMsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBRTdFLE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBVSxNQUFNLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbEcsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sd0NBQXdDLENBQUM7Ozs7Ozs7QUFXL0UsTUFBTSxPQUFPLHNCQUFzQjtBQUFHLElBa0JsQyxZQUFvQixxQkFBNEMsRUFDNUMsY0FBOEI7QUFBSSxRQURsQywwQkFBcUIsR0FBckIscUJBQXFCLENBQXVCO0FBQUMsUUFDN0MsbUJBQWMsR0FBZCxjQUFjLENBQWdCO0FBQUMsUUFYbkQsWUFBTyxHQUF1QixJQUFJLFlBQVksRUFBRSxDQUFDO0FBQ3JELFFBR0ksVUFBSyxHQUFzQixJQUFJLFlBQVksRUFBRSxDQUFDO0FBQ2xELFFBQ0ksa0JBQWEsR0FBZ0IsRUFBRSxDQUFDO0FBQ3BDLElBSTBELENBQUM7QUFDM0QsSUFDSSxRQUFRO0FBQUssUUFDVCxJQUFJLENBQUMscUJBQXFCLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUU7QUFDOUYsWUFBWSxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQztBQUNwQyxZQUFZLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxLQUFLLENBQUM7QUFDMUMsUUFBUSxDQUFDLENBQUMsQ0FBQztBQUNYLElBQUksQ0FBQztBQUNMLElBQ0ksUUFBUSxDQUFDLFNBQXNCO0FBQ25DLFFBQVEsSUFBSSxDQUFDLGFBQWEsR0FBRyxTQUFTLENBQUM7QUFDdkMsSUFBSSxDQUFDO0FBQ0wsSUFDSSxZQUFZO0FBQUssUUFDYixPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsc0JBQXNCLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSx1QkFBdUIsQ0FBQyxpQkFBaUIsQ0FBQztBQUN0SCxZQUFnQixJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sS0FBSyxDQUFDLENBQUM7QUFDaEQsSUFBSSxDQUFDO0FBQ0wsSUFDSSxjQUFjO0FBQ2xCLFFBQVEsSUFBSSxJQUFJLENBQUMsY0FBYyxDQUFDLHNCQUFzQixDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsdUJBQXVCLENBQUMsaUJBQWlCLENBQUMsRUFBRTtBQUNySCxZQUFZLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxnQ0FBZ0MsQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUN6SCxZQUFZLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLFdBQVcsQ0FBQztBQUN0RixpQkFBaUIsU0FBUyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUU7QUFDcEMsZ0JBQXdCLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ2hELFlBQW9CLENBQUMsRUFDRCxDQUFDLEtBQUssRUFBRSxFQUFFO0FBQzlCLGdCQUF3QixJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUMvQyxZQUFvQixDQUFDLENBQUMsQ0FBQztBQUN2QixTQUFTO0FBQ1QsSUFBSSxDQUFDO0FBQ0wsSUFDWSxnQ0FBZ0MsQ0FBQyxLQUFrQixFQUFFLElBQVk7QUFBSSxRQUN6RSxPQUFPLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRTtBQUNsQztBQUFvQixZQUFSLE9BQU87QUFDbkIsZ0JBQWdCLGFBQWEsUUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxrQkFBa0IsQ0FBQyxtQ0FBSSxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUM7QUFDaEgsZ0JBQWdCLE1BQU0sRUFBRSxJQUFJO0FBQzVCLGdCQUFnQixjQUFjLEVBQUUsU0FBUztBQUN6QyxhQUFhLENBQUM7QUFDZCxRQUFRLENBQUMsQ0FBQyxDQUFDO0FBQ1gsSUFBSSxDQUFDO0FBQ0w7a0RBbkVDLFNBQVMsU0FBQyxrQkFDUCxRQUFRLEVBQUUsb0JBQW9CLGtCQUM5QjswVkFBOEMsa0JBQzlDLGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJLGNBQ3hDOzs7Ozs7Ozs7Ozs7Ozs7O2dJQUVDO0FBQUM7QUFBZ0QsWUFUMUMscUJBQXFCO0FBQUksWUFIQSxjQUFjO0FBQUc7QUFBRztBQUNwQyxxQkFnQmIsS0FBSztBQUNSLHNCQUdHLE1BQU07QUFDVCxvQkFHRyxNQUFNO0FBQ1Y7Ozs7Ozs7Ozs7Ozs7O29CQUFFO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBBbGxvd2FibGVPcGVyYXRpb25zRW51bSwgQ29udGVudFNlcnZpY2UgfSBmcm9tICdAYWxmcmVzY28vYWRmLWNvcmUnO1xuaW1wb3J0IHsgTm9kZSwgTm9kZUVudHJ5LCBQZXJtaXNzaW9uRWxlbWVudCB9IGZyb20gJ0BhbGZyZXNjby9qcy1hcGknO1xuaW1wb3J0IHsgQ29tcG9uZW50LCBFdmVudEVtaXR0ZXIsIElucHV0LCBPbkluaXQsIE91dHB1dCwgVmlld0VuY2Fwc3VsYXRpb24gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5vZGVQZXJtaXNzaW9uU2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL25vZGUtcGVybWlzc2lvbi5zZXJ2aWNlJztcbmltcG9ydCB7IFJvbGVNb2RlbCB9IGZyb20gJy4uLy4uL21vZGVscy9yb2xlLm1vZGVsJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdhZGYtYWRkLXBlcm1pc3Npb24nLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9hZGQtcGVybWlzc2lvbi5jb21wb25lbnQuaHRtbCcsXG4gICAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZVxufSlcbi8qXG4gKiBAZGVwcmVjYXRlZCBpbiA0LjQuMCwgdXNlIGFkZi1hZGQtcGVybWlzc2lvbi1wYW5lbCBpbnN0ZWFkLlxuICovXG5leHBvcnQgY2xhc3MgQWRkUGVybWlzc2lvbkNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG5cbiAgICAvKiogSUQgb2YgdGhlIHRhcmdldCBub2RlLiAqL1xuICAgIEBJbnB1dCgpXG4gICAgbm9kZUlkOiBzdHJpbmc7XG5cbiAgICAvKiogRW1pdHRlZCB3aGVuIHRoZSBub2RlIGlzIHVwZGF0ZWQgc3VjY2Vzc2Z1bGx5LiAqL1xuICAgIEBPdXRwdXQoKVxuICAgIHN1Y2Nlc3M6IEV2ZW50RW1pdHRlcjxOb2RlPiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICAgIC8qKiBFbWl0dGVkIHdoZW4gYW4gZXJyb3Igb2NjdXJzIGR1cmluZyB0aGUgdXBkYXRlLiAqL1xuICAgIEBPdXRwdXQoKVxuICAgIGVycm9yOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICAgIHNlbGVjdGVkSXRlbXM6IE5vZGVFbnRyeVtdID0gW107XG4gICAgY3VycmVudE5vZGU6IE5vZGU7XG4gICAgY3VycmVudE5vZGVSb2xlczogUm9sZU1vZGVsW107XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIG5vZGVQZXJtaXNzaW9uU2VydmljZTogTm9kZVBlcm1pc3Npb25TZXJ2aWNlLFxuICAgICAgICAgICAgICAgIHByaXZhdGUgY29udGVudFNlcnZpY2U6IENvbnRlbnRTZXJ2aWNlKSB7IH1cblxuICAgIG5nT25Jbml0KCk6IHZvaWQge1xuICAgICAgICB0aGlzLm5vZGVQZXJtaXNzaW9uU2VydmljZS5nZXROb2RlV2l0aFJvbGVzKHRoaXMubm9kZUlkKS5zdWJzY3JpYmUoKHtub2RlLCByb2xlcyB9KSA9PiB7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnROb2RlID0gbm9kZTtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudE5vZGVSb2xlcyA9IHJvbGVzO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBvblNlbGVjdChzZWxlY3Rpb246IE5vZGVFbnRyeVtdKSB7XG4gICAgICAgIHRoaXMuc2VsZWN0ZWRJdGVtcyA9IHNlbGVjdGlvbjtcbiAgICB9XG5cbiAgICBpc0FkZEVuYWJsZWQoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnRlbnRTZXJ2aWNlLmhhc0FsbG93YWJsZU9wZXJhdGlvbnModGhpcy5jdXJyZW50Tm9kZSwgQWxsb3dhYmxlT3BlcmF0aW9uc0VudW0uVVBEQVRFUEVSTUlTU0lPTlMpICYmXG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZEl0ZW1zLmxlbmd0aCAhPT0gMDtcbiAgICB9XG5cbiAgICBhcHBseVNlbGVjdGlvbigpIHtcbiAgICAgICAgaWYgKHRoaXMuY29udGVudFNlcnZpY2UuaGFzQWxsb3dhYmxlT3BlcmF0aW9ucyh0aGlzLmN1cnJlbnROb2RlLCBBbGxvd2FibGVPcGVyYXRpb25zRW51bS5VUERBVEVQRVJNSVNTSU9OUykpIHtcbiAgICAgICAgICAgIGNvbnN0IHBlcm1pc3Npb25zID0gdGhpcy50cmFuc2Zvcm1Ob2RlVG9QZXJtaXNzaW9uRWxlbWVudCh0aGlzLnNlbGVjdGVkSXRlbXMsIHRoaXMuY3VycmVudE5vZGVSb2xlc1swXS5yb2xlKTtcbiAgICAgICAgICAgIHRoaXMubm9kZVBlcm1pc3Npb25TZXJ2aWNlLnVwZGF0ZU5vZGVQZXJtaXNzaW9ucyh0aGlzLm5vZGVJZCwgcGVybWlzc2lvbnMpXG4gICAgICAgICAgICAgICAgLnN1YnNjcmliZSgobm9kZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdWNjZXNzLmVtaXQobm9kZSk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIChlcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lcnJvci5lbWl0KGVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIHRyYW5zZm9ybU5vZGVUb1Blcm1pc3Npb25FbGVtZW50KG5vZGVzOiBOb2RlRW50cnlbXSwgcm9sZTogc3RyaW5nKTogUGVybWlzc2lvbkVsZW1lbnRbXSB7XG4gICAgICAgIHJldHVybiBub2Rlcy5tYXAoKG5vZGUpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgJ2F1dGhvcml0eUlkJzogbm9kZS5lbnRyeS5wcm9wZXJ0aWVzWydjbTphdXRob3JpdHlOYW1lJ10gPz8gbm9kZS5lbnRyeS5wcm9wZXJ0aWVzWydjbTp1c2VyTmFtZSddLFxuICAgICAgICAgICAgICAgICduYW1lJzogcm9sZSxcbiAgICAgICAgICAgICAgICAnYWNjZXNzU3RhdHVzJzogJ0FMTE9XRUQnXG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICB9XG59XG4iXX0=