/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, Inject, ViewEncapsulation } from '@angular/core';
import { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';
import { ContentTypeService } from './content-type.service';
export class ContentTypeDialogComponent {
    constructor(dialog, data, contentTypeService) {
        this.dialog = dialog;
        this.data = data;
        this.contentTypeService = contentTypeService;
        this.typeProperties = [];
        this.propertyColumns = ['name', 'title', 'dataType'];
        this.title = data.title;
        this.description = data.description;
        this.confirmMessage = data.confirmMessage;
        this.nodeType = data.nodeType;
        this.contentTypeService.getContentTypeByPrefix(this.nodeType).subscribe((contentTypeEntry) => {
            this.currentContentType = contentTypeEntry;
            this.typeProperties = this.currentContentType.entry.properties.filter((property) => property.id.startsWith(this.currentContentType.entry.model.namespacePrefix));
        });
    }
    ngOnInit() {
        this.dialog.backdropClick().subscribe(() => {
            this.close();
        });
    }
    close() {
        this.data.select.complete();
    }
    onCancel() {
        this.close();
    }
    onApply() {
        this.data.select.next(true);
        this.close();
    }
}
ContentTypeDialogComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-content-type-dialog',
                template: "<div class=\"adf-content-type-dialog\">\n    <h2 mat-dialog-title class=\"adf-content-type-dialog-title\" data-automation-id=\"content-type-dialog-title\">{{title |\n        translate}}</h2>\n    <mat-dialog-content class=\"mat-typography\" class=\"adf-content-type-dialog-content\"\n        data-automation-id=\"content-type-dialog-content\">\n        <h4 data-automation-id=\"content-type-dialog-description\">{{description | translate}}</h4>\n        <p data-automation-id=\"content-type-dialog-confirm-message\">{{confirmMessage | translate}}</p>\n        <mat-accordion>\n            <mat-expansion-panel class=\"adf-content-type-accordion\">\n                <mat-expansion-panel-header>\n                    <mat-panel-title>\n                        {{'CORE.METADATA.CONTENT_TYPE.DIALOG.VIEW_DETAILS' | translate}}\n                    </mat-panel-title>\n                </mat-expansion-panel-header>\n                <table mat-table [dataSource]=\"typeProperties\"\n                    *ngIf=\"typeProperties?.length > 0\" class=\"adf-content-type-table\">\n                    <ng-container matColumnDef=\"name\">\n                        <th mat-header-cell *matHeaderCellDef> {{'CORE.METADATA.CONTENT_TYPE.DIALOG.PROPERTY.NAME' |\n                            translate}} </th>\n                        <td mat-cell *matCellDef=\"let property\"> {{property.id}} </td>\n                    </ng-container>\n                    <ng-container matColumnDef=\"title\">\n                        <th mat-header-cell *matHeaderCellDef>\n                            {{'CORE.METADATA.CONTENT_TYPE.DIALOG.PROPERTY.DESCRIPTION' | translate}} </th>\n                        <td mat-cell *matCellDef=\"let property\"> {{property.title}} </td>\n                    </ng-container>\n                    <ng-container matColumnDef=\"dataType\">\n                        <th mat-header-cell *matHeaderCellDef> {{'CORE.METADATA.CONTENT_TYPE.DIALOG.PROPERTY.DATA_TYPE'\n                            | translate}} </th>\n                        <td mat-cell *matCellDef=\"let property\"> {{property.dataType}} </td>\n                    </ng-container>\n                    <tr mat-header-row *matHeaderRowDef=\"propertyColumns\"></tr>\n                    <tr mat-row *matRowDef=\"let row; columns: propertyColumns;\"></tr>\n                </table>\n            </mat-expansion-panel>\n        </mat-accordion>\n    </mat-dialog-content>\n    <mat-dialog-actions align=\"end\">\n        <button mat-button mat-dialog-close\n            id=\"content-type-dialog-actions-cancel\">{{'CORE.METADATA.CONTENT_TYPE.DIALOG.CANCEL' | translate }}</button>\n        <button mat-button class=\"adf-content-type-dialog-apply-button\" id=\"content-type-dialog-apply-button\"\n            [mat-dialog-close]=\"true\" cdkFocusInitial (click)=\"onApply()\">{{'CORE.METADATA.CONTENT_TYPE.DIALOG.APPLY' |\n            translate}}</button>\n    </mat-dialog-actions>\n</div>\n",
                encapsulation: ViewEncapsulation.None
            },] }
];
ContentTypeDialogComponent.ctorParameters = () => [
    { type: MatDialogRef },
    { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_DATA,] }] },
    { type: ContentTypeService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGVudC10eXBlLWRpYWxvZy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiL2hvbWUvdHJhdmlzL2J1aWxkL0FsZnJlc2NvL2FsZnJlc2NvLW5nMi1jb21wb25lbnRzL2xpYi9jb250ZW50LXNlcnZpY2VzL3NyYy8iLCJzb3VyY2VzIjpbImxpYi9jb250ZW50LXR5cGUvY29udGVudC10eXBlLWRpYWxvZy5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7OztHQWVHO0FBR0gsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQVUsaUJBQWlCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDN0UsT0FBTyxFQUFFLGVBQWUsRUFBRSxZQUFZLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUV6RSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQU81RCxNQUFNLE9BQU8sMEJBQTBCO0lBWW5DLFlBQW9CLE1BQWdELEVBQ3hCLElBQW9DLEVBQzVELGtCQUFzQztRQUZ0QyxXQUFNLEdBQU4sTUFBTSxDQUEwQztRQUN4QixTQUFJLEdBQUosSUFBSSxDQUFnQztRQUM1RCx1QkFBa0IsR0FBbEIsa0JBQWtCLENBQW9CO1FBTjFELG1CQUFjLEdBQVUsRUFBRSxDQUFDO1FBRTNCLG9CQUFlLEdBQWEsQ0FBQyxNQUFNLEVBQUUsT0FBTyxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBS3RELElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUN4QixJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUM7UUFDcEMsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDO1FBQzFDLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztRQUU5QixJQUFJLENBQUMsa0JBQWtCLENBQUMsc0JBQXNCLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLGdCQUFnQixFQUFFLEVBQUU7WUFDekYsSUFBSSxDQUFDLGtCQUFrQixHQUFHLGdCQUFnQixDQUFDO1lBQzNDLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDO1FBQ3JLLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVELFFBQVE7UUFDSixJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsRUFBRSxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUU7WUFDdkMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ2pCLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVELEtBQUs7UUFDRCxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUNoQyxDQUFDO0lBRUQsUUFBUTtRQUNKLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUNqQixDQUFDO0lBRUQsT0FBTztRQUNILElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM1QixJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDakIsQ0FBQzs7O1lBaERKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUseUJBQXlCO2dCQUNuQyxrNUZBQW1EO2dCQUNuRCxhQUFhLEVBQUUsaUJBQWlCLENBQUMsSUFBSTthQUN4Qzs7O1lBUnlCLFlBQVk7NENBc0JyQixNQUFNLFNBQUMsZUFBZTtZQXBCOUIsa0JBQWtCIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgVHlwZUVudHJ5IH0gZnJvbSAnQGFsZnJlc2NvL2pzLWFwaSc7XG5pbXBvcnQgeyBDb21wb25lbnQsIEluamVjdCwgT25Jbml0LCBWaWV3RW5jYXBzdWxhdGlvbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTUFUX0RJQUxPR19EQVRBLCBNYXREaWFsb2dSZWYgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9kaWFsb2cnO1xuaW1wb3J0IHsgQ29udGVudFR5cGVEaWFsb2dDb21wb25lbnREYXRhIH0gZnJvbSAnLi9jb250ZW50LXR5cGUtbWV0YWRhdGEuaW50ZXJmYWNlJztcbmltcG9ydCB7IENvbnRlbnRUeXBlU2VydmljZSB9IGZyb20gJy4vY29udGVudC10eXBlLnNlcnZpY2UnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ2FkZi1jb250ZW50LXR5cGUtZGlhbG9nJyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vY29udGVudC10eXBlLWRpYWxvZy5jb21wb25lbnQuaHRtbCcsXG4gICAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZVxufSlcbmV4cG9ydCBjbGFzcyBDb250ZW50VHlwZURpYWxvZ0NvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG5cbiAgICB0aXRsZTogc3RyaW5nO1xuICAgIGRlc2NyaXB0aW9uOiBzdHJpbmc7XG4gICAgbm9kZVR5cGU6IHN0cmluZztcbiAgICBjb25maXJtTWVzc2FnZTogc3RyaW5nO1xuXG4gICAgY3VycmVudENvbnRlbnRUeXBlOiBUeXBlRW50cnk7XG4gICAgdHlwZVByb3BlcnRpZXM6IGFueVtdID0gW107XG5cbiAgICBwcm9wZXJ0eUNvbHVtbnM6IHN0cmluZ1tdID0gWyduYW1lJywgJ3RpdGxlJywgJ2RhdGFUeXBlJ107XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGRpYWxvZzogTWF0RGlhbG9nUmVmPENvbnRlbnRUeXBlRGlhbG9nQ29tcG9uZW50PixcbiAgICAgICAgICAgICAgICBASW5qZWN0KE1BVF9ESUFMT0dfREFUQSkgcHVibGljIGRhdGE6IENvbnRlbnRUeXBlRGlhbG9nQ29tcG9uZW50RGF0YSxcbiAgICAgICAgICAgICAgICBwcml2YXRlIGNvbnRlbnRUeXBlU2VydmljZTogQ29udGVudFR5cGVTZXJ2aWNlKSB7XG4gICAgICAgIHRoaXMudGl0bGUgPSBkYXRhLnRpdGxlO1xuICAgICAgICB0aGlzLmRlc2NyaXB0aW9uID0gZGF0YS5kZXNjcmlwdGlvbjtcbiAgICAgICAgdGhpcy5jb25maXJtTWVzc2FnZSA9IGRhdGEuY29uZmlybU1lc3NhZ2U7XG4gICAgICAgIHRoaXMubm9kZVR5cGUgPSBkYXRhLm5vZGVUeXBlO1xuXG4gICAgICAgIHRoaXMuY29udGVudFR5cGVTZXJ2aWNlLmdldENvbnRlbnRUeXBlQnlQcmVmaXgodGhpcy5ub2RlVHlwZSkuc3Vic2NyaWJlKChjb250ZW50VHlwZUVudHJ5KSA9PiB7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRDb250ZW50VHlwZSA9IGNvbnRlbnRUeXBlRW50cnk7XG4gICAgICAgICAgICB0aGlzLnR5cGVQcm9wZXJ0aWVzID0gdGhpcy5jdXJyZW50Q29udGVudFR5cGUuZW50cnkucHJvcGVydGllcy5maWx0ZXIoKHByb3BlcnR5KSA9PiBwcm9wZXJ0eS5pZC5zdGFydHNXaXRoKHRoaXMuY3VycmVudENvbnRlbnRUeXBlLmVudHJ5Lm1vZGVsLm5hbWVzcGFjZVByZWZpeCkpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBuZ09uSW5pdCgpIHtcbiAgICAgICAgdGhpcy5kaWFsb2cuYmFja2Ryb3BDbGljaygpLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGNsb3NlKCkge1xuICAgICAgICB0aGlzLmRhdGEuc2VsZWN0LmNvbXBsZXRlKCk7XG4gICAgfVxuXG4gICAgb25DYW5jZWwoKSB7XG4gICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICB9XG5cbiAgICBvbkFwcGx5KCkge1xuICAgICAgICB0aGlzLmRhdGEuc2VsZWN0Lm5leHQodHJ1ZSk7XG4gICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICB9XG59XG4iXX0=