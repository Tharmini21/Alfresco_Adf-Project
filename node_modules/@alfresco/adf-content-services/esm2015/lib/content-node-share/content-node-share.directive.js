/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Directive, Input, HostListener, NgZone } from '@angular/core';
import { MatDialog } from '@angular/material/dialog';
import { NodeEntry } from '@alfresco/js-api';
import { ShareDialogComponent } from './content-node-share.dialog';
import { from, Subject } from 'rxjs';
import { AlfrescoApiService } from '@alfresco/adf-core';
import { takeUntil } from 'rxjs/operators';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/material/dialog';
import * as ɵngcc2 from '@alfresco/adf-core';
export class NodeSharedDirective {
    constructor(dialog, zone, alfrescoApiService) {
        this.dialog = dialog;
        this.zone = zone;
        this.alfrescoApiService = alfrescoApiService;
        this.isFile = false;
        this.isShared = false;
        this.onDestroy$ = new Subject();
    }
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
    shareNode(nodeEntry) {
        if (nodeEntry && nodeEntry.entry && nodeEntry.entry.isFile) {
            const nodeId = nodeEntry.entry['nodeId'] || nodeEntry.entry['guid'];
            if (nodeId) {
                this.getNodeInfo(nodeId).subscribe((entry) => {
                    this.openShareLinkDialog({ entry });
                });
            }
            else {
                this.openShareLinkDialog(nodeEntry);
            }
        }
    }
    getNodeInfo(nodeId) {
        const options = {
            include: ['allowableOperations']
        };
        return from(this.alfrescoApiService.nodesApi.getNodeInfo(nodeId, options));
    }
    openShareLinkDialog(node) {
        this.dialog.open(ShareDialogComponent, {
            width: '600px',
            panelClass: 'adf-share-link-dialog',
            data: {
                node,
                baseShareUrl: this.baseShareUrl
            }
        });
    }
    ngOnChanges() {
        this.zone.onStable
            .pipe(takeUntil(this.onDestroy$))
            .subscribe(() => {
            if (this.node && this.node.entry) {
                this.isFile = this.node.entry.isFile;
                this.isShared = this.node.entry.properties ? this.node.entry.properties['qshare:sharedId'] : false;
            }
        });
    }
    onClick() {
        if (this.node) {
            this.shareNode(this.node);
        }
    }
}
NodeSharedDirective.ɵfac = function NodeSharedDirective_Factory(t) { return new (t || NodeSharedDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.MatDialog), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.AlfrescoApiService)); };
NodeSharedDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: NodeSharedDirective, selectors: [["", "adf-share", ""]], hostBindings: function NodeSharedDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function NodeSharedDirective_click_HostBindingHandler() { return ctx.onClick(); });
    } }, inputs: { node: ["adf-share", "node"], baseShareUrl: "baseShareUrl" }, exportAs: ["adfShare"], features: [ɵngcc0.ɵɵNgOnChangesFeature] });
NodeSharedDirective.ctorParameters = () => [
    { type: MatDialog },
    { type: NgZone },
    { type: AlfrescoApiService }
];
NodeSharedDirective.propDecorators = {
    node: [{ type: Input, args: ['adf-share',] }],
    baseShareUrl: [{ type: Input }],
    onClick: [{ type: HostListener, args: ['click',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NodeSharedDirective, [{
        type: Directive,
        args: [{
                selector: '[adf-share]',
                exportAs: 'adfShare'
            }]
    }], function () { return [{ type: ɵngcc1.MatDialog }, { type: ɵngcc0.NgZone }, { type: ɵngcc2.AlfrescoApiService }]; }, { onClick: [{
            type: HostListener,
            args: ['click']
        }], node: [{
            type: Input,
            args: ['adf-share']
        }], baseShareUrl: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,