/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, Inject, ViewEncapsulation, ViewChild } from '@angular/core';
import { MAT_DIALOG_DATA, MatDialogRef, MatDialog } from '@angular/material/dialog';
import { FormGroup, FormControl } from '@angular/forms';
import { Subject } from 'rxjs';
import { SharedLinksApiService, NodesApiService, ContentService, RenditionsService, AppConfigService } from '@alfresco/adf-core';
import { ConfirmDialogComponent } from '../dialogs/confirm.dialog';
import moment from 'moment-es6';
import { takeUntil, debounceTime } from 'rxjs/operators';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@alfresco/adf-core';
import * as ɵngcc2 from '@angular/material/dialog';
import * as ɵngcc3 from '@angular/material/slide-toggle';
import * as ɵngcc4 from '@angular/forms';
import * as ɵngcc5 from '@angular/material/form-field';
import * as ɵngcc6 from '@angular/material/input';
import * as ɵngcc7 from '@angular/material/icon';
import * as ɵngcc8 from '@mat-datetimepicker/core';
import * as ɵngcc9 from '@angular/material/button';
import * as ɵngcc10 from '@ngx-translate/core';

const _c0 = ["slideToggleExpirationDate"];
const _c1 = ["dateTimePickerInput"];
export class ShareDialogComponent {
    constructor(appConfigService, sharedLinksApiService, dialogRef, dialog, nodesApiService, contentService, renditionService, data) {
        this.appConfigService = appConfigService;
        this.sharedLinksApiService = sharedLinksApiService;
        this.dialogRef = dialogRef;
        this.dialog = dialog;
        this.nodesApiService = nodesApiService;
        this.contentService = contentService;
        this.renditionService = renditionService;
        this.data = data;
        this.minDate = moment().add(1, 'd');
        this.isFileShared = false;
        this.isDisabled = false;
        this.form = new FormGroup({
            sharedUrl: new FormControl(''),
            time: new FormControl({ value: '', disabled: true })
        });
        this.type = 'datetime';
        this.maxDebounceTime = 500;
        this.onDestroy$ = new Subject();
    }
    ngOnInit() {
        this.type = this.appConfigService.get('sharedLinkDateTimePickerType', 'datetime');
        if (this.data.node && this.data.node.entry) {
            this.fileName = this.data.node.entry.name;
            this.baseShareUrl = this.data.baseShareUrl;
            const properties = this.data.node.entry.properties;
            if (!properties || !properties['qshare:sharedId']) {
                this.createSharedLinks(this.data.node.entry.id);
            }
            else {
                this.sharedId = properties['qshare:sharedId'];
                this.isFileShared = true;
                this.updateForm();
            }
        }
        this.time.valueChanges
            .pipe(debounceTime(this.maxDebounceTime), takeUntil(this.onDestroy$))
            .subscribe(value => this.onTimeChanged(value));
    }
    onTimeChanged(date) {
        this.updateNode(date).subscribe(() => this.updateEntryExpiryDate(date));
    }
    get time() {
        return this.form.controls['time'];
    }
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
    onSlideShareChange(event) {
        if (event.checked) {
            this.createSharedLinks(this.data.node.entry.id);
        }
        else {
            this.openConfirmationDialog();
        }
    }
    get canUpdate() {
        const { entry } = this.data.node;
        if (entry && entry.allowableOperations) {
            return this.contentService.hasAllowableOperations(entry, 'update');
        }
        return true;
    }
    onToggleExpirationDate(slideToggle) {
        if (slideToggle.checked) {
            this.time.enable();
        }
        else {
            this.time.disable();
            this.time.setValue(null);
        }
    }
    onDatetimepickerClosed() {
        this.dateTimePickerInput.nativeElement.blur();
        if (!this.time.value) {
            this.slideToggleExpirationDate.checked = false;
        }
    }
    openConfirmationDialog() {
        this.isFileShared = false;
        this.dialog
            .open(ConfirmDialogComponent, {
            data: {
                title: 'SHARE.CONFIRMATION.DIALOG-TITLE',
                message: 'SHARE.CONFIRMATION.MESSAGE',
                yesLabel: 'SHARE.CONFIRMATION.REMOVE',
                noLabel: 'SHARE.CONFIRMATION.CANCEL'
            },
            minWidth: '250px',
            closeOnNavigation: true
        })
            .beforeClosed()
            .subscribe((deleteSharedLink) => {
            if (deleteSharedLink) {
                this.deleteSharedLink(this.sharedId);
            }
            else {
                this.isFileShared = true;
            }
        });
    }
    createSharedLinks(nodeId) {
        this.isDisabled = true;
        this.sharedLinksApiService.createSharedLinks(nodeId).subscribe((sharedLink) => {
            if (sharedLink.entry) {
                this.sharedId = sharedLink.entry.id;
                if (this.data.node.entry.properties) {
                    this.data.node.entry.properties['qshare:sharedId'] = this.sharedId;
                }
                else {
                    this.data.node.entry.properties = {
                        'qshare:sharedId': this.sharedId
                    };
                }
                this.isDisabled = false;
                this.isFileShared = true;
                this.renditionService
                    .generateRenditionForNode(this.data.node.entry.id)
                    .subscribe(() => { });
                this.updateForm();
            }
        }, () => {
            this.isDisabled = false;
            this.isFileShared = false;
        });
    }
    deleteSharedLink(sharedId) {
        this.isDisabled = true;
        this.sharedLinksApiService
            .deleteSharedLink(sharedId)
            .subscribe((response) => {
            if (response instanceof Error) {
                this.isDisabled = false;
                this.isFileShared = true;
                this.handleError(response);
            }
            else {
                if (this.data.node.entry.properties) {
                    this.data.node.entry.properties['qshare:sharedId'] = null;
                    this.data.node.entry.properties['qshare:expiryDate'] = null;
                }
                this.dialogRef.close(false);
            }
        });
    }
    handleError(error) {
        let message = 'SHARE.UNSHARE_ERROR';
        let statusCode = 0;
        try {
            statusCode = JSON.parse(error.message).error.statusCode;
        }
        catch (_a) { }
        if (statusCode === 403) {
            message = 'SHARE.UNSHARE_PERMISSION_ERROR';
        }
        this.sharedLinksApiService.error.next({
            statusCode,
            message
        });
    }
    updateForm() {
        const { entry } = this.data.node;
        let expiryDate = null;
        if (entry && entry.properties) {
            expiryDate = entry.properties['qshare:expiryDate'];
        }
        this.form.setValue({
            sharedUrl: `${this.baseShareUrl}${this.sharedId}`,
            time: expiryDate ? moment(expiryDate).local() : null
        });
        if (expiryDate) {
            this.time.enable();
        }
        else {
            this.time.disable();
        }
    }
    updateNode(date) {
        const expiryDate = date
            ? (this.type === 'date' ? date.endOf('day').utc().format() : date.utc().format())
            : null;
        return this.nodesApiService.updateNode(this.data.node.entry.id, {
            properties: {
                'qshare:expiryDate': expiryDate
            }
        });
    }
    updateEntryExpiryDate(date) {
        const { properties } = this.data.node.entry;
        if (properties) {
            properties['qshare:expiryDate'] = date
                ? date.local()
                : null;
        }
    }
}
ShareDialogComponent.ɵfac = function ShareDialogComponent_Factory(t) { return new (t || ShareDialogComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.AppConfigService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.SharedLinksApiService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.MatDialogRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.MatDialog), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NodesApiService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ContentService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.RenditionsService), ɵngcc0.ɵɵdirectiveInject(MAT_DIALOG_DATA)); };
ShareDialogComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ShareDialogComponent, selectors: [["adf-share-dialog"]], viewQuery: function ShareDialogComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵstaticViewQuery(_c0, true);
        ɵngcc0.ɵɵstaticViewQuery(_c1, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.slideToggleExpirationDate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.dateTimePickerInput = _t.first);
    } }, hostAttrs: [1, "adf-share-dialog"], decls: 41, vars: 43, consts: [[1, "adf-share-link__dialog-content"], ["data-automation-id", "adf-share-dialog-title", 1, "adf-share-link__title"], [1, "adf-share-link__info"], [1, "adf-share-link--row"], [1, "adf-share-link__label"], ["color", "primary", "data-automation-id", "adf-share-toggle", 3, "aria-label", "checked", "disabled", "change"], [3, "formGroup"], ["floatLabel", "always", 1, "adf-full-width", "adf-float-label"], ["data-automation-id", "adf-share-link", "matInput", "", "cdkFocusInitial", "", "formControlName", "sharedUrl", "readonly", "readonly", 1, "adf-share-link__input", 3, "placeholder"], ["sharedLinkInput", ""], ["matSuffix", "", 1, "adf-input-action", 3, "clipboard-notification", "adf-clipboard", "target"], ["color", "primary", "data-automation-id", "adf-expire-toggle", 3, "disabled", "aria-label", "checked", "change"], ["slideToggleExpirationDate", ""], ["matSuffix", "", 3, "disabled", "for"], ["matDatetimepickerToggle", "matDatetimepickerToggle"], [3, "type", "timeInterval", "closed"], ["datetimePicker", ""], ["matInput", "", "formControlName", "time", 1, "adf-share-link__input", 3, "placeholder", "min", "matDatetimepicker"], ["dateTimePickerInput", ""], ["mat-dialog-actions", ""], ["data-automation-id", "adf-share-dialog-close", "mat-button", "", "color", "primary", "mat-dialog-close", ""]], template: function ShareDialogComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵtext(2);
        ɵngcc0.ɵɵpipe(3, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(4, "mat-dialog-content");
        ɵngcc0.ɵɵelementStart(5, "p", 2);
        ɵngcc0.ɵɵtext(6);
        ɵngcc0.ɵɵpipe(7, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(8, "div", 3);
        ɵngcc0.ɵɵelementStart(9, "div", 4);
        ɵngcc0.ɵɵtext(10);
        ɵngcc0.ɵɵpipe(11, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(12, "mat-slide-toggle", 5);
        ɵngcc0.ɵɵlistener("change", function ShareDialogComponent_Template_mat_slide_toggle_change_12_listener($event) { return ctx.onSlideShareChange($event); });
        ɵngcc0.ɵɵpipe(13, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(14, "form", 6);
        ɵngcc0.ɵɵelementStart(15, "mat-form-field", 7);
        ɵngcc0.ɵɵelement(16, "input", 8, 9);
        ɵngcc0.ɵɵpipe(18, "translate");
        ɵngcc0.ɵɵelementStart(19, "mat-icon", 10);
        ɵngcc0.ɵɵpipe(20, "translate");
        ɵngcc0.ɵɵtext(21, " link ");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(22, "div", 3);
        ɵngcc0.ɵɵelementStart(23, "div", 4);
        ɵngcc0.ɵɵtext(24);
        ɵngcc0.ɵɵpipe(25, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(26, "mat-slide-toggle", 11, 12);
        ɵngcc0.ɵɵlistener("change", function ShareDialogComponent_Template_mat_slide_toggle_change_26_listener($event) { return ctx.onToggleExpirationDate($event); });
        ɵngcc0.ɵɵpipe(28, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(29, "mat-form-field", 7);
        ɵngcc0.ɵɵelement(30, "mat-datetimepicker-toggle", 13, 14);
        ɵngcc0.ɵɵelementStart(32, "mat-datetimepicker", 15, 16);
        ɵngcc0.ɵɵlistener("closed", function ShareDialogComponent_Template_mat_datetimepicker_closed_32_listener() { return ctx.onDatetimepickerClosed(); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(34, "input", 17, 18);
        ɵngcc0.ɵɵpipe(36, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(37, "div", 19);
        ɵngcc0.ɵɵelementStart(38, "button", 20);
        ɵngcc0.ɵɵtext(39);
        ɵngcc0.ɵɵpipe(40, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        const _r0 = ɵngcc0.ɵɵreference(17);
        const _r3 = ɵngcc0.ɵɵreference(33);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate2(" ", ɵngcc0.ɵɵpipeBind1(3, 23, "SHARE.DIALOG-TITLE"), " ", ctx.fileName, " ");
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(7, 25, "SHARE.DESCRIPTION"));
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(11, 27, "SHARE.TITLE"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵpropertyInterpolate("aria-label", ɵngcc0.ɵɵpipeBind1(13, 29, "SHARE.TITLE"));
        ɵngcc0.ɵɵproperty("checked", ctx.isFileShared)("disabled", !ctx.canUpdate || ctx.isDisabled);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("formGroup", ctx.form);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(18, 31, "SHARE.PUBLIC-LINK"));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("clipboard-notification", ɵngcc0.ɵɵpipeBind1(20, 33, "SHARE.CLIPBOARD-MESSAGE"))("target", _r0);
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(25, 35, "SHARE.EXPIRES"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵpropertyInterpolate("aria-label", ɵngcc0.ɵɵpipeBind1(28, 37, "SHARE.EXPIRES"));
        ɵngcc0.ɵɵproperty("disabled", !ctx.canUpdate)("checked", ctx.time.value);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("disabled", ctx.time.disabled)("for", _r3);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("type", ctx.type)("timeInterval", 1);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(36, 39, "SHARE.EXPIRATION-LABEL"));
        ɵngcc0.ɵɵproperty("min", ctx.minDate)("matDatetimepicker", _r3);
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(40, 41, "SHARE.CLOSE"), " ");
    } }, directives: [ɵngcc2.MatDialogContent, ɵngcc3.MatSlideToggle, ɵngcc4.ɵangular_packages_forms_forms_y, ɵngcc4.NgControlStatusGroup, ɵngcc4.FormGroupDirective, ɵngcc5.MatFormField, ɵngcc6.MatInput, ɵngcc4.DefaultValueAccessor, ɵngcc4.NgControlStatus, ɵngcc4.FormControlName, ɵngcc7.MatIcon, ɵngcc5.MatSuffix, ɵngcc1.ClipboardDirective, ɵngcc8.MatDatetimepickerToggle, ɵngcc8.MatDatetimepicker, ɵngcc8.MatDatetimepickerInput, ɵngcc2.MatDialogActions, ɵngcc9.MatButton, ɵngcc2.MatDialogClose], pipes: [ɵngcc10.TranslatePipe], encapsulation: 2 });
ShareDialogComponent.ctorParameters = () => [
    { type: AppConfigService },
    { type: SharedLinksApiService },
    { type: MatDialogRef },
    { type: MatDialog },
    { type: NodesApiService },
    { type: ContentService },
    { type: RenditionsService },
    { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_DATA,] }] }
];
ShareDialogComponent.propDecorators = {
    slideToggleExpirationDate: [{ type: ViewChild, args: ['slideToggleExpirationDate', { static: true },] }],
    dateTimePickerInput: [{ type: ViewChild, args: ['dateTimePickerInput', { static: true },] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ShareDialogComponent, [{
        type: Component,
        args: [{
                selector: 'adf-share-dialog',
                template: "<div class=\"adf-share-link__dialog-content\">\n    <div data-automation-id=\"adf-share-dialog-title\" class=\"adf-share-link__title\">\n        {{ 'SHARE.DIALOG-TITLE' | translate }} {{ fileName }}\n    </div>\n\n    <mat-dialog-content>\n        <p class=\"adf-share-link__info\">{{ 'SHARE.DESCRIPTION' | translate }}</p>\n\n        <div class=\"adf-share-link--row\">\n            <div class=\"adf-share-link__label\">{{ 'SHARE.TITLE' | translate }}</div>\n\n            <mat-slide-toggle\n                color=\"primary\"\n                data-automation-id=\"adf-share-toggle\"\n                aria-label=\"{{ 'SHARE.TITLE' | translate }}\"\n                [checked]=\"isFileShared\"\n                [disabled]=\"!canUpdate || isDisabled\"\n                (change)=\"onSlideShareChange($event)\">\n            </mat-slide-toggle>\n        </div>\n\n        <form [formGroup]=\"form\">\n            <mat-form-field class=\"adf-full-width adf-float-label\" floatLabel='always'>\n                <input\n                    #sharedLinkInput\n                    data-automation-id=\"adf-share-link\"\n                    class=\"adf-share-link__input\"\n                    matInput\n                    cdkFocusInitial\n                    placeholder=\"{{ 'SHARE.PUBLIC-LINK' | translate }}\"\n                    formControlName=\"sharedUrl\"\n                    readonly=\"readonly\">\n                <mat-icon\n                    class=\"adf-input-action\"\n                    matSuffix\n                    [clipboard-notification]=\"'SHARE.CLIPBOARD-MESSAGE' | translate\" [adf-clipboard]\n                    [target]=\"sharedLinkInput\">\n                    link\n                </mat-icon>\n            </mat-form-field>\n\n            <div class=\"adf-share-link--row\">\n                <div class=\"adf-share-link__label\">{{ 'SHARE.EXPIRES' | translate }}</div>\n                <mat-slide-toggle\n                    #slideToggleExpirationDate\n                    [disabled]=\"!canUpdate\"\n                    color=\"primary\"\n                    data-automation-id=\"adf-expire-toggle\"\n                    aria-label=\"{{ 'SHARE.EXPIRES' | translate }}\"\n                    [checked]=\"time.value\"\n                    (change)=\"onToggleExpirationDate($event)\">\n                </mat-slide-toggle>\n            </div>\n\n            <mat-form-field class=\"adf-full-width adf-float-label\" floatLabel='always'>\n                <mat-datetimepicker-toggle\n                    #matDatetimepickerToggle=\"matDatetimepickerToggle\"\n                    [disabled]=\"time.disabled\"\n                    [for]=\"datetimePicker\"\n                    matSuffix>\n                </mat-datetimepicker-toggle>\n                <mat-datetimepicker\n                    #datetimePicker\n                    (closed)=\"onDatetimepickerClosed()\"\n                    [type]=\"type\"\n                    [timeInterval]=\"1\">\n                </mat-datetimepicker>\n                <input class=\"adf-share-link__input\"\n                    #dateTimePickerInput\n                    matInput\n                    placeholder=\"{{ 'SHARE.EXPIRATION-LABEL' | translate }}\"\n                    [min]=\"minDate\"\n                    formControlName=\"time\"\n                    [matDatetimepicker]=\"datetimePicker\" />\n            </mat-form-field>\n        </form>\n    </mat-dialog-content>\n\n    <div mat-dialog-actions>\n        <button data-automation-id=\"adf-share-dialog-close\" mat-button color=\"primary\" mat-dialog-close>\n            {{ 'SHARE.CLOSE' | translate }}\n        </button>\n    </div>\n</div>\n",
                host: { class: 'adf-share-dialog' },
                encapsulation: ViewEncapsulation.None
            }]
    }], function () { return [{ type: ɵngcc1.AppConfigService }, { type: ɵngcc1.SharedLinksApiService }, { type: ɵngcc2.MatDialogRef }, { type: ɵngcc2.MatDialog }, { type: ɵngcc1.NodesApiService }, { type: ɵngcc1.ContentService }, { type: ɵngcc1.RenditionsService }, { type: undefined, decorators: [{
                type: Inject,
                args: [MAT_DIALOG_DATA]
            }] }]; }, { slideToggleExpirationDate: [{
            type: ViewChild,
            args: ['slideToggleExpirationDate', { static: true }]
        }], dateTimePickerInput: [{
            type: ViewChild,
            args: ['dateTimePickerInput', { static: true }]
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGVudC1ub2RlLXNoYXJlLmRpYWxvZy5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vaG9tZS90cmF2aXMvYnVpbGQvQWxmcmVzY28vYWxmcmVzY28tbmcyLWNvbXBvbmVudHMvbGliL2NvbnRlbnQtc2VydmljZXMvc3JjL2xpYi9jb250ZW50LW5vZGUtc2hhcmUvY29udGVudC1ub2RlLXNoYXJlLmRpYWxvZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBRUgsT0FBTyxFQUNILFNBQVMsRUFDVCxNQUFNLEVBRU4saUJBQWlCLEVBQ2pCLFNBQVMsRUFFWixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsZUFBZSxFQUFFLFlBQVksRUFBRSxTQUFTLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUVwRixPQUFPLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBbUIsTUFBTSxnQkFBZ0IsQ0FBQztBQUN6RSxPQUFPLEVBQWMsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQzNDLE9BQU8sRUFDSCxxQkFBcUIsRUFDckIsZUFBZSxFQUNmLGNBQWMsRUFDZCxpQkFBaUIsRUFDakIsZ0JBQWdCLEVBQ25CLE1BQU0sb0JBQW9CLENBQUM7QUFFNUIsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDbkUsT0FBTyxNQUFNLE1BQU0sWUFBWSxDQUFDO0FBRWhDLE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7Ozs7Ozs7Ozs7Ozs7OztBQVV6RCxNQUFNLE9BQU8sb0JBQW9CO0FBQUcsSUF1QmhDLFlBQ1ksZ0JBQWtDLEVBQ2xDLHFCQUE0QyxFQUM1QyxTQUE2QyxFQUM3QyxNQUFpQixFQUNqQixlQUFnQyxFQUNoQyxj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QUM7QUFDdkIsU0FBUztBQUNULElBQUksQ0FBQztBQUNMO2dEQTFQQyxTQUFTLFNBQUMsa0JBQ1AsUUFBUSxFQUFFLGtCQUFrQixrQkFDNUI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztNQUErQyxrQkFDL0MsSUFBSSxFQUFFLEVBQUUsS0FBSyxFQUFFO1lBQWtCLEVBQUU7S0FDbkMsYUFBYSxFQUFFLGlCQUFpQixDQUFDO0VBQUksY0FDeEM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7c2lCQUNJO0FBQUM7QUFBOEMsWUFoQmhELGdCQUFnQjtBQUNqQixZQUxDLHFCQUFxQjtBQUN2QixZQU53QixZQUFZO0FBQUksWUFBRixTQUFTO0FBQUksWUFNakQsZUFBZTtBQUNqQixZQUFFLGNBQWM7QUFDaEIsWUFBRSxpQkFBaUI7QUFDbkIsNENBK0NPLE1BQU0sU0FBQyxlQUFlO0FBQVE7QUFBRztBQUd6Qyx3Q0FuQkksU0FBUyxTQUFDLDJCQUEyQixFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRTtBQUN2RCxrQ0FFQSxTQUFTLFNBQUMscUJBQXFCLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFO0FBQ2xEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7b0JBQUU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7XG4gICAgQ29tcG9uZW50LFxuICAgIEluamVjdCxcbiAgICBPbkluaXQsXG4gICAgVmlld0VuY2Fwc3VsYXRpb24sXG4gICAgVmlld0NoaWxkLFxuICAgIE9uRGVzdHJveVxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE1BVF9ESUFMT0dfREFUQSwgTWF0RGlhbG9nUmVmLCBNYXREaWFsb2cgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9kaWFsb2cnO1xuaW1wb3J0IHsgTWF0U2xpZGVUb2dnbGVDaGFuZ2UgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9zbGlkZS10b2dnbGUnO1xuaW1wb3J0IHsgRm9ybUdyb3VwLCBGb3JtQ29udHJvbCwgQWJzdHJhY3RDb250cm9sIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtcbiAgICBTaGFyZWRMaW5rc0FwaVNlcnZpY2UsXG4gICAgTm9kZXNBcGlTZXJ2aWNlLFxuICAgIENvbnRlbnRTZXJ2aWNlLFxuICAgIFJlbmRpdGlvbnNTZXJ2aWNlLFxuICAgIEFwcENvbmZpZ1NlcnZpY2Vcbn0gZnJvbSAnQGFsZnJlc2NvL2FkZi1jb3JlJztcbmltcG9ydCB7IFNoYXJlZExpbmtFbnRyeSwgTm9kZSB9IGZyb20gJ0BhbGZyZXNjby9qcy1hcGknO1xuaW1wb3J0IHsgQ29uZmlybURpYWxvZ0NvbXBvbmVudCB9IGZyb20gJy4uL2RpYWxvZ3MvY29uZmlybS5kaWFsb2cnO1xuaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQtZXM2JztcbmltcG9ydCB7IENvbnRlbnROb2RlU2hhcmVTZXR0aW5ncyB9IGZyb20gJy4vY29udGVudC1ub2RlLXNoYXJlLnNldHRpbmdzJztcbmltcG9ydCB7IHRha2VVbnRpbCwgZGVib3VuY2VUaW1lIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG50eXBlIERhdGVQaWNrZXJUeXBlID0gJ2RhdGUnIHwgJ3RpbWUnIHwgJ21vbnRoJyB8ICdkYXRldGltZSc7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnYWRmLXNoYXJlLWRpYWxvZycsXG4gICAgdGVtcGxhdGVVcmw6ICcuL2NvbnRlbnQtbm9kZS1zaGFyZS5kaWFsb2cuaHRtbCcsXG4gICAgaG9zdDogeyBjbGFzczogJ2FkZi1zaGFyZS1kaWFsb2cnIH0sXG4gICAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZVxufSlcbmV4cG9ydCBjbGFzcyBTaGFyZURpYWxvZ0NvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcblxuICAgIG1pbkRhdGUgPSBtb21lbnQoKS5hZGQoMSwgJ2QnKTtcbiAgICBzaGFyZWRJZDogc3RyaW5nO1xuICAgIGZpbGVOYW1lOiBzdHJpbmc7XG4gICAgYmFzZVNoYXJlVXJsOiBzdHJpbmc7XG4gICAgaXNGaWxlU2hhcmVkOiBib29sZWFuID0gZmFsc2U7XG4gICAgaXNEaXNhYmxlZDogYm9vbGVhbiA9IGZhbHNlO1xuICAgIGZvcm06IEZvcm1Hcm91cCA9IG5ldyBGb3JtR3JvdXAoe1xuICAgICAgICBzaGFyZWRVcmw6IG5ldyBGb3JtQ29udHJvbCgnJyksXG4gICAgICAgIHRpbWU6IG5ldyBGb3JtQ29udHJvbCh7IHZhbHVlOiAnJywgZGlzYWJsZWQ6IHRydWUgfSlcbiAgICB9KTtcbiAgICB0eXBlOiBEYXRlUGlja2VyVHlwZSA9ICdkYXRldGltZSc7XG4gICAgbWF4RGVib3VuY2VUaW1lID0gNTAwO1xuXG4gICAgQFZpZXdDaGlsZCgnc2xpZGVUb2dnbGVFeHBpcmF0aW9uRGF0ZScsIHsgc3RhdGljOiB0cnVlIH0pXG4gICAgc2xpZGVUb2dnbGVFeHBpcmF0aW9uRGF0ZTtcblxuICAgIEBWaWV3Q2hpbGQoJ2RhdGVUaW1lUGlja2VySW5wdXQnLCB7IHN0YXRpYzogdHJ1ZSB9KVxuICAgIGRhdGVUaW1lUGlja2VySW5wdXQ7XG5cbiAgICBwcml2YXRlIG9uRGVzdHJveSQgPSBuZXcgU3ViamVjdDxib29sZWFuPigpO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHByaXZhdGUgYXBwQ29uZmlnU2VydmljZTogQXBwQ29uZmlnU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSBzaGFyZWRMaW5rc0FwaVNlcnZpY2U6IFNoYXJlZExpbmtzQXBpU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSBkaWFsb2dSZWY6IE1hdERpYWxvZ1JlZjxTaGFyZURpYWxvZ0NvbXBvbmVudD4sXG4gICAgICAgIHByaXZhdGUgZGlhbG9nOiBNYXREaWFsb2csXG4gICAgICAgIHByaXZhdGUgbm9kZXNBcGlTZXJ2aWNlOiBOb2Rlc0FwaVNlcnZpY2UsXG4gICAgICAgIHByaXZhdGUgY29udGVudFNlcnZpY2U6IENvbnRlbnRTZXJ2aWNlLFxuICAgICAgICBwcml2YXRlIHJlbmRpdGlvblNlcnZpY2U6IFJlbmRpdGlvbnNTZXJ2aWNlLFxuICAgICAgICBASW5qZWN0KE1BVF9ESUFMT0dfREFUQSkgcHVibGljIGRhdGE6IENvbnRlbnROb2RlU2hhcmVTZXR0aW5nc1xuICAgICkge31cblxuICAgIG5nT25Jbml0KCkge1xuICAgICAgICB0aGlzLnR5cGUgPSB0aGlzLmFwcENvbmZpZ1NlcnZpY2UuZ2V0PERhdGVQaWNrZXJUeXBlPignc2hhcmVkTGlua0RhdGVUaW1lUGlja2VyVHlwZScsICdkYXRldGltZScpO1xuXG4gICAgICAgIGlmICh0aGlzLmRhdGEubm9kZSAmJiB0aGlzLmRhdGEubm9kZS5lbnRyeSkge1xuICAgICAgICAgICAgdGhpcy5maWxlTmFtZSA9IHRoaXMuZGF0YS5ub2RlLmVudHJ5Lm5hbWU7XG4gICAgICAgICAgICB0aGlzLmJhc2VTaGFyZVVybCA9IHRoaXMuZGF0YS5iYXNlU2hhcmVVcmw7XG5cbiAgICAgICAgICAgIGNvbnN0IHByb3BlcnRpZXMgPSB0aGlzLmRhdGEubm9kZS5lbnRyeS5wcm9wZXJ0aWVzO1xuXG4gICAgICAgICAgICBpZiAoIXByb3BlcnRpZXMgfHwgIXByb3BlcnRpZXNbJ3FzaGFyZTpzaGFyZWRJZCddKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jcmVhdGVTaGFyZWRMaW5rcyh0aGlzLmRhdGEubm9kZS5lbnRyeS5pZCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuc2hhcmVkSWQgPSBwcm9wZXJ0aWVzWydxc2hhcmU6c2hhcmVkSWQnXTtcbiAgICAgICAgICAgICAgICB0aGlzLmlzRmlsZVNoYXJlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVGb3JtKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnRpbWUudmFsdWVDaGFuZ2VzXG4gICAgICAgICAgICAucGlwZShcbiAgICAgICAgICAgICAgICBkZWJvdW5jZVRpbWUodGhpcy5tYXhEZWJvdW5jZVRpbWUpLFxuICAgICAgICAgICAgICAgIHRha2VVbnRpbCh0aGlzLm9uRGVzdHJveSQpXG4gICAgICAgICAgICApXG4gICAgICAgICAgICAuc3Vic2NyaWJlKHZhbHVlID0+IHRoaXMub25UaW1lQ2hhbmdlZCh2YWx1ZSkpO1xuICAgIH1cblxuICAgIG9uVGltZUNoYW5nZWQoZGF0ZTogbW9tZW50Lk1vbWVudCkge1xuICAgICAgICB0aGlzLnVwZGF0ZU5vZGUoZGF0ZSkuc3Vic2NyaWJlKFxuICAgICAgICAgICAgKCkgPT4gdGhpcy51cGRhdGVFbnRyeUV4cGlyeURhdGUoZGF0ZSlcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBnZXQgdGltZSgpOiBBYnN0cmFjdENvbnRyb2wge1xuICAgICAgICByZXR1cm4gdGhpcy5mb3JtLmNvbnRyb2xzWyd0aW1lJ107XG4gICAgfVxuXG4gICAgbmdPbkRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMub25EZXN0cm95JC5uZXh0KHRydWUpO1xuICAgICAgICB0aGlzLm9uRGVzdHJveSQuY29tcGxldGUoKTtcbiAgICB9XG5cbiAgICBvblNsaWRlU2hhcmVDaGFuZ2UoZXZlbnQ6IE1hdFNsaWRlVG9nZ2xlQ2hhbmdlKSB7XG4gICAgICAgIGlmIChldmVudC5jaGVja2VkKSB7XG4gICAgICAgICAgICB0aGlzLmNyZWF0ZVNoYXJlZExpbmtzKHRoaXMuZGF0YS5ub2RlLmVudHJ5LmlkKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMub3BlbkNvbmZpcm1hdGlvbkRpYWxvZygpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0IGNhblVwZGF0ZSgpIHtcbiAgICAgICAgY29uc3QgeyBlbnRyeSB9ID0gdGhpcy5kYXRhLm5vZGU7XG5cbiAgICAgICAgaWYgKGVudHJ5ICYmIGVudHJ5LmFsbG93YWJsZU9wZXJhdGlvbnMpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbnRlbnRTZXJ2aWNlLmhhc0FsbG93YWJsZU9wZXJhdGlvbnMoZW50cnksICd1cGRhdGUnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIG9uVG9nZ2xlRXhwaXJhdGlvbkRhdGUoc2xpZGVUb2dnbGU6IE1hdFNsaWRlVG9nZ2xlQ2hhbmdlKSB7XG4gICAgICAgIGlmIChzbGlkZVRvZ2dsZS5jaGVja2VkKSB7XG4gICAgICAgICAgICB0aGlzLnRpbWUuZW5hYmxlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnRpbWUuZGlzYWJsZSgpO1xuICAgICAgICAgICAgdGhpcy50aW1lLnNldFZhbHVlKG51bGwpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgb25EYXRldGltZXBpY2tlckNsb3NlZCgpIHtcbiAgICAgICAgdGhpcy5kYXRlVGltZVBpY2tlcklucHV0Lm5hdGl2ZUVsZW1lbnQuYmx1cigpO1xuXG4gICAgICAgIGlmICghdGhpcy50aW1lLnZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLnNsaWRlVG9nZ2xlRXhwaXJhdGlvbkRhdGUuY2hlY2tlZCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBvcGVuQ29uZmlybWF0aW9uRGlhbG9nKCkge1xuICAgICAgICB0aGlzLmlzRmlsZVNoYXJlZCA9IGZhbHNlO1xuXG4gICAgICAgIHRoaXMuZGlhbG9nXG4gICAgICAgICAgICAub3BlbihDb25maXJtRGlhbG9nQ29tcG9uZW50LCB7XG4gICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ1NIQVJFLkNPTkZJUk1BVElPTi5ESUFMT0ctVElUTEUnLFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnU0hBUkUuQ09ORklSTUFUSU9OLk1FU1NBR0UnLFxuICAgICAgICAgICAgICAgICAgICB5ZXNMYWJlbDogJ1NIQVJFLkNPTkZJUk1BVElPTi5SRU1PVkUnLFxuICAgICAgICAgICAgICAgICAgICBub0xhYmVsOiAnU0hBUkUuQ09ORklSTUFUSU9OLkNBTkNFTCdcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG1pbldpZHRoOiAnMjUwcHgnLFxuICAgICAgICAgICAgICAgIGNsb3NlT25OYXZpZ2F0aW9uOiB0cnVlXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmJlZm9yZUNsb3NlZCgpXG4gICAgICAgICAgICAuc3Vic2NyaWJlKChkZWxldGVTaGFyZWRMaW5rKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGRlbGV0ZVNoYXJlZExpbmspIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kZWxldGVTaGFyZWRMaW5rKHRoaXMuc2hhcmVkSWQpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaXNGaWxlU2hhcmVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGNyZWF0ZVNoYXJlZExpbmtzKG5vZGVJZDogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuaXNEaXNhYmxlZCA9IHRydWU7XG5cbiAgICAgICAgdGhpcy5zaGFyZWRMaW5rc0FwaVNlcnZpY2UuY3JlYXRlU2hhcmVkTGlua3Mobm9kZUlkKS5zdWJzY3JpYmUoXG4gICAgICAgICAgICAoc2hhcmVkTGluazogU2hhcmVkTGlua0VudHJ5KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHNoYXJlZExpbmsuZW50cnkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zaGFyZWRJZCA9IHNoYXJlZExpbmsuZW50cnkuaWQ7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmRhdGEubm9kZS5lbnRyeS5wcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGEubm9kZS5lbnRyeS5wcm9wZXJ0aWVzWydxc2hhcmU6c2hhcmVkSWQnXSA9IHRoaXMuc2hhcmVkSWQ7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGEubm9kZS5lbnRyeS5wcm9wZXJ0aWVzID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdxc2hhcmU6c2hhcmVkSWQnOiB0aGlzLnNoYXJlZElkXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaXNEaXNhYmxlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmlzRmlsZVNoYXJlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVuZGl0aW9uU2VydmljZVxuICAgICAgICAgICAgICAgICAgICAgICAgLmdlbmVyYXRlUmVuZGl0aW9uRm9yTm9kZSh0aGlzLmRhdGEubm9kZS5lbnRyeS5pZClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zdWJzY3JpYmUoKCkgPT4ge30pO1xuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlRm9ybSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5pc0Rpc2FibGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdGhpcy5pc0ZpbGVTaGFyZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBkZWxldGVTaGFyZWRMaW5rKHNoYXJlZElkOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5pc0Rpc2FibGVkID0gdHJ1ZTtcblxuICAgICAgICB0aGlzLnNoYXJlZExpbmtzQXBpU2VydmljZVxuICAgICAgICAgICAgLmRlbGV0ZVNoYXJlZExpbmsoc2hhcmVkSWQpXG4gICAgICAgICAgICAuc3Vic2NyaWJlKChyZXNwb25zZTogYW55KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pc0Rpc2FibGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaXNGaWxlU2hhcmVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVFcnJvcihyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZGF0YS5ub2RlLmVudHJ5LnByb3BlcnRpZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YS5ub2RlLmVudHJ5LnByb3BlcnRpZXNbJ3FzaGFyZTpzaGFyZWRJZCddID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YS5ub2RlLmVudHJ5LnByb3BlcnRpZXNbJ3FzaGFyZTpleHBpcnlEYXRlJ10gPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGlhbG9nUmVmLmNsb3NlKGZhbHNlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBoYW5kbGVFcnJvcihlcnJvcjogRXJyb3IpIHtcbiAgICAgICAgbGV0IG1lc3NhZ2UgPSAnU0hBUkUuVU5TSEFSRV9FUlJPUic7XG4gICAgICAgIGxldCBzdGF0dXNDb2RlID0gMDtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgc3RhdHVzQ29kZSA9IEpTT04ucGFyc2UoZXJyb3IubWVzc2FnZSkuZXJyb3Iuc3RhdHVzQ29kZTtcbiAgICAgICAgfSBjYXRjaCB7fVxuXG4gICAgICAgIGlmIChzdGF0dXNDb2RlID09PSA0MDMpIHtcbiAgICAgICAgICAgIG1lc3NhZ2UgPSAnU0hBUkUuVU5TSEFSRV9QRVJNSVNTSU9OX0VSUk9SJztcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc2hhcmVkTGlua3NBcGlTZXJ2aWNlLmVycm9yLm5leHQoe1xuICAgICAgICAgICAgc3RhdHVzQ29kZSxcbiAgICAgICAgICAgIG1lc3NhZ2VcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSB1cGRhdGVGb3JtKCkge1xuICAgICAgICBjb25zdCB7IGVudHJ5IH0gPSB0aGlzLmRhdGEubm9kZTtcbiAgICAgICAgbGV0IGV4cGlyeURhdGUgPSBudWxsO1xuXG4gICAgICAgIGlmIChlbnRyeSAmJiBlbnRyeS5wcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICBleHBpcnlEYXRlID0gZW50cnkucHJvcGVydGllc1sncXNoYXJlOmV4cGlyeURhdGUnXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZm9ybS5zZXRWYWx1ZSh7XG4gICAgICAgICAgICBzaGFyZWRVcmw6IGAke3RoaXMuYmFzZVNoYXJlVXJsfSR7dGhpcy5zaGFyZWRJZH1gLFxuICAgICAgICAgICAgdGltZTogZXhwaXJ5RGF0ZSA/IG1vbWVudChleHBpcnlEYXRlKS5sb2NhbCgpIDogbnVsbFxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoZXhwaXJ5RGF0ZSkge1xuICAgICAgICAgICAgdGhpcy50aW1lLmVuYWJsZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy50aW1lLmRpc2FibGUoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgdXBkYXRlTm9kZShkYXRlOiBtb21lbnQuTW9tZW50KTogT2JzZXJ2YWJsZTxOb2RlPiB7XG4gICAgICAgIGNvbnN0IGV4cGlyeURhdGUgPSBkYXRlXG4gICAgICAgICAgICA/ICh0aGlzLnR5cGUgPT09ICdkYXRlJyA/IGRhdGUuZW5kT2YoJ2RheScpLnV0YygpLmZvcm1hdCgpIDogZGF0ZS51dGMoKS5mb3JtYXQoKSlcbiAgICAgICAgICAgIDogbnVsbDtcblxuICAgICAgICByZXR1cm4gdGhpcy5ub2Rlc0FwaVNlcnZpY2UudXBkYXRlTm9kZSh0aGlzLmRhdGEubm9kZS5lbnRyeS5pZCwge1xuICAgICAgICAgICAgcHJvcGVydGllczoge1xuICAgICAgICAgICAgICAgICdxc2hhcmU6ZXhwaXJ5RGF0ZSc6IGV4cGlyeURhdGVcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSB1cGRhdGVFbnRyeUV4cGlyeURhdGUoZGF0ZTogbW9tZW50Lk1vbWVudCkge1xuICAgICAgICBjb25zdCB7IHByb3BlcnRpZXMgfSA9IHRoaXMuZGF0YS5ub2RlLmVudHJ5O1xuXG4gICAgICAgIGlmIChwcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICBwcm9wZXJ0aWVzWydxc2hhcmU6ZXhwaXJ5RGF0ZSddID0gZGF0ZVxuICAgICAgICAgICAgICAgID8gZGF0ZS5sb2NhbCgpXG4gICAgICAgICAgICAgICAgOiBudWxsO1xuICAgICAgICB9XG4gICAgfVxufVxuIl19