/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, Inject, ViewEncapsulation, ViewChild } from '@angular/core';
import { MAT_DIALOG_DATA, MatDialogRef, MatDialog } from '@angular/material/dialog';
import { FormGroup, FormControl } from '@angular/forms';
import { Subject } from 'rxjs';
import { SharedLinksApiService, NodesApiService, ContentService, RenditionsService, AppConfigService } from '@alfresco/adf-core';
import { ConfirmDialogComponent } from '../dialogs/confirm.dialog';
import moment from 'moment-es6';
import { takeUntil, debounceTime } from 'rxjs/operators';
export class ShareDialogComponent {
    constructor(appConfigService, sharedLinksApiService, dialogRef, dialog, nodesApiService, contentService, renditionService, data) {
        this.appConfigService = appConfigService;
        this.sharedLinksApiService = sharedLinksApiService;
        this.dialogRef = dialogRef;
        this.dialog = dialog;
        this.nodesApiService = nodesApiService;
        this.contentService = contentService;
        this.renditionService = renditionService;
        this.data = data;
        this.minDate = moment().add(1, 'd');
        this.isFileShared = false;
        this.isDisabled = false;
        this.form = new FormGroup({
            sharedUrl: new FormControl(''),
            time: new FormControl({ value: '', disabled: true })
        });
        this.type = 'datetime';
        this.maxDebounceTime = 500;
        this.onDestroy$ = new Subject();
    }
    ngOnInit() {
        this.type = this.appConfigService.get('sharedLinkDateTimePickerType', 'datetime');
        if (this.data.node && this.data.node.entry) {
            this.fileName = this.data.node.entry.name;
            this.baseShareUrl = this.data.baseShareUrl;
            const properties = this.data.node.entry.properties;
            if (!properties || !properties['qshare:sharedId']) {
                this.createSharedLinks(this.data.node.entry.id);
            }
            else {
                this.sharedId = properties['qshare:sharedId'];
                this.isFileShared = true;
                this.updateForm();
            }
        }
        this.time.valueChanges
            .pipe(debounceTime(this.maxDebounceTime), takeUntil(this.onDestroy$))
            .subscribe(value => this.onTimeChanged(value));
    }
    onTimeChanged(date) {
        this.updateNode(date).subscribe(() => this.updateEntryExpiryDate(date));
    }
    get time() {
        return this.form.controls['time'];
    }
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
    onSlideShareChange(event) {
        if (event.checked) {
            this.createSharedLinks(this.data.node.entry.id);
        }
        else {
            this.openConfirmationDialog();
        }
    }
    get canUpdate() {
        const { entry } = this.data.node;
        if (entry && entry.allowableOperations) {
            return this.contentService.hasAllowableOperations(entry, 'update');
        }
        return true;
    }
    onToggleExpirationDate(slideToggle) {
        if (slideToggle.checked) {
            this.time.enable();
        }
        else {
            this.time.disable();
            this.time.setValue(null);
        }
    }
    onDatetimepickerClosed() {
        this.dateTimePickerInput.nativeElement.blur();
        if (!this.time.value) {
            this.slideToggleExpirationDate.checked = false;
        }
    }
    openConfirmationDialog() {
        this.isFileShared = false;
        this.dialog
            .open(ConfirmDialogComponent, {
            data: {
                title: 'SHARE.CONFIRMATION.DIALOG-TITLE',
                message: 'SHARE.CONFIRMATION.MESSAGE',
                yesLabel: 'SHARE.CONFIRMATION.REMOVE',
                noLabel: 'SHARE.CONFIRMATION.CANCEL'
            },
            minWidth: '250px',
            closeOnNavigation: true
        })
            .beforeClosed()
            .subscribe((deleteSharedLink) => {
            if (deleteSharedLink) {
                this.deleteSharedLink(this.sharedId);
            }
            else {
                this.isFileShared = true;
            }
        });
    }
    createSharedLinks(nodeId) {
        this.isDisabled = true;
        this.sharedLinksApiService.createSharedLinks(nodeId).subscribe((sharedLink) => {
            if (sharedLink.entry) {
                this.sharedId = sharedLink.entry.id;
                if (this.data.node.entry.properties) {
                    this.data.node.entry.properties['qshare:sharedId'] = this.sharedId;
                }
                else {
                    this.data.node.entry.properties = {
                        'qshare:sharedId': this.sharedId
                    };
                }
                this.isDisabled = false;
                this.isFileShared = true;
                this.renditionService
                    .generateRenditionForNode(this.data.node.entry.id)
                    .subscribe(() => { });
                this.updateForm();
            }
        }, () => {
            this.isDisabled = false;
            this.isFileShared = false;
        });
    }
    deleteSharedLink(sharedId) {
        this.isDisabled = true;
        this.sharedLinksApiService
            .deleteSharedLink(sharedId)
            .subscribe((response) => {
            if (response instanceof Error) {
                this.isDisabled = false;
                this.isFileShared = true;
                this.handleError(response);
            }
            else {
                if (this.data.node.entry.properties) {
                    this.data.node.entry.properties['qshare:sharedId'] = null;
                    this.data.node.entry.properties['qshare:expiryDate'] = null;
                }
                this.dialogRef.close(false);
            }
        });
    }
    handleError(error) {
        let message = 'SHARE.UNSHARE_ERROR';
        let statusCode = 0;
        try {
            statusCode = JSON.parse(error.message).error.statusCode;
        }
        catch (_a) { }
        if (statusCode === 403) {
            message = 'SHARE.UNSHARE_PERMISSION_ERROR';
        }
        this.sharedLinksApiService.error.next({
            statusCode,
            message
        });
    }
    updateForm() {
        const { entry } = this.data.node;
        let expiryDate = null;
        if (entry && entry.properties) {
            expiryDate = entry.properties['qshare:expiryDate'];
        }
        this.form.setValue({
            sharedUrl: `${this.baseShareUrl}${this.sharedId}`,
            time: expiryDate ? moment(expiryDate).local() : null
        });
        if (expiryDate) {
            this.time.enable();
        }
        else {
            this.time.disable();
        }
    }
    updateNode(date) {
        const expiryDate = date
            ? (this.type === 'date' ? date.endOf('day').utc().format() : date.utc().format())
            : null;
        return this.nodesApiService.updateNode(this.data.node.entry.id, {
            properties: {
                'qshare:expiryDate': expiryDate
            }
        });
    }
    updateEntryExpiryDate(date) {
        const { properties } = this.data.node.entry;
        if (properties) {
            properties['qshare:expiryDate'] = date
                ? date.local()
                : null;
        }
    }
}
ShareDialogComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-share-dialog',
                template: "<div class=\"adf-share-link__dialog-content\">\n    <div data-automation-id=\"adf-share-dialog-title\" class=\"adf-share-link__title\">\n        {{ 'SHARE.DIALOG-TITLE' | translate }} {{ fileName }}\n    </div>\n\n    <mat-dialog-content>\n        <p class=\"adf-share-link__info\">{{ 'SHARE.DESCRIPTION' | translate }}</p>\n\n        <div class=\"adf-share-link--row\">\n            <div class=\"adf-share-link__label\">{{ 'SHARE.TITLE' | translate }}</div>\n\n            <mat-slide-toggle\n                color=\"primary\"\n                data-automation-id=\"adf-share-toggle\"\n                aria-label=\"{{ 'SHARE.TITLE' | translate }}\"\n                [checked]=\"isFileShared\"\n                [disabled]=\"!canUpdate || isDisabled\"\n                (change)=\"onSlideShareChange($event)\">\n            </mat-slide-toggle>\n        </div>\n\n        <form [formGroup]=\"form\">\n            <mat-form-field class=\"adf-full-width adf-float-label\" floatLabel='always'>\n                <input\n                    #sharedLinkInput\n                    data-automation-id=\"adf-share-link\"\n                    class=\"adf-share-link__input\"\n                    matInput\n                    cdkFocusInitial\n                    placeholder=\"{{ 'SHARE.PUBLIC-LINK' | translate }}\"\n                    formControlName=\"sharedUrl\"\n                    readonly=\"readonly\">\n                <mat-icon\n                    class=\"adf-input-action\"\n                    matSuffix\n                    [clipboard-notification]=\"'SHARE.CLIPBOARD-MESSAGE' | translate\" [adf-clipboard]\n                    [target]=\"sharedLinkInput\">\n                    link\n                </mat-icon>\n            </mat-form-field>\n\n            <div class=\"adf-share-link--row\">\n                <div class=\"adf-share-link__label\">{{ 'SHARE.EXPIRES' | translate }}</div>\n                <mat-slide-toggle\n                    #slideToggleExpirationDate\n                    [disabled]=\"!canUpdate\"\n                    color=\"primary\"\n                    data-automation-id=\"adf-expire-toggle\"\n                    aria-label=\"{{ 'SHARE.EXPIRES' | translate }}\"\n                    [checked]=\"time.value\"\n                    (change)=\"onToggleExpirationDate($event)\">\n                </mat-slide-toggle>\n            </div>\n\n            <mat-form-field class=\"adf-full-width adf-float-label\" floatLabel='always'>\n                <mat-datetimepicker-toggle\n                    #matDatetimepickerToggle=\"matDatetimepickerToggle\"\n                    [disabled]=\"time.disabled\"\n                    [for]=\"datetimePicker\"\n                    matSuffix>\n                </mat-datetimepicker-toggle>\n                <mat-datetimepicker\n                    #datetimePicker\n                    (closed)=\"onDatetimepickerClosed()\"\n                    [type]=\"type\"\n                    [timeInterval]=\"1\">\n                </mat-datetimepicker>\n                <input class=\"adf-share-link__input\"\n                    #dateTimePickerInput\n                    matInput\n                    placeholder=\"{{ 'SHARE.EXPIRATION-LABEL' | translate }}\"\n                    [min]=\"minDate\"\n                    formControlName=\"time\"\n                    [matDatetimepicker]=\"datetimePicker\" />\n            </mat-form-field>\n        </form>\n    </mat-dialog-content>\n\n    <div mat-dialog-actions>\n        <button data-automation-id=\"adf-share-dialog-close\" mat-button color=\"primary\" mat-dialog-close>\n            {{ 'SHARE.CLOSE' | translate }}\n        </button>\n    </div>\n</div>\n",
                host: { class: 'adf-share-dialog' },
                encapsulation: ViewEncapsulation.None
            },] }
];
ShareDialogComponent.ctorParameters = () => [
    { type: AppConfigService },
    { type: SharedLinksApiService },
    { type: MatDialogRef },
    { type: MatDialog },
    { type: NodesApiService },
    { type: ContentService },
    { type: RenditionsService },
    { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_DATA,] }] }
];
ShareDialogComponent.propDecorators = {
    slideToggleExpirationDate: [{ type: ViewChild, args: ['slideToggleExpirationDate', { static: true },] }],
    dateTimePickerInput: [{ type: ViewChild, args: ['dateTimePickerInput', { static: true },] }]
};
//# sourceMappingURL=data:application/json;base64,