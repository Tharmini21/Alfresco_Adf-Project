/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, EventEmitter, Input, Output, ViewChild, ViewEncapsulation } from '@angular/core';
import { MatSelect } from '@angular/material/select';
import { Node } from '@alfresco/js-api';
import { DocumentListComponent } from '../document-list';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
export class BreadcrumbComponent {
    constructor() {
        this.folderNode = null;
        this.root = null;
        this.rootId = null;
        this.route = [];
        this.onDestroy$ = new Subject();
        this.readOnly = false;
        this.navigate = new EventEmitter();
    }
    get hasRoot() {
        return !!this.root;
    }
    ngOnInit() {
        this.transform = this.transform ? this.transform : null;
        if (this.target) {
            this.target.$folderNode
                .pipe(takeUntil(this.onDestroy$))
                .subscribe((folderNode) => {
                this.folderNode = folderNode;
                this.recalculateNodes();
            });
        }
    }
    ngOnChanges() {
        this.recalculateNodes();
    }
    recalculateNodes() {
        const node = this.transform ? this.transform(this.folderNode) : this.folderNode;
        this.route = this.parseRoute(node);
        if (this.maxItems && this.route.length > this.maxItems) {
            this.lastNodes = this.route.slice(this.route.length - this.maxItems);
            this.previousNodes = this.route.slice(0, this.route.length - this.maxItems);
            this.previousNodes.reverse();
        }
        else {
            this.lastNodes = this.route;
            this.previousNodes = null;
        }
    }
    open() {
        if (this.dropdown) {
            this.dropdown.open();
            this.dropdown.focus();
        }
    }
    hasPreviousNodes() {
        return !!this.previousNodes;
    }
    parseRoute(node) {
        if (node && node.path) {
            const route = (node.path.elements || []).slice();
            route.push({
                id: node.id,
                name: node.name,
                node: node
            });
            const rootPos = this.getElementPosition(route, this.rootId);
            if (rootPos > 0) {
                route.splice(0, rootPos);
            }
            if (rootPos === -1 && this.rootId) {
                route[0].id = this.rootId;
            }
            if (this.root) {
                route[0].name = this.root;
            }
            return route;
        }
        return [];
    }
    getElementPosition(route, nodeId) {
        let position = -1;
        if (route && route.length > 0 && nodeId) {
            position = route.findIndex((el) => el.id === nodeId);
        }
        return position;
    }
    breadcrumbItemIsAnchor(lastItem) {
        return !this.readOnly && !lastItem;
    }
    onRoutePathClick(route, event) {
        if (event && event.type === 'click') {
            event.preventDefault();
        }
        this.onRouteClick(route);
    }
    onRouteClick(route) {
        if (route && !this.readOnly) {
            this.navigate.emit(route);
            if (this.target) {
                this.target.navigateTo(route.id);
            }
        }
    }
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
}
BreadcrumbComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-breadcrumb',
                template: "<nav\n    *ngIf=\"folderNode\"\n    data-automation-id=\"breadcrumb\"\n    class=\"adf-breadcrumb-container\"\n    role=\"navigation\"\n    [attr.aria-label]=\"'BREADCRUMB.ARIA-LABEL.BREADCRUMB' | translate\"\n>\n    <button\n        *ngIf=\"hasPreviousNodes()\"\n        tabindex=\"0\"\n        class=\"adf-breadcrumb-dropdown-trigger\"\n        (click)=\"open()\"\n        [attr.aria-label]=\"'BREADCRUMB.ARIA-LABEL.DROPDOWN' | translate\"\n    >\n        <div class=\"adf-breadcrumb-dropdown-trigger-icon\">\n            <mat-icon [class.adf-isRoot]=\"!hasPreviousNodes()\">folder</mat-icon>\n            <mat-icon\n                [class.adf-isRoot]=\"!hasPreviousNodes()\"\n                class=\"adf-breadcrumb-dropdown-trigger-arrow\"\n                >arrow_drop_down</mat-icon\n            >\n        </div>\n    </button>\n\n    <mat-select\n        #dropdown\n        *ngIf=\"hasPreviousNodes()\"\n        class=\"adf-breadcrumb-dropdown-path\"\n        tabindex=\"-1\"\n    >\n        <mat-option\n            *ngFor=\"let node of previousNodes\"\n            (click)=\"onRoutePathClick(node, $event)\"\n            (onSelectionChange)=\"onRouteClick(node)\"\n            class=\"adf-breadcrumb-path-option\"\n            [disabled]=\"readOnly\"\n        >\n            {{ node.name | translate }}\n        </mat-option>\n    </mat-select>\n\n    <div\n        *ngFor=\"let item of lastNodes; let last = last\"\n        [class.adf-active]=\"last\"\n        [ngSwitch]=\"breadcrumbItemIsAnchor(last)\"\n        title=\"{{ item.name | translate }}\"\n        class=\"adf-breadcrumb-item\">\n        <a\n            *ngSwitchCase=\"true\"\n            href=\"#\"\n            [attr.data-automation-id]=\"'breadcrumb_' + item.name\"\n            class=\"adf-breadcrumb-item-anchor\"\n            (click)=\"onRoutePathClick(item, $event)\"\n        >\n            {{ item.name | translate }}\n        </a>\n\n        <div *ngSwitchDefault class=\"adf-breadcrumb-item-current\" role=\"heading\" aria-level=\"2\"\n            aria-current=\"location\">\n            {{ item.name | translate }}\n        </div>\n\n        <mat-icon class=\"adf-breadcrumb-item-chevron\" *ngIf=\"!last\">\n            chevron_right\n        </mat-icon>\n    </div>\n</nav>\n\n<nav\n    *ngIf=\"!folderNode && hasRoot\"\n    data-automation-id=\"breadcrumb\"\n    role=\"navigation\"\n    [attr.aria-label]=\"'BREADCRUMB.ARIA-LABEL.BREADCRUMB' | translate\"\n>\n    <div class=\"adf-breadcrumb-item adf-active\" role=\"listitem\">\n        <div class=\"adf-breadcrumb-item-current\" role=\"heading\" aria-level=\"2\">\n            {{ root | translate }}\n        </div>\n    </div>\n</nav>\n",
                encapsulation: ViewEncapsulation.None,
                host: {
                    'class': 'adf-breadcrumb'
                }
            },] }
];
BreadcrumbComponent.propDecorators = {
    folderNode: [{ type: Input }],
    root: [{ type: Input }],
    rootId: [{ type: Input }],
    target: [{ type: Input }],
    transform: [{ type: Input }],
    dropdown: [{ type: ViewChild, args: ['dropdown',] }],
    maxItems: [{ type: Input }],
    readOnly: [{ type: Input }],
    navigate: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJlYWRjcnVtYi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiL2hvbWUvdHJhdmlzL2J1aWxkL0FsZnJlc2NvL2FsZnJlc2NvLW5nMi1jb21wb25lbnRzL2xpYi9jb250ZW50LXNlcnZpY2VzL3NyYy8iLCJzb3VyY2VzIjpbImxpYi9icmVhZGNydW1iL2JyZWFkY3J1bWIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7R0FlRztBQUVILE9BQU8sRUFDSCxTQUFTLEVBQ1QsWUFBWSxFQUNaLEtBQUssRUFHTCxNQUFNLEVBQ04sU0FBUyxFQUNULGlCQUFpQixFQUVwQixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDckQsT0FBTyxFQUFFLElBQUksRUFBcUIsTUFBTSxrQkFBa0IsQ0FBQztBQUMzRCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUN6RCxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQy9CLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQVUzQyxNQUFNLE9BQU8sbUJBQW1CO0lBUmhDO1FBWUksZUFBVSxHQUFTLElBQUksQ0FBQztRQU94QixTQUFJLEdBQVcsSUFBSSxDQUFDO1FBTXBCLFdBQU0sR0FBVyxJQUFJLENBQUM7UUEwQnRCLFVBQUssR0FBd0IsRUFBRSxDQUFDO1FBRXhCLGVBQVUsR0FBRyxJQUFJLE9BQU8sRUFBVyxDQUFDO1FBUTVDLGFBQVEsR0FBWSxLQUFLLENBQUM7UUFJMUIsYUFBUSxHQUFHLElBQUksWUFBWSxFQUFxQixDQUFDO0lBOEdyRCxDQUFDO0lBeEhHLElBQUksT0FBTztRQUNQLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDdkIsQ0FBQztJQVVELFFBQVE7UUFDSixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUks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QztJQUVELFdBQVc7UUFDUCxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMzQixJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQy9CLENBQUM7OztZQTlLSixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLGdCQUFnQjtnQkFDMUIsaW9GQUEwQztnQkFDMUMsYUFBYSxFQUFFLGlCQUFpQixDQUFDLElBQUk7Z0JBQ3JDLElBQUksRUFBRTtvQkFDRixPQUFPLEVBQUUsZ0JBQWdCO2lCQUM1QjthQUNKOzs7eUJBSUksS0FBSzttQkFPTCxLQUFLO3FCQU1MLEtBQUs7cUJBTUwsS0FBSzt3QkFRTCxLQUFLO3VCQUdMLFNBQVMsU0FBQyxVQUFVO3VCQUlwQixLQUFLO3VCQWVMLEtBQUs7dUJBSUwsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7XG4gICAgQ29tcG9uZW50LFxuICAgIEV2ZW50RW1pdHRlcixcbiAgICBJbnB1dCxcbiAgICBPbkNoYW5nZXMsXG4gICAgT25Jbml0LFxuICAgIE91dHB1dCxcbiAgICBWaWV3Q2hpbGQsXG4gICAgVmlld0VuY2Fwc3VsYXRpb24sXG4gICAgT25EZXN0cm95XG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTWF0U2VsZWN0IH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwvc2VsZWN0JztcbmltcG9ydCB7IE5vZGUsIFBhdGhFbGVtZW50RW50aXR5IH0gZnJvbSAnQGFsZnJlc2NvL2pzLWFwaSc7XG5pbXBvcnQgeyBEb2N1bWVudExpc3RDb21wb25lbnQgfSBmcm9tICcuLi9kb2N1bWVudC1saXN0JztcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IHRha2VVbnRpbCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdhZGYtYnJlYWRjcnVtYicsXG4gICAgdGVtcGxhdGVVcmw6ICcuL2JyZWFkY3J1bWIuY29tcG9uZW50Lmh0bWwnLFxuICAgIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmUsXG4gICAgaG9zdDoge1xuICAgICAgICAnY2xhc3MnOiAnYWRmLWJyZWFkY3J1bWInXG4gICAgfVxufSlcbmV4cG9ydCBjbGFzcyBCcmVhZGNydW1iQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkNoYW5nZXMsIE9uRGVzdHJveSB7XG5cbiAgICAvKiogQWN0aXZlIG5vZGUsIGJ1aWxkcyBVSSBiYXNlZCBvbiBmb2xkZXJOb2RlLnBhdGguZWxlbWVudHMgY29sbGVjdGlvbi4gKi9cbiAgICBASW5wdXQoKVxuICAgIGZvbGRlck5vZGU6IE5vZGUgPSBudWxsO1xuXG4gICAgLyoqIChvcHRpb25hbCkgTmFtZSBvZiB0aGUgcm9vdCBlbGVtZW50IG9mIHRoZSBicmVhZGNydW1iLiBZb3UgY2FuIHVzZVxuICAgICAqIHRoaXMgcHJvcGVydHkgdG8gcmVuYW1lIFwiQ29tcGFueSBIb21lXCIgdG8gXCJQZXJzb25hbCBGaWxlc1wiIGZvclxuICAgICAqIGV4YW1wbGUuIFlvdSBjYW4gdXNlIGFuIGkxOG4gcmVzb3VyY2Uga2V5IGZvciB0aGUgcHJvcGVydHkgdmFsdWUuXG4gICAgICovXG4gICAgQElucHV0KClcbiAgICByb290OiBzdHJpbmcgPSBudWxsO1xuXG4gICAgLyoqIChvcHRpb25hbCkgVGhlIGlkIG9mIHRoZSByb290IGVsZW1lbnQuIFlvdSBjYW4gdXNlIHRoaXMgcHJvcGVydHlcbiAgICAgKiB0byBzZXQgYSBjdXN0b20gZWxlbWVudCB0aGUgYnJlYWRjcnVtYiBzaG91bGQgc3RhcnQgd2l0aC5cbiAgICAgKi9cbiAgICBASW5wdXQoKVxuICAgIHJvb3RJZDogc3RyaW5nID0gbnVsbDtcblxuICAgIC8qKiAob3B0aW9uYWwpIERvY3VtZW50IExpc3QgY29tcG9uZW50IHRvIG9wZXJhdGUgd2l0aC4gVGhlIGxpc3Qgd2lsbFxuICAgICAqIHVwZGF0ZSB3aGVuIHRoZSBicmVhZGNydW1iIGlzIGNsaWNrZWQuXG4gICAgICovXG4gICAgQElucHV0KClcbiAgICB0YXJnZXQ6IERvY3VtZW50TGlzdENvbXBvbmVudDtcblxuICAgIC8qKiBUcmFuc2Zvcm1hdGlvbiB0byBiZSBwZXJmb3JtZWQgb24gdGhlIGNob3Nlbi9mb2xkZXIgbm9kZSBiZWZvcmUgYnVpbGRpbmdcbiAgICAgKiB0aGUgYnJlYWRjcnVtYiBVSS4gQ2FuIGJlIHVzZWZ1bCB3aGVuIGN1c3RvbSBmb3JtYXR0aW5nIGlzIG5lZWRlZCBmb3IgdGhlXG4gICAgICogYnJlYWRjcnVtYi4gWW91IGNhbiBjaGFuZ2UgdGhlIHBhdGggZWxlbWVudHMgZnJvbSB0aGUgbm9kZSB0aGF0IGFyZSB1c2VkIHRvXG4gICAgICogYnVpbGQgdGhlIGJyZWFkY3J1bWIgdXNpbmcgdGhpcyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBASW5wdXQoKVxuICAgIHRyYW5zZm9ybTogKG5vZGUpID0+IGFueTtcblxuICAgIEBWaWV3Q2hpbGQoJ2Ryb3Bkb3duJylcbiAgICBkcm9wZG93bjogTWF0U2VsZWN0O1xuXG4gICAgLyoqIE1heGltdW0gbnVtYmVyIG9mIG5vZGVzIHRvIGRpc3BsYXkgYmVmb3JlIHdyYXBwaW5nIHRoZW0gd2l0aCBhIGRyb3Bkb3duIGVsZW1lbnQuICAqL1xuICAgIEBJbnB1dCgpXG4gICAgbWF4SXRlbXM6IG51bWJlcjtcblxuICAgIHByZXZpb3VzTm9kZXM6IFBhdGhFbGVtZW50RW50aXR5W107XG4gICAgbGFzdE5vZGVzOiBQYXRoRWxlbWVudEVudGl0eVtdO1xuXG4gICAgcm91dGU6IFBhdGhFbGVtZW50RW50aXR5W10gPSBbXTtcblxuICAgIHByaXZhdGUgb25EZXN0cm95JCA9IG5ldyBTdWJqZWN0PGJvb2xlYW4+KCk7XG5cbiAgICBnZXQgaGFzUm9vdCgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuICEhdGhpcy5yb290O1xuICAgIH1cblxuICAgIC8qKiBJZiB0cnVlLCBwcmV2ZW50cyB0aGUgdXNlciBmcm9tIG5hdmlnYXRpbmcgYXdheSBmcm9tIHRoZSBhY3RpdmUgbm9kZS4gKi9cbiAgICBASW5wdXQoKVxuICAgIHJlYWRPbmx5OiBib29sZWFuID0gZmFsc2U7XG5cbiAgICAvKiogRW1pdHRlZCB3aGVuIHRoZSB1c2VyIGNsaWNrcyBvbiBhIGJyZWFkY3J1bWIuICovXG4gICAgQE91dHB1dCgpXG4gICAgbmF2aWdhdGUgPSBuZXcgRXZlbnRFbWl0dGVyPFBhdGhFbGVtZW50RW50aXR5PigpO1xuXG4gICAgbmdPbkluaXQoKSB7XG4gICAgICAgIHRoaXMudHJhbnNmb3JtID0gdGhpcy50cmFuc2Zvcm0gPyB0aGlzLnRyYW5zZm9ybSA6IG51bGw7XG5cbiAgICAgICAgaWYgKHRoaXMudGFyZ2V0KSB7XG4gICAgICAgICAgICB0aGlzLnRhcmdldC4kZm9sZGVyTm9kZVxuICAgICAgICAgICAgICAgIC5waXBlKHRha2VVbnRpbCh0aGlzLm9uRGVzdHJveSQpKVxuICAgICAgICAgICAgICAgIC5zdWJzY3JpYmUoKGZvbGRlck5vZGU6IE5vZGUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5mb2xkZXJOb2RlID0gZm9sZGVyTm9kZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWNhbGN1bGF0ZU5vZGVzKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBuZ09uQ2hhbmdlcygpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5yZWNhbGN1bGF0ZU5vZGVzKCk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIHJlY2FsY3VsYXRlTm9kZXMoKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IG5vZGU6IE5vZGUgPSB0aGlzLnRyYW5zZm9ybSA/IHRoaXMudHJhbnNmb3JtKHRoaXMuZm9sZGVyTm9kZSkgOiB0aGlzLmZvbGRlck5vZGU7XG5cbiAgICAgICAgdGhpcy5yb3V0ZSA9IHRoaXMucGFyc2VSb3V0ZShub2RlKTtcblxuICAgICAgICBpZiAodGhpcy5tYXhJdGVtcyAmJiB0aGlzLnJvdXRlLmxlbmd0aCA+IHRoaXMubWF4SXRlbXMpIHtcbiAgICAgICAgICAgIHRoaXMubGFzdE5vZGVzID0gdGhpcy5yb3V0ZS5zbGljZSh0aGlzLnJvdXRlLmxlbmd0aCAtIHRoaXMubWF4SXRlbXMpO1xuICAgICAgICAgICAgdGhpcy5wcmV2aW91c05vZGVzID0gdGhpcy5yb3V0ZS5zbGljZSgwLCB0aGlzLnJvdXRlLmxlbmd0aCAtIHRoaXMubWF4SXRlbXMpO1xuICAgICAgICAgICAgdGhpcy5wcmV2aW91c05vZGVzLnJldmVyc2UoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMubGFzdE5vZGVzID0gdGhpcy5yb3V0ZTtcbiAgICAgICAgICAgIHRoaXMucHJldmlvdXNOb2RlcyA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvcGVuKCk6IHZvaWQge1xuICAgICAgICBpZiAodGhpcy5kcm9wZG93bikge1xuICAgICAgICAgICAgdGhpcy5kcm9wZG93bi5vcGVuKCk7XG4gICAgICAgICAgICB0aGlzLmRyb3Bkb3duLmZvY3VzKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBoYXNQcmV2aW91c05vZGVzKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gISF0aGlzLnByZXZpb3VzTm9kZXM7XG4gICAgfVxuXG4gICAgcGFyc2VSb3V0ZShub2RlOiBOb2RlKTogUGF0aEVsZW1lbnRFbnRpdHlbXSB7XG4gICAgICAgIGlmIChub2RlICYmIG5vZGUucGF0aCkge1xuICAgICAgICAgICAgY29uc3Qgcm91dGUgPSA8UGF0aEVsZW1lbnRFbnRpdHlbXT4gKG5vZGUucGF0aC5lbGVtZW50cyB8fCBbXSkuc2xpY2UoKTtcblxuICAgICAgICAgICAgcm91dGUucHVzaCg8UGF0aEVsZW1lbnRFbnRpdHk+IHtcbiAgICAgICAgICAgICAgICBpZDogbm9kZS5pZCxcbiAgICAgICAgICAgICAgICBuYW1lOiBub2RlLm5hbWUsXG4gICAgICAgICAgICAgICAgbm9kZTogbm9kZVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGNvbnN0IHJvb3RQb3MgPSB0aGlzLmdldEVsZW1lbnRQb3NpdGlvbihyb3V0ZSwgdGhpcy5yb290SWQpO1xuICAgICAgICAgICAgaWYgKHJvb3RQb3MgPiAwKSB7XG4gICAgICAgICAgICAgICAgcm91dGUuc3BsaWNlKDAsIHJvb3RQb3MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAocm9vdFBvcyA9PT0gLTEgJiYgdGhpcy5yb290SWQpIHtcbiAgICAgICAgICAgICAgICByb3V0ZVswXS5pZCA9IHRoaXMucm9vdElkO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodGhpcy5yb290KSB7XG4gICAgICAgICAgICAgICAgcm91dGVbMF0ubmFtZSA9IHRoaXMucm9vdDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHJvdXRlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0RWxlbWVudFBvc2l0aW9uKHJvdXRlOiBQYXRoRWxlbWVudEVudGl0eVtdLCBub2RlSWQ6IHN0cmluZyk6IG51bWJlciB7XG4gICAgICAgIGxldCBwb3NpdGlvbjogbnVtYmVyID0gLTE7XG5cbiAgICAgICAgaWYgKHJvdXRlICYmIHJvdXRlLmxlbmd0aCA+IDAgJiYgbm9kZUlkKSB7XG4gICAgICAgICAgICBwb3NpdGlvbiA9IHJvdXRlLmZpbmRJbmRleCgoZWwpID0+IGVsLmlkID09PSBub2RlSWQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHBvc2l0aW9uO1xuICAgIH1cblxuICAgIGJyZWFkY3J1bWJJdGVtSXNBbmNob3IobGFzdEl0ZW0pOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuICF0aGlzLnJlYWRPbmx5ICYmICFsYXN0SXRlbTtcbiAgICB9XG5cbiAgICBvblJvdXRlUGF0aENsaWNrKHJvdXRlOiBQYXRoRWxlbWVudEVudGl0eSwgZXZlbnQ/OiBFdmVudCk6IHZvaWQge1xuICAgICAgICBpZiAoZXZlbnQgJiYgZXZlbnQudHlwZSA9PT0gJ2NsaWNrJykge1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMub25Sb3V0ZUNsaWNrKHJvdXRlKTtcbiAgICB9XG5cbiAgICBvblJvdXRlQ2xpY2socm91dGU6IFBhdGhFbGVtZW50RW50aXR5KSB7XG4gICAgICAgIGlmIChyb3V0ZSAmJiAhdGhpcy5yZWFkT25seSkge1xuICAgICAgICAgICAgdGhpcy5uYXZpZ2F0ZS5lbWl0KHJvdXRlKTtcblxuICAgICAgICAgICAgaWYgKHRoaXMudGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgdGhpcy50YXJnZXQubmF2aWdhdGVUbyhyb3V0ZS5pZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBuZ09uRGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy5vbkRlc3Ryb3kkLm5leHQodHJ1ZSk7XG4gICAgICAgIHRoaXMub25EZXN0cm95JC5jb21wbGV0ZSgpO1xuICAgIH1cbn1cbiJdfQ==