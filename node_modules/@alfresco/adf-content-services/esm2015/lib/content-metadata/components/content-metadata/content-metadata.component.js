/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, Input, ViewEncapsulation } from '@angular/core';
import { Node } from '@alfresco/js-api';
import { Subject, of, zip } from 'rxjs';
import { NodesApiService, LogService, CardViewUpdateService, AlfrescoApiService, TranslationService, AppConfigService } from '@alfresco/adf-core';
import { ContentMetadataService } from '../../services/content-metadata.service';
import { takeUntil, debounceTime, catchError, map } from 'rxjs/operators';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../../services/content-metadata.service';
import * as ɵngcc2 from '@alfresco/adf-core';
import * as ɵngcc3 from '@angular/material/expansion';
import * as ɵngcc4 from '@angular/common';
import * as ɵngcc5 from '@angular/material/progress-bar';
import * as ɵngcc6 from '@angular/material/button';
import * as ɵngcc7 from '@ngx-translate/core';

function ContentMetadataComponent_mat_expansion_panel_2_Template(rf, ctx) { if (rf & 1) {
    const _r4 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-expansion-panel", 5);
    ɵngcc0.ɵɵelementStart(1, "mat-expansion-panel-header");
    ɵngcc0.ɵɵelementStart(2, "mat-panel-title", 6);
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "adf-card-view", 7);
    ɵngcc0.ɵɵlistener("keydown", function ContentMetadataComponent_mat_expansion_panel_2_Template_adf_card_view_keydown_5_listener($event) { ɵngcc0.ɵɵrestoreView(_r4); const ctx_r3 = ɵngcc0.ɵɵnextContext(); return ctx_r3.keyDown($event); });
    ɵngcc0.ɵɵpipe(6, "async");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("expanded", ctx_r0.canExpandProperties());
    ɵngcc0.ɵɵattribute("data-automation-id", "adf-metadata-group-properties");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(4, 9, "CORE.METADATA.BASIC.HEADER"), " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("properties", ɵngcc0.ɵɵpipeBind1(6, 11, ctx_r0.basicProperties$))("editable", ctx_r0.editable)("displayEmpty", ctx_r0.displayEmpty)("copyToClipboardAction", ctx_r0.copyToClipboardAction)("useChipsForMultiValueProperty", ctx_r0.useChipsForMultiValueProperty)("multiValueSeparator", ctx_r0.multiValueSeparator);
} }
function ContentMetadataComponent_ng_container_3_ng_container_1_div_1_mat_expansion_panel_1_Template(rf, ctx) { if (rf & 1) {
    const _r14 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-expansion-panel", 5);
    ɵngcc0.ɵɵelementStart(1, "mat-expansion-panel-header");
    ɵngcc0.ɵɵelementStart(2, "mat-panel-title");
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "adf-card-view", 7);
    ɵngcc0.ɵɵlistener("keydown", function ContentMetadataComponent_ng_container_3_ng_container_1_div_1_mat_expansion_panel_1_Template_adf_card_view_keydown_5_listener($event) { ɵngcc0.ɵɵrestoreView(_r14); const ctx_r13 = ɵngcc0.ɵɵnextContext(4); return ctx_r13.keyDown($event); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r15 = ɵngcc0.ɵɵnextContext();
    const group_r10 = ctx_r15.$implicit;
    const first_r11 = ctx_r15.first;
    const ctx_r12 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵproperty("expanded", ctx_r12.canExpandTheCard(group_r10) || !ctx_r12.displayDefaultProperties && first_r11);
    ɵngcc0.ɵɵattribute("data-automation-id", "adf-metadata-group-" + group_r10.title);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(4, 9, group_r10.title), " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("properties", group_r10.properties)("editable", ctx_r12.editable)("displayEmpty", ctx_r12.displayEmpty)("copyToClipboardAction", ctx_r12.copyToClipboardAction)("useChipsForMultiValueProperty", ctx_r12.useChipsForMultiValueProperty)("multiValueSeparator", ctx_r12.multiValueSeparator);
} }
function ContentMetadataComponent_ng_container_3_ng_container_1_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 11);
    ɵngcc0.ɵɵtemplate(1, ContentMetadataComponent_ng_container_3_ng_container_1_div_1_mat_expansion_panel_1_Template, 6, 11, "mat-expansion-panel", 2);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const group_r10 = ctx.$implicit;
    const ctx_r9 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r9.showGroup(group_r10) || ctx_r9.editable);
} }
function ContentMetadataComponent_ng_container_3_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, ContentMetadataComponent_ng_container_3_ng_container_1_div_1_Template, 2, 1, "div", 10);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const groupedProperties_r8 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", groupedProperties_r8);
} }
function ContentMetadataComponent_ng_container_3_ng_template_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "mat-progress-bar", 12);
} }
function ContentMetadataComponent_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, ContentMetadataComponent_ng_container_3_ng_container_1_Template, 2, 1, "ng-container", 8);
    ɵngcc0.ɵɵpipe(2, "async");
    ɵngcc0.ɵɵtemplate(3, ContentMetadataComponent_ng_container_3_ng_template_3_Template, 1, 0, "ng-template", null, 9, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const _r6 = ɵngcc0.ɵɵreference(4);
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind1(2, 2, ctx_r1.groupedProperties$))("ngIfElse", _r6);
} }
function ContentMetadataComponent_div_4_Template(rf, ctx) { if (rf & 1) {
    const _r17 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 13);
    ɵngcc0.ɵɵelementStart(1, "button", 14);
    ɵngcc0.ɵɵlistener("click", function ContentMetadataComponent_div_4_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r17); const ctx_r16 = ɵngcc0.ɵɵnextContext(); return ctx_r16.cancelChanges(); });
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "button", 15);
    ɵngcc0.ɵɵlistener("click", function ContentMetadataComponent_div_4_Template_button_click_4_listener() { ɵngcc0.ɵɵrestoreView(_r17); const ctx_r18 = ɵngcc0.ɵɵnextContext(); return ctx_r18.saveChanges(); });
    ɵngcc0.ɵɵtext(5);
    ɵngcc0.ɵɵpipe(6, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("disabled", !ctx_r2.hasMetadataChanged);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 4, "CORE.METADATA.ACTIONS.CANCEL"), " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("disabled", !ctx_r2.hasMetadataChanged);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(6, 6, "CORE.METADATA.ACTIONS.SAVE"), " ");
} }
export class ContentMetadataComponent {
    constructor(contentMetadataService, cardViewUpdateService, nodesApiService, logService, alfrescoApiService, translationService, appConfig) {
        this.contentMetadataService = contentMetadataService;
        this.cardViewUpdateService = cardViewUpdateService;
        this.nodesApiService = nodesApiService;
        this.logService = logService;
        this.alfrescoApiService = alfrescoApiService;
        this.translationService = translationService;
        this.appConfig = appConfig;
        this.onDestroy$ = new Subject();
        this.editable = false;
        this.displayEmpty = false;
        this.expanded = false;
        this.multi = false;
        this.displayDefaultProperties = true;
        this.displayAspect = null;
        this.copyToClipboardAction = true;
        this.useChipsForMultiValueProperty = true;
        this.changedProperties = {};
        this.hasMetadataChanged = false;
        this.copyToClipboardAction = this.appConfig.get('content-metadata.copy-to-clipboard-action');
        this.multiValueSeparator = this.appConfig.get('content-metadata.multi-value-pipe-separator') || ContentMetadataComponent.DEFAULT_SEPARATOR;
        this.useChipsForMultiValueProperty = this.appConfig.get('content-metadata.multi-value-chips');
    }
    ngOnInit() {
        this.cardViewUpdateService.itemUpdated$
            .pipe(debounceTime(500), takeUntil(this.onDestroy$))
            .subscribe((updatedNode) => {
            this.hasMetadataChanged = true;
            this.targetProperty = updatedNode.target;
            this.updateChanges(updatedNode.changed);
        });
        this.cardViewUpdateService.updatedAspect$.pipe(debounceTime(500), takeUntil(this.onDestroy$))
            .subscribe((node) => this.loadProperties(node));
        this.loadProperties(this.node);
    }
    handleUpdateError(error) {
        this.logService.error(error);
        let statusCode = 0;
        try {
            statusCode = JSON.parse(error.message).error.statusCode;
        }
        catch (_a) {
        }
        let message = `METADATA.ERRORS.${statusCode}`;
        if (this.translationService.instant(message) === message) {
            message = 'METADATA.ERRORS.GENERIC';
        }
        this.contentMetadataService.error.next({
            statusCode,
            message
        });
    }
    ngOnChanges(changes) {
        if (changes.node && !changes.node.firstChange) {
            this.loadProperties(changes.node.currentValue);
        }
    }
    loadProperties(node) {
        if (node) {
            this.basicProperties$ = this.getProperties(node);
            this.groupedProperties$ = this.contentMetadataService.getGroupedProperties(node, this.preset);
        }
    }
    getProperties(node) {
        const properties$ = this.contentMetadataService.getBasicProperties(node);
        const contentTypeProperty$ = this.contentMetadataService.getContentTypeProperty(node);
        return zip(properties$, contentTypeProperty$)
            .pipe(map(([properties, contentTypeProperty]) => {
            const filteredProperties = contentTypeProperty.filter((property) => properties.findIndex((baseProperty) => baseProperty.key === property.key) === -1);
            return [...properties, ...filteredProperties];
        }));
    }
    updateChanges(updatedNodeChanges) {
        Object.keys(updatedNodeChanges).map((propertyGroup) => {
            if (typeof updatedNodeChanges[propertyGroup] === 'object') {
                this.changedProperties[propertyGroup] = Object.assign(Object.assign({}, this.changedProperties[propertyGroup]), updatedNodeChanges[propertyGroup]);
            }
            else {
                this.changedProperties[propertyGroup] = updatedNodeChanges[propertyGroup];
            }
        });
    }
    saveChanges() {
        if (this.hasContentTypeChanged(this.changedProperties)) {
            this.contentMetadataService.openConfirmDialog(this.changedProperties).subscribe(() => {
                this.updateNode();
            });
        }
        else {
            this.updateNode();
        }
    }
    updateNode() {
        this.nodesApiService.updateNode(this.node.id, this.changedProperties).pipe(catchError((err) => {
            this.cardViewUpdateService.updateElement(this.targetProperty);
            this.handleUpdateError(err);
            return of(null);
        }))
            .subscribe((updatedNode) => {
            if (updatedNode) {
                if (this.hasContentTypeChanged(this.changedProperties)) {
                    this.cardViewUpdateService.updateNodeAspect(this.node);
                }
                this.revertChanges();
                Object.assign(this.node, updatedNode);
                this.alfrescoApiService.nodeUpdated.next(this.node);
            }
        });
    }
    hasContentTypeChanged(changedProperties) {
        return !!(changedProperties === null || changedProperties === void 0 ? void 0 : changedProperties.nodeType);
    }
    revertChanges() {
        this.changedProperties = {};
        this.hasMetadataChanged = false;
    }
    cancelChanges() {
        this.revertChanges();
        this.loadProperties(this.node);
    }
    showGroup(group) {
        const properties = group.properties.filter((property) => {
            return !this.isEmpty(property.displayValue);
        });
        return properties.length > 0;
    }
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
    canExpandTheCard(group) {
        return group.title === this.displayAspect;
    }
    canExpandProperties() {
        return !this.expanded || this.displayAspect === 'Properties';
    }
    keyDown(event) {
        if (event.keyCode === 37 || event.keyCode === 39) {
            event.stopPropagation();
        }
    }
    isEmpty(value) {
        return value === undefined || value === null || value === '';
    }
}
ContentMetadataComponent.ɵfac = function ContentMetadataComponent_Factory(t) { return new (t || ContentMetadataComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ContentMetadataService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.CardViewUpdateService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.NodesApiService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.LogService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.AlfrescoApiService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.TranslationService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.AppConfigService)); };
ContentMetadataComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ContentMetadataComponent, selectors: [["adf-content-metadata"]], hostAttrs: [1, "adf-content-metadata"], inputs: { editable: "editable", displayEmpty: "displayEmpty", expanded: "expanded", multi: "multi", displayDefaultProperties: "displayDefaultProperties", displayAspect: "displayAspect", copyToClipboardAction: "copyToClipboardAction", useChipsForMultiValueProperty: "useChipsForMultiValueProperty", node: "node", preset: "preset" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 5, vars: 4, consts: [[1, "adf-metadata-properties"], ["displayMode", "flat", 3, "multi"], [3, "expanded", 4, "ngIf"], [4, "ngIf"], ["class", "adf-metadata-action-buttons", 4, "ngIf"], [3, "expanded"], ["role", "heading"], [3, "properties", "editable", "displayEmpty", "copyToClipboardAction", "useChipsForMultiValueProperty", "multiValueSeparator", "keydown"], [4, "ngIf", "ngIfElse"], ["loading", ""], ["class", "adf-metadata-grouped-properties-container", 4, "ngFor", "ngForOf"], [1, "adf-metadata-grouped-properties-container"], ["mode", "indeterminate"], [1, "adf-metadata-action-buttons"], ["mat-button", "", "data-automation-id", "reset-metadata", 3, "disabled", "click"], ["mat-raised-button", "", "color", "primary", "data-automation-id", "save-metadata", 3, "disabled", "click"]], template: function ContentMetadataComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "mat-accordion", 1);
        ɵngcc0.ɵɵtemplate(2, ContentMetadataComponent_mat_expansion_panel_2_Template, 7, 13, "mat-expansion-panel", 2);
        ɵngcc0.ɵɵtemplate(3, ContentMetadataComponent_ng_container_3_Template, 5, 4, "ng-container", 3);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(4, ContentMetadataComponent_div_4_Template, 7, 8, "div", 4);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("multi", ctx.multi);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.displayDefaultProperties);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.expanded);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.editable);
    } }, directives: [ɵngcc3.MatAccordion, ɵngcc4.NgIf, ɵngcc3.MatExpansionPanel, ɵngcc3.MatExpansionPanelHeader, ɵngcc3.MatExpansionPanelTitle, ɵngcc2.CardViewComponent, ɵngcc4.NgForOf, ɵngcc5.MatProgressBar, ɵngcc6.MatButton], pipes: [ɵngcc7.TranslatePipe, ɵngcc4.AsyncPipe], encapsulation: 2 });
ContentMetadataComponent.DEFAULT_SEPARATOR = ', ';
ContentMetadataComponent.ctorParameters = () => [
    { type: ContentMetadataService },
    { type: CardViewUpdateService },
    { type: NodesApiService },
    { type: LogService },
    { type: AlfrescoApiService },
    { type: TranslationService },
    { type: AppConfigService }
];
ContentMetadataComponent.propDecorators = {
    node: [{ type: Input }],
    editable: [{ type: Input }],
    displayEmpty: [{ type: Input }],
    expanded: [{ type: Input }],
    multi: [{ type: Input }],
    preset: [{ type: Input }],
    displayDefaultProperties: [{ type: Input }],
    displayAspect: [{ type: Input }],
    copyToClipboardAction: [{ type: Input }],
    useChipsForMultiValueProperty: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ContentMetadataComponent, [{
        type: Component,
        args: [{
                selector: 'adf-content-metadata',
                template: "<div class=\"adf-metadata-properties\">\n    <mat-accordion displayMode=\"flat\"\n                   [multi]=\"multi\">\n        <mat-expansion-panel *ngIf=\"displayDefaultProperties\"\n                             [expanded]=\"canExpandProperties()\"\n                             [attr.data-automation-id]=\"'adf-metadata-group-properties'\">\n            <mat-expansion-panel-header>\n                <mat-panel-title role=\"heading\">\n                    {{ 'CORE.METADATA.BASIC.HEADER' | translate }}\n                </mat-panel-title>\n            </mat-expansion-panel-header>\n            <adf-card-view\n                (keydown)=\"keyDown($event)\"\n                [properties]=\"basicProperties$ | async\"\n                [editable]=\"editable\"\n                [displayEmpty]=\"displayEmpty\"\n                [copyToClipboardAction]=\"copyToClipboardAction\"\n                [useChipsForMultiValueProperty]=\"useChipsForMultiValueProperty\"\n                [multiValueSeparator]=\"multiValueSeparator\">\n            </adf-card-view>\n        </mat-expansion-panel>\n\n        <ng-container *ngIf=\"expanded\">\n            <ng-container *ngIf=\"groupedProperties$ | async; else loading; let groupedProperties\">\n                <div *ngFor=\"let group of groupedProperties; let first = first;\"\n                     class=\"adf-metadata-grouped-properties-container\">\n                    <mat-expansion-panel *ngIf=\"showGroup(group) || editable\"\n                                         [attr.data-automation-id]=\"'adf-metadata-group-' + group.title\"\n                                         [expanded]=\"canExpandTheCard(group) || !displayDefaultProperties && first\">\n                        <mat-expansion-panel-header>\n                            <mat-panel-title>\n                                {{ group.title | translate }}\n                            </mat-panel-title>\n                        </mat-expansion-panel-header>\n\n                        <adf-card-view\n                            (keydown)=\"keyDown($event)\"\n                            [properties]=\"group.properties\"\n                            [editable]=\"editable\"\n                            [displayEmpty]=\"displayEmpty\"\n                            [copyToClipboardAction]=\"copyToClipboardAction\"\n                            [useChipsForMultiValueProperty]=\"useChipsForMultiValueProperty\"\n                            [multiValueSeparator]=\"multiValueSeparator\">\n                        </adf-card-view>\n                    </mat-expansion-panel>\n\n                </div>\n            </ng-container>\n            <ng-template #loading>\n                <mat-progress-bar mode=\"indeterminate\"></mat-progress-bar>\n            </ng-template>\n        </ng-container>\n    </mat-accordion>\n\n    <div class=\"adf-metadata-action-buttons\"\n         *ngIf=\"editable\">\n        <button mat-button\n                (click)=\"cancelChanges()\"\n                data-automation-id=\"reset-metadata\"\n                [disabled]=\"!hasMetadataChanged\">\n                {{ 'CORE.METADATA.ACTIONS.CANCEL' | translate }}\n        </button>\n        <button mat-raised-button\n                (click)=\"saveChanges()\"\n                color=\"primary\"\n                data-automation-id=\"save-metadata\"\n                [disabled]=\"!hasMetadataChanged\">\n                {{ 'CORE.METADATA.ACTIONS.SAVE' | translate }}\n            </button>\n    </div>\n\n</div>\n",
                host: { 'class': 'adf-content-metadata' },
                encapsulation: ViewEncapsulation.None
            }]
    }], function () { return [{ type: ɵngcc1.ContentMetadataService }, { type: ɵngcc2.CardViewUpdateService }, { type: ɵngcc2.NodesApiService }, { type: ɵngcc2.LogService }, { type: ɵngcc2.AlfrescoApiService }, { type: ɵngcc2.TranslationService }, { type: ɵngcc2.AppConfigService }]; }, { editable: [{
            type: Input
        }], displayEmpty: [{
            type: Input
        }], expanded: [{
            type: Input
        }], multi: [{
            type: Input
        }], displayDefaultProperties: [{
            type: Input
        }], displayAspect: [{
            type: Input
        }], copyToClipboardAction: [{
            type: Input
        }], useChipsForMultiValueProperty: [{
            type: Input
        }], node: [{
            type: Input
        }], preset: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,