/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';
import { NodesApiService } from '@alfresco/adf-core';
import { Subject, zip } from 'rxjs';
import { concatMap, map, takeUntil, tap } from 'rxjs/operators';
import { AspectListService } from './aspect-list.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './aspect-list.service';
import * as ɵngcc2 from '@alfresco/adf-core';
import * as ɵngcc3 from '@angular/common';
import * as ɵngcc4 from '@angular/material/expansion';
import * as ɵngcc5 from '@angular/material/checkbox';
import * as ɵngcc6 from '@angular/material/tooltip';
import * as ɵngcc7 from '@angular/material/table';
import * as ɵngcc8 from '@angular/material/progress-spinner';
import * as ɵngcc9 from '@ngx-translate/core';

function AspectListComponent_div_0_mat_expansion_panel_2_table_10_th_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "th", 19);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, "ADF-ASPECT-LIST.PROPERTY_NAME"), " ");
} }
function AspectListComponent_div_0_mat_expansion_panel_2_table_10_td_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "td", 20);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const property_r16 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", property_r16.id, " ");
} }
function AspectListComponent_div_0_mat_expansion_panel_2_table_10_th_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "th", 19);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, "ADF-ASPECT-LIST.DESCRIPTION"), " ");
} }
function AspectListComponent_div_0_mat_expansion_panel_2_table_10_td_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "td", 20);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const property_r17 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", property_r17.title, " ");
} }
function AspectListComponent_div_0_mat_expansion_panel_2_table_10_th_8_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "th", 19);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, "ADF-ASPECT-LIST.DATA_TYPE"), " ");
} }
function AspectListComponent_div_0_mat_expansion_panel_2_table_10_td_9_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "td", 20);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const property_r18 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", property_r18.dataType, " ");
} }
function AspectListComponent_div_0_mat_expansion_panel_2_table_10_tr_10_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "tr", 21);
} }
function AspectListComponent_div_0_mat_expansion_panel_2_table_10_tr_11_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "tr", 22);
} }
function AspectListComponent_div_0_mat_expansion_panel_2_table_10_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "table", 11);
    ɵngcc0.ɵɵelementContainerStart(1, 12);
    ɵngcc0.ɵɵtemplate(2, AspectListComponent_div_0_mat_expansion_panel_2_table_10_th_2_Template, 3, 3, "th", 13);
    ɵngcc0.ɵɵtemplate(3, AspectListComponent_div_0_mat_expansion_panel_2_table_10_td_3_Template, 2, 1, "td", 14);
    ɵngcc0.ɵɵelementContainerEnd();
    ɵngcc0.ɵɵelementContainerStart(4, 15);
    ɵngcc0.ɵɵtemplate(5, AspectListComponent_div_0_mat_expansion_panel_2_table_10_th_5_Template, 3, 3, "th", 13);
    ɵngcc0.ɵɵtemplate(6, AspectListComponent_div_0_mat_expansion_panel_2_table_10_td_6_Template, 2, 1, "td", 14);
    ɵngcc0.ɵɵelementContainerEnd();
    ɵngcc0.ɵɵelementContainerStart(7, 16);
    ɵngcc0.ɵɵtemplate(8, AspectListComponent_div_0_mat_expansion_panel_2_table_10_th_8_Template, 3, 3, "th", 13);
    ɵngcc0.ɵɵtemplate(9, AspectListComponent_div_0_mat_expansion_panel_2_table_10_td_9_Template, 2, 1, "td", 14);
    ɵngcc0.ɵɵelementContainerEnd();
    ɵngcc0.ɵɵtemplate(10, AspectListComponent_div_0_mat_expansion_panel_2_table_10_tr_10_Template, 1, 0, "tr", 17);
    ɵngcc0.ɵɵtemplate(11, AspectListComponent_div_0_mat_expansion_panel_2_table_10_tr_11_Template, 1, 0, "tr", 18);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r20 = ɵngcc0.ɵɵnextContext();
    const aspect_r5 = ctx_r20.$implicit;
    const colIndex_r6 = ctx_r20.index;
    const ctx_r7 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("dataSource", aspect_r5 == null ? null : aspect_r5.entry == null ? null : aspect_r5.entry.properties)("id", "aspect-list-" + colIndex_r6 + "-properties-table");
    ɵngcc0.ɵɵadvance(10);
    ɵngcc0.ɵɵproperty("matHeaderRowDef", ctx_r7.propertyColumns);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("matRowDefColumns", ctx_r7.propertyColumns);
} }
function AspectListComponent_div_0_mat_expansion_panel_2_Template(rf, ctx) { if (rf & 1) {
    const _r22 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-expansion-panel", 5);
    ɵngcc0.ɵɵelementStart(1, "mat-expansion-panel-header", 5);
    ɵngcc0.ɵɵelementStart(2, "mat-panel-title");
    ɵngcc0.ɵɵelementStart(3, "mat-checkbox", 6);
    ɵngcc0.ɵɵlistener("click", function AspectListComponent_div_0_mat_expansion_panel_2_Template_mat_checkbox_click_3_listener($event) { ɵngcc0.ɵɵrestoreView(_r22); const ctx_r21 = ɵngcc0.ɵɵnextContext(2); return ctx_r21.onCheckBoxClick($event); })("change", function AspectListComponent_div_0_mat_expansion_panel_2_Template_mat_checkbox_change_3_listener($event) { ɵngcc0.ɵɵrestoreView(_r22); const aspect_r5 = ctx.$implicit; const ctx_r23 = ɵngcc0.ɵɵnextContext(2); return ctx_r23.onChange($event, aspect_r5 == null ? null : aspect_r5.entry == null ? null : aspect_r5.entry.id); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "p", 7);
    ɵngcc0.ɵɵtext(5);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(6, "mat-panel-description", 8);
    ɵngcc0.ɵɵtext(7);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(8, "p", 9);
    ɵngcc0.ɵɵtext(9);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(10, AspectListComponent_div_0_mat_expansion_panel_2_table_10_Template, 12, 4, "table", 10);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const aspect_r5 = ctx.$implicit;
    const colIndex_r6 = ctx.index;
    const ctx_r4 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("id", "aspect-list-" + ctx_r4.getId(aspect_r5));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("id", "aspect-list-" + ctx_r4.getId(aspect_r5) + "header");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("id", "aspect-list-" + colIndex_r6 + "-check")("checked", ctx_r4.nodeAspects == null ? null : ctx_r4.nodeAspects.includes(aspect_r5 == null ? null : aspect_r5.entry == null ? null : aspect_r5.entry.id));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ctx_r4.getTitle(aspect_r5));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("id", "aspect-list-" + colIndex_r6 + "-title")("matTooltip", ctx_r4.getTitle(aspect_r5));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r4.getTitle(aspect_r5), " ");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("id", "aspect-list-" + colIndex_r6 + "-description");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", aspect_r5 == null ? null : aspect_r5.entry == null ? null : aspect_r5.entry.description, "");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", (aspect_r5 == null ? null : aspect_r5.entry == null ? null : aspect_r5.entry.properties == null ? null : aspect_r5.entry.properties.length) > 0);
} }
function AspectListComponent_div_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 2);
    ɵngcc0.ɵɵelementStart(1, "mat-accordion", 3);
    ɵngcc0.ɵɵtemplate(2, AspectListComponent_div_0_mat_expansion_panel_2_Template, 11, 11, "mat-expansion-panel", 4);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const aspects_r3 = ctx.ngIf;
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngForOf", aspects_r3);
} }
function AspectListComponent_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 23);
    ɵngcc0.ɵɵelement(1, "mat-spinner", 24);
    ɵngcc0.ɵɵelementEnd();
} }
export class AspectListComponent {
    constructor(aspectListService, nodeApiService) {
        this.aspectListService = aspectListService;
        this.nodeApiService = nodeApiService;
        this.nodeId = '';
        this.valueChanged = new EventEmitter();
        this.propertyColumns = ['name', 'title', 'dataType'];
        this.aspects$ = null;
        this.nodeAspects = [];
        this.nodeAspectStatus = [];
        this.hasEqualAspect = true;
        this.onDestroy$ = new Subject();
    }
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
    ngOnInit() {
        if (this.nodeId) {
            const node$ = this.nodeApiService.getNode(this.nodeId);
            const customAspect$ = this.aspectListService.getCustomAspects()
                .pipe(map((customAspects) => customAspects.flatMap((customAspect) => customAspect.entry.id)));
            this.aspects$ = zip(node$, customAspect$).pipe(tap(([node, customAspects]) => {
                this.nodeAspects = node.aspectNames.filter((aspect) => this.aspectListService.getVisibleAspects().includes(aspect) || customAspects.includes(aspect));
                this.nodeAspectStatus = [...this.nodeAspects];
                this.valueChanged.emit(this.nodeAspects);
            }), concatMap(() => this.aspectListService.getAspects()), takeUntil(this.onDestroy$));
        }
        else {
            this.aspects$ = this.aspectListService.getAspects()
                .pipe(takeUntil(this.onDestroy$));
        }
    }
    onCheckBoxClick(event) {
        event.stopImmediatePropagation();
    }
    onChange(change, prefixedName) {
        if (change.checked) {
            this.nodeAspects.push(prefixedName);
        }
        else {
            this.nodeAspects.splice(this.nodeAspects.indexOf(prefixedName), 1);
        }
        this.updateEqualityOfAspectList();
        this.valueChanged.emit(this.nodeAspects);
    }
    reset() {
        if (this.nodeAspectStatus && this.nodeAspectStatus.length > 0) {
            this.nodeAspects.splice(0, this.nodeAspects.length, ...this.nodeAspectStatus);
            this.hasEqualAspect = true;
            this.valueChanged.emit(this.nodeAspects);
        }
        else {
            this.clear();
        }
    }
    clear() {
        this.nodeAspects = [];
        this.updateEqualityOfAspectList();
        this.valueChanged.emit(this.nodeAspects);
    }
    getId(aspect) {
        var _a, _b, _c;
        return ((_a = aspect === null || aspect === void 0 ? void 0 : aspect.entry) === null || _a === void 0 ? void 0 : _a.title) ? (_b = aspect === null || aspect === void 0 ? void 0 : aspect.entry) === null || _b === void 0 ? void 0 : _b.title : (_c = aspect === null || aspect === void 0 ? void 0 : aspect.entry) === null || _c === void 0 ? void 0 : _c.id.replace(':', '-');
    }
    getTitle(aspect) {
        var _a, _b, _c;
        return ((_a = aspect === null || aspect === void 0 ? void 0 : aspect.entry) === null || _a === void 0 ? void 0 : _a.title) ? (_b = aspect === null || aspect === void 0 ? void 0 : aspect.entry) === null || _b === void 0 ? void 0 : _b.title : (_c = aspect === null || aspect === void 0 ? void 0 : aspect.entry) === null || _c === void 0 ? void 0 : _c.id;
    }
    updateEqualityOfAspectList() {
        if (this.nodeAspectStatus.length !== this.nodeAspects.length) {
            this.hasEqualAspect = false;
        }
        else {
            this.hasEqualAspect = this.nodeAspects.every((aspect) => this.nodeAspectStatus.includes(aspect));
        }
    }
}
AspectListComponent.ɵfac = function AspectListComponent_Factory(t) { return new (t || AspectListComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.AspectListService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.NodesApiService)); };
AspectListComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: AspectListComponent, selectors: [["adf-aspect-list"]], inputs: { nodeId: "nodeId" }, outputs: { valueChanged: "valueChanged" }, decls: 4, vars: 4, consts: [["id", "aspect-list-container", "class", "adf-aspect-list-container", 4, "ngIf", "ngIfElse"], ["loading", ""], ["id", "aspect-list-container", 1, "adf-aspect-list-container"], [1, "adf-accordion-aspect-list"], [3, "id", 4, "ngFor", "ngForOf"], [3, "id"], [1, "adf-aspect-list-check-button", 3, "id", "checked", "click", "change"], [1, "adf-aspect-list-element-title"], [3, "id", "matTooltip"], [1, "adf-property-paragraph", 3, "id"], ["mat-table", "", "class", "adf-aspect-property-table", 3, "dataSource", "id", 4, "ngIf"], ["mat-table", "", 1, "adf-aspect-property-table", 3, "dataSource", "id"], ["matColumnDef", "name"], ["mat-header-cell", "", 4, "matHeaderCellDef"], ["mat-cell", "", 4, "matCellDef"], ["matColumnDef", "title"], ["matColumnDef", "dataType"], ["mat-header-row", "", 4, "matHeaderRowDef"], ["mat-row", "", 4, "matRowDef", "matRowDefColumns"], ["mat-header-cell", ""], ["mat-cell", ""], ["mat-header-row", ""], ["mat-row", ""], [1, "adf-aspect-list-spinner"], ["id", "adf-aspect-spinner"]], template: function AspectListComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, AspectListComponent_div_0_Template, 3, 1, "div", 0);
        ɵngcc0.ɵɵpipe(1, "async");
        ɵngcc0.ɵɵtemplate(2, AspectListComponent_ng_template_2_Template, 2, 0, "ng-template", null, 1, ɵngcc0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        const _r1 = ɵngcc0.ɵɵreference(3);
        ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind1(1, 2, ctx.aspects$))("ngIfElse", _r1);
    } }, directives: [ɵngcc3.NgIf, ɵngcc4.MatAccordion, ɵngcc3.NgForOf, ɵngcc4.MatExpansionPanel, ɵngcc4.MatExpansionPanelHeader, ɵngcc4.MatExpansionPanelTitle, ɵngcc5.MatCheckbox, ɵngcc4.MatExpansionPanelDescription, ɵngcc6.MatTooltip, ɵngcc7.MatTable, ɵngcc7.MatColumnDef, ɵngcc7.MatHeaderCellDef, ɵngcc7.MatCellDef, ɵngcc7.MatHeaderRowDef, ɵngcc7.MatRowDef, ɵngcc7.MatHeaderCell, ɵngcc7.MatCell, ɵngcc7.MatHeaderRow, ɵngcc7.MatRow, ɵngcc8.MatSpinner], pipes: [ɵngcc3.AsyncPipe, ɵngcc9.TranslatePipe], encapsulation: 2 });
AspectListComponent.ctorParameters = () => [
    { type: AspectListService },
    { type: NodesApiService }
];
AspectListComponent.propDecorators = {
    nodeId: [{ type: Input }],
    valueChanged: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AspectListComponent, [{
        type: Component,
        args: [{
                selector: 'adf-aspect-list',
                template: "<div id=\"aspect-list-container\" class=\"adf-aspect-list-container\" *ngIf=\"aspects$ | async as aspects; else loading\">\n    <mat-accordion class=\"adf-accordion-aspect-list\">\n        <mat-expansion-panel *ngFor=\"let aspect of aspects; let colIndex = index\" [id]=\"'aspect-list-'+getId(aspect)\">\n            <mat-expansion-panel-header [id]=\"'aspect-list-'+(getId(aspect))+'header'\">\n                <mat-panel-title>\n                    <mat-checkbox class=\"adf-aspect-list-check-button\" [id]=\"'aspect-list-'+colIndex+'-check'\"\n                                  [checked]=\"nodeAspects?.includes(aspect?.entry?.id)\"\n                                  (click)=\"onCheckBoxClick($event)\"\n                                  (change)=\"onChange($event, aspect?.entry?.id)\">\n                    </mat-checkbox>\n                    <p class=\"adf-aspect-list-element-title\">{{getTitle(aspect)}}</p>\n                </mat-panel-title>\n                <mat-panel-description [id]=\"'aspect-list-'+colIndex+'-title'\"\n                                        [matTooltip]=\"getTitle(aspect)\">\n                    {{getTitle(aspect)}}\n                </mat-panel-description>\n            </mat-expansion-panel-header>\n            <p class=\"adf-property-paragraph\" [id]=\"'aspect-list-'+colIndex+'-description'\"> {{aspect?.entry?.description}}</p>\n\n            <table mat-table [dataSource]=\"aspect?.entry?.properties\" *ngIf=\"aspect?.entry?.properties?.length > 0\" class=\"adf-aspect-property-table\" [id]=\"'aspect-list-'+colIndex+'-properties-table'\">\n                <ng-container matColumnDef=\"name\">\n                  <th mat-header-cell *matHeaderCellDef> {{'ADF-ASPECT-LIST.PROPERTY_NAME' | translate}} </th>\n                  <td mat-cell *matCellDef=\"let property\"> {{property.id}} </td>\n                </ng-container>\n                <ng-container matColumnDef=\"title\">\n                  <th mat-header-cell *matHeaderCellDef> {{'ADF-ASPECT-LIST.DESCRIPTION' | translate}} </th>\n                  <td mat-cell *matCellDef=\"let property\"> {{property.title}} </td>\n                </ng-container>\n                <ng-container matColumnDef=\"dataType\">\n                  <th mat-header-cell *matHeaderCellDef> {{'ADF-ASPECT-LIST.DATA_TYPE' | translate}} </th>\n                  <td mat-cell *matCellDef=\"let property\"> {{property.dataType}} </td>\n                </ng-container>\n                <tr mat-header-row *matHeaderRowDef=\"propertyColumns\"></tr>\n                <tr mat-row *matRowDef=\"let row; columns: propertyColumns;\"></tr>\n              </table>\n        </mat-expansion-panel>\n    </mat-accordion>\n</div>\n\n<ng-template #loading>\n    <div class=\"adf-aspect-list-spinner\">\n       <mat-spinner id=\"adf-aspect-spinner\"></mat-spinner>\n    </div>\n</ng-template>\n",
                encapsulation: ViewEncapsulation.None
            }]
    }], function () { return [{ type: ɵngcc1.AspectListService }, { type: ɵngcc2.NodesApiService }]; }, { nodeId: [{
            type: Input
        }], valueChanged: [{
            type: Output
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNwZWN0LWxpc3QuY29tcG9uZW50LmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9ob21lL3RyYXZpcy9idWlsZC9BbGZyZXNjby9hbGZyZXNjby1uZzItY29tcG9uZW50cy9saWIvY29udGVudC1zZXJ2aWNlcy9zcmMvbGliL2FzcGVjdC1saXN0L2FzcGVjdC1saXN0LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBRUgsT0FBTyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFxQixNQUFNLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDN0csT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3JELE9BQU8sRUFBYyxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ2hELE9BQU8sRUFBRSxTQUFTLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNoRSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBUzFELE1BQU0sT0FBTyxtQkFBbUI7QUFBRyxJQWtCL0IsWUFBb0IsaUJBQW9DLEVBQVUsY0FBK0I7QUFDckcsUUFEd0Isc0JBQWlCLEdBQWpCLGlCQUFpQixDQUFtQjtBQUFDLFFBQVMsbUJBQWMsR0FBZCxjQUFjLENBQWlCO0FB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QUFFLGlCQUFpQixDQUFDLElBQUksY0FDeEM7Ozs7Ozs7b0JBVUU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IENvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT25EZXN0cm95LCBPbkluaXQsIE91dHB1dCwgVmlld0VuY2Fwc3VsYXRpb24gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5vZGVzQXBpU2VydmljZSB9IGZyb20gJ0BhbGZyZXNjby9hZGYtY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBTdWJqZWN0LCB6aXAgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGNvbmNhdE1hcCwgbWFwLCB0YWtlVW50aWwsIHRhcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IEFzcGVjdExpc3RTZXJ2aWNlIH0gZnJvbSAnLi9hc3BlY3QtbGlzdC5zZXJ2aWNlJztcbmltcG9ydCB7IE1hdENoZWNrYm94Q2hhbmdlIH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwvY2hlY2tib3gnO1xuaW1wb3J0IHsgQXNwZWN0RW50cnkgfSBmcm9tICdAYWxmcmVzY28vanMtYXBpJztcbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnYWRmLWFzcGVjdC1saXN0JyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vYXNwZWN0LWxpc3QuY29tcG9uZW50Lmh0bWwnLFxuICAgIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmVcbn0pXG5cbmV4cG9ydCBjbGFzcyBBc3BlY3RMaXN0Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuXG4gICAgLyoqIE5vZGUgSWQgb2YgdGhlIG5vZGUgdGhhdCB3ZSB3YW50IHRvIHVwZGF0ZSAqL1xuICAgIEBJbnB1dCgpXG4gICAgbm9kZUlkOiBzdHJpbmcgPSAnJztcblxuICAgIC8qKiBFbWl0dGVkIGV2ZXJ5IHRpbWUgdGhlIHVzZXIgc2VsZWN0IGEgbmV3IGFzcGVjdCAqL1xuICAgIEBPdXRwdXQoKVxuICAgIHZhbHVlQ2hhbmdlZDogRXZlbnRFbWl0dGVyPHN0cmluZ1tdPiA9IG5ldyBFdmVudEVtaXR0ZXI8c3RyaW5nW10+KCk7XG5cbiAgICBwcm9wZXJ0eUNvbHVtbnM6IHN0cmluZ1tdID0gWyduYW1lJywgJ3RpdGxlJywgJ2RhdGFUeXBlJ107XG4gICAgYXNwZWN0cyQ6IE9ic2VydmFibGU8QXNwZWN0RW50cnlbXT4gPSBudWxsO1xuICAgIG5vZGVBc3BlY3RzOiBzdHJpbmdbXSA9IFtdO1xuICAgIG5vZGVBc3BlY3RTdGF0dXM6IHN0cmluZ1tdID0gW107XG4gICAgaGFzRXF1YWxBc3BlY3Q6IGJvb2xlYW4gPSB0cnVlO1xuXG4gICAgcHJpdmF0ZSBvbkRlc3Ryb3kkID0gbmV3IFN1YmplY3Q8Ym9vbGVhbj4oKTtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgYXNwZWN0TGlzdFNlcnZpY2U6IEFzcGVjdExpc3RTZXJ2aWNlLCBwcml2YXRlIG5vZGVBcGlTZXJ2aWNlOiBOb2Rlc0FwaVNlcnZpY2UpIHtcbiAgICB9XG5cbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5vbkRlc3Ryb3kkLm5leHQodHJ1ZSk7XG4gICAgICAgIHRoaXMub25EZXN0cm95JC5jb21wbGV0ZSgpO1xuICAgIH1cblxuICAgIG5nT25Jbml0KCk6IHZvaWQge1xuICAgICAgICBpZiAodGhpcy5ub2RlSWQpIHtcbiAgICAgICAgICAgIGNvbnN0IG5vZGUkID0gdGhpcy5ub2RlQXBpU2VydmljZS5nZXROb2RlKHRoaXMubm9kZUlkKTtcbiAgICAgICAgICAgIGNvbnN0IGN1c3RvbUFzcGVjdCQgPSB0aGlzLmFzcGVjdExpc3RTZXJ2aWNlLmdldEN1c3RvbUFzcGVjdHMoKVxuICAgICAgICAgICAgLnBpcGUobWFwKFxuICAgICAgICAgICAgICAgIChjdXN0b21Bc3BlY3RzKSA9PiBjdXN0b21Bc3BlY3RzLmZsYXRNYXAoKGN1c3RvbUFzcGVjdCkgPT4gY3VzdG9tQXNwZWN0LmVudHJ5LmlkKVxuICAgICAgICAgICAgKSk7XG4gICAgICAgICAgICB0aGlzLmFzcGVjdHMkID0gemlwKG5vZGUkLCBjdXN0b21Bc3BlY3QkKS5waXBlKFxuICAgICAgICAgICAgICAgIHRhcCgoW25vZGUsIGN1c3RvbUFzcGVjdHNdKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubm9kZUFzcGVjdHMgPSBub2RlLmFzcGVjdE5hbWVzLmZpbHRlcigoYXNwZWN0KSA9PiB0aGlzLmFzcGVjdExpc3RTZXJ2aWNlLmdldFZpc2libGVBc3BlY3RzKCkuaW5jbHVkZXMoYXNwZWN0KSB8fCBjdXN0b21Bc3BlY3RzLmluY2x1ZGVzKGFzcGVjdCkpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm5vZGVBc3BlY3RTdGF0dXMgPSBbIC4uLnRoaXMubm9kZUFzcGVjdHMgXTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy52YWx1ZUNoYW5nZWQuZW1pdCh0aGlzLm5vZGVBc3BlY3RzKTtcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICBjb25jYXRNYXAoKCkgPT4gdGhpcy5hc3BlY3RMaXN0U2VydmljZS5nZXRBc3BlY3RzKCkpLFxuICAgICAgICAgICAgICAgIHRha2VVbnRpbCh0aGlzLm9uRGVzdHJveSQpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuYXNwZWN0cyQgPSB0aGlzLmFzcGVjdExpc3RTZXJ2aWNlLmdldEFzcGVjdHMoKVxuICAgICAgICAgICAgICAgIC5waXBlKHRha2VVbnRpbCh0aGlzLm9uRGVzdHJveSQpKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG9uQ2hlY2tCb3hDbGljayhldmVudDogRXZlbnQpIHtcbiAgICAgICAgZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgfVxuXG4gICAgb25DaGFuZ2UoY2hhbmdlOiBNYXRDaGVja2JveENoYW5nZSwgcHJlZml4ZWROYW1lOiBzdHJpbmcpIHtcbiAgICAgICAgaWYgKGNoYW5nZS5jaGVja2VkKSB7XG4gICAgICAgICAgICB0aGlzLm5vZGVBc3BlY3RzLnB1c2gocHJlZml4ZWROYW1lKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMubm9kZUFzcGVjdHMuc3BsaWNlKHRoaXMubm9kZUFzcGVjdHMuaW5kZXhPZihwcmVmaXhlZE5hbWUpLCAxKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnVwZGF0ZUVxdWFsaXR5T2ZBc3BlY3RMaXN0KCk7XG4gICAgICAgIHRoaXMudmFsdWVDaGFuZ2VkLmVtaXQodGhpcy5ub2RlQXNwZWN0cyk7XG4gICAgfVxuXG4gICAgcmVzZXQoKSB7XG4gICAgICAgIGlmICh0aGlzLm5vZGVBc3BlY3RTdGF0dXMgJiYgdGhpcy5ub2RlQXNwZWN0U3RhdHVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHRoaXMubm9kZUFzcGVjdHMuc3BsaWNlKDAsIHRoaXMubm9kZUFzcGVjdHMubGVuZ3RoLCAuLi50aGlzLm5vZGVBc3BlY3RTdGF0dXMpO1xuICAgICAgICAgICAgdGhpcy5oYXNFcXVhbEFzcGVjdCA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLnZhbHVlQ2hhbmdlZC5lbWl0KHRoaXMubm9kZUFzcGVjdHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5jbGVhcigpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY2xlYXIoKSB7XG4gICAgICAgIHRoaXMubm9kZUFzcGVjdHMgPSBbXTtcbiAgICAgICAgdGhpcy51cGRhdGVFcXVhbGl0eU9mQXNwZWN0TGlzdCgpO1xuICAgICAgICB0aGlzLnZhbHVlQ2hhbmdlZC5lbWl0KHRoaXMubm9kZUFzcGVjdHMpO1xuICAgIH1cblxuICAgIGdldElkKGFzcGVjdDogYW55KTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIGFzcGVjdD8uZW50cnk/LnRpdGxlID8gYXNwZWN0Py5lbnRyeT8udGl0bGUgOiBhc3BlY3Q/LmVudHJ5Py5pZC5yZXBsYWNlKCc6JywgJy0nKTtcbiAgICB9XG5cbiAgICBnZXRUaXRsZShhc3BlY3Q6IGFueSk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBhc3BlY3Q/LmVudHJ5Py50aXRsZSA/IGFzcGVjdD8uZW50cnk/LnRpdGxlIDogYXNwZWN0Py5lbnRyeT8uaWQ7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSB1cGRhdGVFcXVhbGl0eU9mQXNwZWN0TGlzdCgpIHtcbiAgICAgICAgaWYgKHRoaXMubm9kZUFzcGVjdFN0YXR1cy5sZW5ndGggIT09IHRoaXMubm9kZUFzcGVjdHMubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aGlzLmhhc0VxdWFsQXNwZWN0ID0gIGZhbHNlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5oYXNFcXVhbEFzcGVjdCA9IHRoaXMubm9kZUFzcGVjdHMuZXZlcnkoKGFzcGVjdCkgPT4gdGhpcy5ub2RlQXNwZWN0U3RhdHVzLmluY2x1ZGVzKGFzcGVjdCkpO1xuICAgICAgICB9XG4gICAgfVxufVxuIl19