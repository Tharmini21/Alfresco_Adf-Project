import { Injectable } from '@angular/core';
import { MatDialog } from '@angular/material/dialog';
import { AlfrescoApiService, AppConfigService, LogService } from '@alfresco/adf-core';
import { from, of, Subject, zip } from 'rxjs';
import { AspectListDialogComponent } from './aspect-list-dialog.component';
import { catchError, map } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@alfresco/adf-core";
import * as i2 from "@angular/material/dialog";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@alfresco/adf-core';
import * as ɵngcc2 from '@angular/material/dialog';
export class AspectListService {
    constructor(alfrescoApiService, appConfigService, dialog, logService) {
        this.alfrescoApiService = alfrescoApiService;
        this.appConfigService = appConfigService;
        this.dialog = dialog;
        this.logService = logService;
    }
    getAspects() {
        const visibleAspectList = this.getVisibleAspects();
        const standardAspects$ = this.getStandardAspects(visibleAspectList);
        const customAspects$ = this.getCustomAspects();
        return zip(standardAspects$, customAspects$).pipe(map(([standardAspectList, customAspectList]) => [...standardAspectList, ...customAspectList]));
    }
    getStandardAspects(whiteList) {
        const where = `(modelId in ('cm:contentmodel', 'emailserver:emailserverModel', 'smf:smartFolder', 'app:applicationmodel' ))`;
        const opts = {
            where,
            include: ['properties']
        };
        return from(this.alfrescoApiService.aspectsApi.listAspects(opts))
            .pipe(map((result) => { var _a; return this.filterAspectByConfig(whiteList, (_a = result === null || result === void 0 ? void 0 : result.list) === null || _a === void 0 ? void 0 : _a.entries); }), catchError((error) => {
            this.logService.error(error);
            return of([]);
        }));
    }
    getCustomAspects() {
        const where = `(not namespaceUri matches('http://www.alfresco.*'))`;
        const opts = {
            where,
            include: ['properties']
        };
        return from(this.alfrescoApiService.aspectsApi.listAspects(opts))
            .pipe(map((result) => { var _a; return (_a = result === null || result === void 0 ? void 0 : result.list) === null || _a === void 0 ? void 0 : _a.entries; }), catchError((error) => {
            this.logService.error(error);
            return of([]);
        }));
    }
    filterAspectByConfig(visibleAspectList, aspectEntries) {
        let result = aspectEntries ? aspectEntries : [];
        if ((visibleAspectList === null || visibleAspectList === void 0 ? void 0 : visibleAspectList.length) > 0 && aspectEntries) {
            result = aspectEntries.filter((value) => {
                var _a;
                return visibleAspectList.includes((_a = value === null || value === void 0 ? void 0 : value.entry) === null || _a === void 0 ? void 0 : _a.id);
            });
        }
        return result;
    }
    getVisibleAspects() {
        let visibleAspectList = [];
        const aspectVisibleConfig = this.appConfigService.get('aspect-visible');
        if (aspectVisibleConfig) {
            for (const aspectGroup of Object.keys(aspectVisibleConfig)) {
                visibleAspectList = visibleAspectList.concat(aspectVisibleConfig[aspectGroup]);
            }
        }
        return visibleAspectList;
    }
    openAspectListDialog(nodeId) {
        const select = new Subject();
        select.subscribe({
            complete: this.close.bind(this)
        });
        const data = {
            title: 'ADF-ASPECT-LIST.DIALOG.TITLE',
            description: 'ADF-ASPECT-LIST.DIALOG.DESCRIPTION',
            overTableMessage: 'ADF-ASPECT-LIST.DIALOG.OVER-TABLE-MESSAGE',
            select,
            nodeId
        };
        this.openDialog(data, 'adf-aspect-list-dialog', '750px');
        return select;
    }
    openDialog(data, panelClass, width) {
        this.dialog.open(AspectListDialogComponent, {
            data,
            panelClass,
            width,
            disableClose: true
        });
    }
    close() {
        this.dialog.closeAll();
    }
}
AspectListService.ɵfac = function AspectListService_Factory(t) { return new (t || AspectListService)(ɵngcc0.ɵɵinject(ɵngcc1.AlfrescoApiService), ɵngcc0.ɵɵinject(ɵngcc1.AppConfigService), ɵngcc0.ɵɵinject(ɵngcc2.MatDialog), ɵngcc0.ɵɵinject(ɵngcc1.LogService)); };
AspectListService.ɵprov = i0.ɵɵdefineInjectable({ factory: function AspectListService_Factory() { return new AspectListService(i0.ɵɵinject(i1.AlfrescoApiService), i0.ɵɵinject(i1.AppConfigService), i0.ɵɵinject(i2.MatDialog), i0.ɵɵinject(i1.LogService)); }, token: AspectListService, providedIn: "root" });
AspectListService.ctorParameters = () => [
    { type: AlfrescoApiService },
    { type: AppConfigService },
    { type: MatDialog },
    { type: LogService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AspectListService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.AlfrescoApiService }, { type: ɵngcc1.AppConfigService }, { type: ɵngcc2.MatDialog }, { type: ɵngcc1.LogService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNwZWN0LWxpc3Quc2VydmljZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vaG9tZS90cmF2aXMvYnVpbGQvQWxmcmVzY28vYWxmcmVzY28tbmcyLWNvbXBvbmVudHMvbGliL2NvbnRlbnQtc2VydmljZXMvc3JjL2xpYi9hc3BlY3QtbGlzdC9hc3BlY3QtbGlzdC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWlCQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUNyRCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsZ0JBQWdCLEVBQUUsVUFBVSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDdEYsT0FBTyxFQUFFLElBQUksRUFBYyxFQUFFLEVBQUUsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUUxRCxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUMzRSxPQUFPLEVBQUUsVUFBVSxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ2pEO0FBQXFDO0FBR25DOzs7O0FBRUYsTUFBTSxPQUFPLGlCQUFpQjtBQUM5QixJQUNJLFlBQW9CLGtCQUFzQyxFQUN0QyxnQkFBa0MsRUFDbEMsTUFBaUIsRUFDakIsVUFBc0I7QUFDOUMsUUFKd0IsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUFvQjtBQUFDLFFBQ3ZDLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7QUFBQyxRQUNuQyxXQUFNLEdBQU4sTUFBTSxDQUFXO0FBQUMsUUFDbEIsZUFBVSxHQUFWLFVBQVUsQ0FBWTtBQUFDLElBQzNDLENBQUM7QUFDTCxJQUNJLFVBQVU7QUFBSyxRQUNYLE1BQU0saUJBQWlCLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUM7QUFDM0QsUUFBUSxNQUFNLGdCQUFnQixHQUFH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RSxVQUFrQixFQUFFLEtBQWE7QUFDN0YsUUFBUSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyx5QkFBeUIsRUFBRTtBQUNwRCxZQUFZLElBQUk7QUFDaEIsWUFBWSxVQUFVO0FBQ3RCLFlBQVksS0FBSztBQUNqQixZQUFZLFlBQVksRUFBRSxJQUFJO0FBQzlCLFNBQVMsQ0FBQyxDQUFDO0FBQ1gsSUFBSSxDQUFDO0FBQ0wsSUFDSSxLQUFLO0FBQ1QsUUFBUSxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDO0FBQy9CLElBQUksQ0FBQztBQUNMO3FRQUFDO0FBQ0QsZ1RBckdLO0FBQUM7RUFITCxVQUFVLFNBQUMsckJBS0csWUFaTixrQkFBa0I7S0FRdkIsVUFBVSxFQUFFLE1BQU0sdkJBUlMsWUFBRixnQkFBZ0I7S0FTNUMsTEFUZ0QsWUFEeEMsU0FBUztBQUFJLFlBQ3lCLFVBQVU7QUFBRzs7Ozs7OytLQUFFO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBNYXREaWFsb2cgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9kaWFsb2cnO1xuaW1wb3J0IHsgQWxmcmVzY29BcGlTZXJ2aWNlLCBBcHBDb25maWdTZXJ2aWNlLCBMb2dTZXJ2aWNlIH0gZnJvbSAnQGFsZnJlc2NvL2FkZi1jb3JlJztcbmltcG9ydCB7IGZyb20sIE9ic2VydmFibGUsIG9mLCBTdWJqZWN0LCB6aXAgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IEFzcGVjdExpc3REaWFsb2dDb21wb25lbnREYXRhIH0gZnJvbSAnLi9hc3BlY3QtbGlzdC1kaWFsb2ctZGF0YS5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgQXNwZWN0TGlzdERpYWxvZ0NvbXBvbmVudCB9IGZyb20gJy4vYXNwZWN0LWxpc3QtZGlhbG9nLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBjYXRjaEVycm9yLCBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBBc3BlY3RFbnRyeSwgQXNwZWN0UGFnaW5nIH0gZnJvbSAnQGFsZnJlc2NvL2pzLWFwaSc7XG5cbkBJbmplY3RhYmxlKHtcbiAgICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgQXNwZWN0TGlzdFNlcnZpY2Uge1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBhbGZyZXNjb0FwaVNlcnZpY2U6IEFsZnJlc2NvQXBpU2VydmljZSxcbiAgICAgICAgICAgICAgICBwcml2YXRlIGFwcENvbmZpZ1NlcnZpY2U6IEFwcENvbmZpZ1NlcnZpY2UsXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSBkaWFsb2c6IE1hdERpYWxvZyxcbiAgICAgICAgICAgICAgICBwcml2YXRlIGxvZ1NlcnZpY2U6IExvZ1NlcnZpY2UpIHtcbiAgICB9XG5cbiAgICBnZXRBc3BlY3RzKCk6IE9ic2VydmFibGU8QXNwZWN0RW50cnlbXT4ge1xuICAgICAgICBjb25zdCB2aXNpYmxlQXNwZWN0TGlzdCA9IHRoaXMuZ2V0VmlzaWJsZUFzcGVjdHMoKTtcbiAgICAgICAgY29uc3Qgc3RhbmRhcmRBc3BlY3RzJCA9IHRoaXMuZ2V0U3RhbmRhcmRBc3BlY3RzKHZpc2libGVBc3BlY3RMaXN0KTtcbiAgICAgICAgY29uc3QgY3VzdG9tQXNwZWN0cyQgPSB0aGlzLmdldEN1c3RvbUFzcGVjdHMoKTtcbiAgICAgICAgcmV0dXJuIHppcChzdGFuZGFyZEFzcGVjdHMkLCBjdXN0b21Bc3BlY3RzJCkucGlwZShcbiAgICAgICAgICAgIG1hcCgoW3N0YW5kYXJkQXNwZWN0TGlzdCwgY3VzdG9tQXNwZWN0TGlzdF0pID0+IFsuLi5zdGFuZGFyZEFzcGVjdExpc3QsIC4uLmN1c3RvbUFzcGVjdExpc3RdKVxuICAgICAgICApO1xuICAgIH1cblxuICAgIGdldFN0YW5kYXJkQXNwZWN0cyh3aGl0ZUxpc3Q6IHN0cmluZ1tdKTogT2JzZXJ2YWJsZTxBc3BlY3RFbnRyeVtdPiB7XG4gICAgICAgIGNvbnN0IHdoZXJlID0gYChtb2RlbElkIGluICgnY206Y29udGVudG1vZGVsJywgJ2VtYWlsc2VydmVyOmVtYWlsc2VydmVyTW9kZWwnLCAnc21mOnNtYXJ0Rm9sZGVyJywgJ2FwcDphcHBsaWNhdGlvbm1vZGVsJyApKWA7XG4gICAgICAgIGNvbnN0IG9wdHM6IGFueSA9IHtcbiAgICAgICAgICAgIHdoZXJlLFxuICAgICAgICAgICAgaW5jbHVkZTogWydwcm9wZXJ0aWVzJ11cbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIGZyb20odGhpcy5hbGZyZXNjb0FwaVNlcnZpY2UuYXNwZWN0c0FwaS5saXN0QXNwZWN0cyhvcHRzKSlcbiAgICAgICAgICAgIC5waXBlKFxuICAgICAgICAgICAgICAgIG1hcCgocmVzdWx0OiBBc3BlY3RQYWdpbmcpID0+IHRoaXMuZmlsdGVyQXNwZWN0QnlDb25maWcod2hpdGVMaXN0LCByZXN1bHQ/Lmxpc3Q/LmVudHJpZXMpKSxcbiAgICAgICAgICAgICAgICBjYXRjaEVycm9yKChlcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ1NlcnZpY2UuZXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gb2YoW10pO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApO1xuICAgIH1cblxuICAgIGdldEN1c3RvbUFzcGVjdHMoKTogT2JzZXJ2YWJsZTxBc3BlY3RFbnRyeVtdPiB7XG4gICAgICAgIGNvbnN0IHdoZXJlID0gYChub3QgbmFtZXNwYWNlVXJpIG1hdGNoZXMoJ2h0dHA6Ly93d3cuYWxmcmVzY28uKicpKWA7XG4gICAgICAgIGNvbnN0IG9wdHM6IGFueSA9IHtcbiAgICAgICAgICAgIHdoZXJlLFxuICAgICAgICAgICAgaW5jbHVkZTogWydwcm9wZXJ0aWVzJ11cbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIGZyb20odGhpcy5hbGZyZXNjb0FwaVNlcnZpY2UuYXNwZWN0c0FwaS5saXN0QXNwZWN0cyhvcHRzKSlcbiAgICAgICAgICAgIC5waXBlKFxuICAgICAgICAgICAgICAgIG1hcCgocmVzdWx0OiBBc3BlY3RQYWdpbmcpID0+IHJlc3VsdD8ubGlzdD8uZW50cmllcyksXG4gICAgICAgICAgICAgICAgY2F0Y2hFcnJvcigoZXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dTZXJ2aWNlLmVycm9yKGVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9mKFtdKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGZpbHRlckFzcGVjdEJ5Q29uZmlnKHZpc2libGVBc3BlY3RMaXN0OiBzdHJpbmdbXSwgYXNwZWN0RW50cmllczogQXNwZWN0RW50cnlbXSk6IEFzcGVjdEVudHJ5W10ge1xuICAgICAgICBsZXQgcmVzdWx0ID0gYXNwZWN0RW50cmllcyA/IGFzcGVjdEVudHJpZXMgOiBbXTtcbiAgICAgICAgaWYgKHZpc2libGVBc3BlY3RMaXN0Py5sZW5ndGggPiAwICYmIGFzcGVjdEVudHJpZXMpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IGFzcGVjdEVudHJpZXMuZmlsdGVyKCh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiB2aXNpYmxlQXNwZWN0TGlzdC5pbmNsdWRlcyh2YWx1ZT8uZW50cnk/LmlkKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgZ2V0VmlzaWJsZUFzcGVjdHMoKTogc3RyaW5nW10ge1xuICAgICAgICBsZXQgdmlzaWJsZUFzcGVjdExpc3Q6IHN0cmluZ1tdID0gW107XG4gICAgICAgIGNvbnN0IGFzcGVjdFZpc2libGVDb25maWcgPSB0aGlzLmFwcENvbmZpZ1NlcnZpY2UuZ2V0KCdhc3BlY3QtdmlzaWJsZScpO1xuICAgICAgICBpZiAoYXNwZWN0VmlzaWJsZUNvbmZpZykge1xuICAgICAgICAgICAgZm9yIChjb25zdCBhc3BlY3RHcm91cCBvZiBPYmplY3Qua2V5cyhhc3BlY3RWaXNpYmxlQ29uZmlnKSkge1xuICAgICAgICAgICAgICAgIHZpc2libGVBc3BlY3RMaXN0ID0gdmlzaWJsZUFzcGVjdExpc3QuY29uY2F0KGFzcGVjdFZpc2libGVDb25maWdbYXNwZWN0R3JvdXBdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmlzaWJsZUFzcGVjdExpc3Q7XG4gICAgfVxuXG4gICAgb3BlbkFzcGVjdExpc3REaWFsb2cobm9kZUlkPzogc3RyaW5nKTogT2JzZXJ2YWJsZTxzdHJpbmdbXT4ge1xuICAgICAgICBjb25zdCBzZWxlY3QgPSBuZXcgU3ViamVjdDxzdHJpbmdbXT4oKTtcbiAgICAgICAgc2VsZWN0LnN1YnNjcmliZSh7XG4gICAgICAgICAgICBjb21wbGV0ZTogdGhpcy5jbG9zZS5iaW5kKHRoaXMpXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IGRhdGE6IEFzcGVjdExpc3REaWFsb2dDb21wb25lbnREYXRhID0ge1xuICAgICAgICAgICAgdGl0bGU6ICdBREYtQVNQRUNULUxJU1QuRElBTE9HLlRJVExFJyxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnQURGLUFTUEVDVC1MSVNULkRJQUxPRy5ERVNDUklQVElPTicsXG4gICAgICAgICAgICBvdmVyVGFibGVNZXNzYWdlOiAnQURGLUFTUEVDVC1MSVNULkRJQUxPRy5PVkVSLVRBQkxFLU1FU1NBR0UnLFxuICAgICAgICAgICAgc2VsZWN0LFxuICAgICAgICAgICAgbm9kZUlkXG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5vcGVuRGlhbG9nKGRhdGEsICdhZGYtYXNwZWN0LWxpc3QtZGlhbG9nJywgJzc1MHB4Jyk7XG4gICAgICAgIHJldHVybiBzZWxlY3Q7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBvcGVuRGlhbG9nKGRhdGE6IEFzcGVjdExpc3REaWFsb2dDb21wb25lbnREYXRhLCBwYW5lbENsYXNzOiBzdHJpbmcsIHdpZHRoOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5kaWFsb2cub3BlbihBc3BlY3RMaXN0RGlhbG9nQ29tcG9uZW50LCB7XG4gICAgICAgICAgICBkYXRhLFxuICAgICAgICAgICAgcGFuZWxDbGFzcyxcbiAgICAgICAgICAgIHdpZHRoLFxuICAgICAgICAgICAgZGlzYWJsZUNsb3NlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGNsb3NlKCkge1xuICAgICAgICB0aGlzLmRpYWxvZy5jbG9zZUFsbCgpO1xuICAgIH1cbn1cbiJdfQ==