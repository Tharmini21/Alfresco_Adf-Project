import { Injectable } from '@angular/core';
import { MatDialog } from '@angular/material/dialog';
import { AlfrescoApiService, AppConfigService, LogService } from '@alfresco/adf-core';
import { from, of, Subject, zip } from 'rxjs';
import { AspectListDialogComponent } from './aspect-list-dialog.component';
import { catchError, map } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@alfresco/adf-core";
import * as i2 from "@angular/material/dialog";
export class AspectListService {
    constructor(alfrescoApiService, appConfigService, dialog, logService) {
        this.alfrescoApiService = alfrescoApiService;
        this.appConfigService = appConfigService;
        this.dialog = dialog;
        this.logService = logService;
    }
    getAspects() {
        const visibleAspectList = this.getVisibleAspects();
        const standardAspects$ = this.getStandardAspects(visibleAspectList);
        const customAspects$ = this.getCustomAspects();
        return zip(standardAspects$, customAspects$).pipe(map(([standardAspectList, customAspectList]) => [...standardAspectList, ...customAspectList]));
    }
    getStandardAspects(whiteList) {
        const where = `(modelId in ('cm:contentmodel', 'emailserver:emailserverModel', 'smf:smartFolder', 'app:applicationmodel' ))`;
        const opts = {
            where,
            include: ['properties']
        };
        return from(this.alfrescoApiService.aspectsApi.listAspects(opts))
            .pipe(map((result) => { var _a; return this.filterAspectByConfig(whiteList, (_a = result === null || result === void 0 ? void 0 : result.list) === null || _a === void 0 ? void 0 : _a.entries); }), catchError((error) => {
            this.logService.error(error);
            return of([]);
        }));
    }
    getCustomAspects() {
        const where = `(not namespaceUri matches('http://www.alfresco.*'))`;
        const opts = {
            where,
            include: ['properties']
        };
        return from(this.alfrescoApiService.aspectsApi.listAspects(opts))
            .pipe(map((result) => { var _a; return (_a = result === null || result === void 0 ? void 0 : result.list) === null || _a === void 0 ? void 0 : _a.entries; }), catchError((error) => {
            this.logService.error(error);
            return of([]);
        }));
    }
    filterAspectByConfig(visibleAspectList, aspectEntries) {
        let result = aspectEntries ? aspectEntries : [];
        if ((visibleAspectList === null || visibleAspectList === void 0 ? void 0 : visibleAspectList.length) > 0 && aspectEntries) {
            result = aspectEntries.filter((value) => {
                var _a;
                return visibleAspectList.includes((_a = value === null || value === void 0 ? void 0 : value.entry) === null || _a === void 0 ? void 0 : _a.id);
            });
        }
        return result;
    }
    getVisibleAspects() {
        let visibleAspectList = [];
        const aspectVisibleConfig = this.appConfigService.get('aspect-visible');
        if (aspectVisibleConfig) {
            for (const aspectGroup of Object.keys(aspectVisibleConfig)) {
                visibleAspectList = visibleAspectList.concat(aspectVisibleConfig[aspectGroup]);
            }
        }
        return visibleAspectList;
    }
    openAspectListDialog(nodeId) {
        const select = new Subject();
        select.subscribe({
            complete: this.close.bind(this)
        });
        const data = {
            title: 'ADF-ASPECT-LIST.DIALOG.TITLE',
            description: 'ADF-ASPECT-LIST.DIALOG.DESCRIPTION',
            overTableMessage: 'ADF-ASPECT-LIST.DIALOG.OVER-TABLE-MESSAGE',
            select,
            nodeId
        };
        this.openDialog(data, 'adf-aspect-list-dialog', '750px');
        return select;
    }
    openDialog(data, panelClass, width) {
        this.dialog.open(AspectListDialogComponent, {
            data,
            panelClass,
            width,
            disableClose: true
        });
    }
    close() {
        this.dialog.closeAll();
    }
}
AspectListService.ɵprov = i0.ɵɵdefineInjectable({ factory: function AspectListService_Factory() { return new AspectListService(i0.ɵɵinject(i1.AlfrescoApiService), i0.ɵɵinject(i1.AppConfigService), i0.ɵɵinject(i2.MatDialog), i0.ɵɵinject(i1.LogService)); }, token: AspectListService, providedIn: "root" });
AspectListService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
AspectListService.ctorParameters = () => [
    { type: AlfrescoApiService },
    { type: AppConfigService },
    { type: MatDialog },
    { type: LogService }
];
//# sourceMappingURL=data:application/json;base64,