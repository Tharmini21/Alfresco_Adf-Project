/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, Input, ViewEncapsulation, ViewChild, Output, EventEmitter } from '@angular/core';
import { Node } from '@alfresco/js-api';
import { VersionListComponent } from './version-list.component';
import { ContentService, AlfrescoApiService } from '@alfresco/adf-core';
import { trigger, state, style, animate, transition } from '@angular/animations';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@alfresco/adf-core';
import * as ɵngcc2 from '@angular/common';
import * as ɵngcc3 from './version-list.component';
import * as ɵngcc4 from './version-comparison.component';
import * as ɵngcc5 from './version-upload.component';
import * as ɵngcc6 from '@angular/material/button';
import * as ɵngcc7 from '@ngx-translate/core';

const _c0 = ["versionList"];
function VersionManagerComponent_adf_version_comparison_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "adf-version-comparison", 9);
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("node", ctx_r0.node)("newFileVersion", ctx_r0.newFileVersion);
} }
function VersionManagerComponent_table_3_Template(rf, ctx) { if (rf & 1) {
    const _r5 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "table", 10);
    ɵngcc0.ɵɵelementStart(1, "tr");
    ɵngcc0.ɵɵelementStart(2, "td");
    ɵngcc0.ɵɵelementStart(3, "adf-version-upload", 11);
    ɵngcc0.ɵɵlistener("success", function VersionManagerComponent_table_3_Template_adf_version_upload_success_3_listener($event) { ɵngcc0.ɵɵrestoreView(_r5); const ctx_r4 = ɵngcc0.ɵɵnextContext(); return ctx_r4.onUploadSuccess($event); })("cancel", function VersionManagerComponent_table_3_Template_adf_version_upload_cancel_3_listener() { ɵngcc0.ɵɵrestoreView(_r5); const ctx_r6 = ɵngcc0.ɵɵnextContext(); return ctx_r6.onUploadCancel(); })("error", function VersionManagerComponent_table_3_Template_adf_version_upload_error_3_listener($event) { ɵngcc0.ɵɵrestoreView(_r5); const ctx_r7 = ɵngcc0.ɵɵnextContext(); return ctx_r7.onUploadError($event); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("node", ctx_r1.node)("newFileVersion", ctx_r1.newFileVersion);
} }
function VersionManagerComponent_button_7_Template(rf, ctx) { if (rf & 1) {
    const _r9 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 12);
    ɵngcc0.ɵɵlistener("click", function VersionManagerComponent_button_7_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r9); const ctx_r8 = ɵngcc0.ɵɵnextContext(); return ctx_r8.toggleNewVersion(); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1("", ɵngcc0.ɵɵpipeBind1(2, 1, "ADF_VERSION_LIST.ACTIONS.UPLOAD.ADD"), " ");
} }
export class VersionManagerComponent {
    constructor(contentService, alfrescoApiService) {
        this.contentService = contentService;
        this.alfrescoApiService = alfrescoApiService;
        this.showComments = true;
        this.showVersionComparison = false;
        this.allowDownload = true;
        this.uploadSuccess = new EventEmitter();
        this.uploadError = new EventEmitter();
        this.uploadCancel = new EventEmitter();
        this.viewVersion = new EventEmitter();
        this.uploadState = 'close';
    }
    ngOnInit() {
        if (this.newFileVersion) {
            this.toggleNewVersion();
        }
    }
    refresh(node) {
        this.alfrescoApiService.nodeUpdated.next(node);
        this.versionListComponent.loadVersionHistory();
        this.uploadSuccess.emit(node);
        this.uploadState = 'close';
    }
    onUploadSuccess(event) {
        this.showVersionComparison = false;
        this.newFileVersion = null;
        this.alfrescoApiService.nodeUpdated.next(event.value.entry);
        this.versionListComponent.loadVersionHistory();
        this.uploadSuccess.emit(event.value.entry);
        this.uploadState = 'close';
    }
    onUploadError(event) {
        this.uploadError.emit(event);
    }
    onUploadCancel() {
        this.uploadState = 'close';
        this.showVersionComparison = false;
        this.newFileVersion = null;
        this.uploadCancel.emit(true);
    }
    onViewVersion(versionId) {
        this.viewVersion.emit(versionId);
    }
    toggleNewVersion() {
        this.uploadState = this.uploadState === 'open' ? 'close' : 'open';
    }
    canUpdate() {
        return this.contentService.hasAllowableOperations(this.node, 'update');
    }
}
VersionManagerComponent.ɵfac = function VersionManagerComponent_Factory(t) { return new (t || VersionManagerComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ContentService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.AlfrescoApiService)); };
VersionManagerComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: VersionManagerComponent, selectors: [["adf-version-manager"]], viewQuery: function VersionManagerComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵstaticViewQuery(_c0, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.versionListComponent = _t.first);
    } }, inputs: { showComments: "showComments", showVersionComparison: "showVersionComparison", allowDownload: "allowDownload", newFileVersion: "newFileVersion", node: "node" }, outputs: { uploadSuccess: "uploadSuccess", uploadError: "uploadError", uploadCancel: "uploadCancel", viewVersion: "viewVersion" }, decls: 11, vars: 7, consts: [[1, "adf-new-version-container"], [3, "node", "newFileVersion", 4, "ngIf"], ["id", "adf-new-version-uploader-container", "fxLayout", "row", "fxLayoutAlign", "end center", 1, "adf-new-version-uploader-container"], ["class", "adf-version-upload", 4, "ngIf"], [1, "adf-version-list-container"], [1, "adf-version-list-table"], ["mat-raised-button", "", "id", "adf-show-version-upload-button", "color", "primary", 3, "click", 4, "ngIf"], [3, "node", "allowDownload", "showComments", "deleted", "restored", "viewVersion"], ["versionList", ""], [3, "node", "newFileVersion"], [1, "adf-version-upload"], ["id", "adf-version-upload-button", 3, "node", "newFileVersion", "success", "cancel", "error"], ["mat-raised-button", "", "id", "adf-show-version-upload-button", "color", "primary", 3, "click"]], template: function VersionManagerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵtemplate(1, VersionManagerComponent_adf_version_comparison_1_Template, 1, 2, "adf-version-comparison", 1);
        ɵngcc0.ɵɵelementStart(2, "div", 2);
        ɵngcc0.ɵɵtemplate(3, VersionManagerComponent_table_3_Template, 4, 2, "table", 3);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(4, "div", 4);
        ɵngcc0.ɵɵelementStart(5, "div", 5);
        ɵngcc0.ɵɵelementStart(6, "div");
        ɵngcc0.ɵɵtemplate(7, VersionManagerComponent_button_7_Template, 3, 3, "button", 6);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(8, "div");
        ɵngcc0.ɵɵelementStart(9, "adf-version-list", 7, 8);
        ɵngcc0.ɵɵlistener("deleted", function VersionManagerComponent_Template_adf_version_list_deleted_9_listener($event) { return ctx.refresh($event); })("restored", function VersionManagerComponent_Template_adf_version_list_restored_9_listener($event) { return ctx.refresh($event); })("viewVersion", function VersionManagerComponent_Template_adf_version_list_viewVersion_9_listener($event) { return ctx.onViewVersion($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showVersionComparison);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("@uploadToggle", ctx.uploadState);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.uploadState !== "close");
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("ngIf", ctx.uploadState === "close");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("node", ctx.node)("allowDownload", ctx.allowDownload)("showComments", ctx.showComments);
    } }, directives: [ɵngcc2.NgIf, ɵngcc3.VersionListComponent, ɵngcc4.VersionComparisonComponent, ɵngcc5.VersionUploadComponent, ɵngcc6.MatButton], pipes: [ɵngcc7.TranslatePipe], styles: ["adf-version-manager .mat-list .mat-3-line{height:auto!important;width:100%!important}adf-version-manager .mat-list-item-content{padding:16px 0!important}.adf-version-list-item-comment.mat-line{height:100%;overflow:unset!important;white-space:unset!important;word-break:break-all}.adf-button.adf-upload-new-version{box-shadow:none;float:left;height:175px;position:relative;width:100%}.adf-new-version-uploader-container{float:left;height:0;padding:16px 0;position:relative;width:100%}.adf-new-version-container{height:inherit;overflow:hidden}.adf-version-list-table,.adf-version-upload-table{width:100%}.adf-version-list{width:100%!important}.adf-new-version-uploader-container,.adf-version-list{float:left!important}"], encapsulation: 2, data: { animation: [
            trigger('uploadToggle', [
                state('open', style({ height: '175px', opacity: 1, visibility: 'visible' })),
                state('close', style({ height: '0%', opacity: 0, visibility: 'hidden' })),
                transition('open => close', [
                    style({ visibility: 'hidden' }),
                    animate('0.4s cubic-bezier(0.25, 0.8, 0.25, 1)')
                ]),
                transition('close => open', [
                    style({ visibility: 'visible' }),
                    animate('0.4s cubic-bezier(0.25, 0.8, 0.25, 1)')
                ])
            ])
        ] } });
VersionManagerComponent.ctorParameters = () => [
    { type: ContentService },
    { type: AlfrescoApiService }
];
VersionManagerComponent.propDecorators = {
    node: [{ type: Input }],
    newFileVersion: [{ type: Input }],
    showComments: [{ type: Input }],
    showVersionComparison: [{ type: Input }],
    allowDownload: [{ type: Input }],
    uploadSuccess: [{ type: Output }],
    uploadError: [{ type: Output }],
    uploadCancel: [{ type: Output }],
    viewVersion: [{ type: Output }],
    versionListComponent: [{ type: ViewChild, args: ['versionList', { static: true },] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(VersionManagerComponent, [{
        type: Component,
        args: [{
                selector: 'adf-version-manager',
                template: "<div class=\"adf-new-version-container\">\n\n    <adf-version-comparison *ngIf=\"showVersionComparison\" [node]=\"node\" [newFileVersion]=\"newFileVersion\"></adf-version-comparison>\n\n    <div class=\"adf-new-version-uploader-container\" id=\"adf-new-version-uploader-container\" fxLayout=\"row\" fxLayoutAlign=\"end center\" [@uploadToggle]=\"uploadState\">\n        <table class=\"adf-version-upload\" *ngIf=\"uploadState !== 'close'\">\n            <tr>\n                <td>\n                    <adf-version-upload\n                        id=\"adf-version-upload-button\"\n                        [node]=\"node\"\n                        [newFileVersion]=\"newFileVersion\"\n                        (success)=\"onUploadSuccess($event)\"\n                        (cancel)=\"onUploadCancel()\"\n                        (error)=\"onUploadError($event)\">\n                    </adf-version-upload>\n                </td>\n            </tr>\n        </table>\n    </div>\n\n    <div class=\"adf-version-list-container\">\n        <div class=\"adf-version-list-table\">\n            <div>\n                <button mat-raised-button\n                        id=\"adf-show-version-upload-button\"\n                        (click)=\"toggleNewVersion()\" color=\"primary\"\n                        *ngIf=\"uploadState ==='close'\">{{\n                    'ADF_VERSION_LIST.ACTIONS.UPLOAD.ADD'|\n                    translate }}\n                </button>\n            </div>\n            <div>\n\n                <adf-version-list\n                    #versionList\n                    [node]=\"node\"\n                    [allowDownload]=\"allowDownload\"\n                    [showComments]=\"showComments\"\n                    (deleted)=\"refresh($event)\"\n                    (restored)=\"refresh($event)\"\n                    (viewVersion)=\"onViewVersion($event)\">\n                </adf-version-list>\n            </div>\n        </div>\n    </div>\n</div>\n",
                animations: [
                    trigger('uploadToggle', [
                        state('open', style({ height: '175px', opacity: 1, visibility: 'visible' })),
                        state('close', style({ height: '0%', opacity: 0, visibility: 'hidden' })),
                        transition('open => close', [
                            style({ visibility: 'hidden' }),
                            animate('0.4s cubic-bezier(0.25, 0.8, 0.25, 1)')
                        ]),
                        transition('close => open', [
                            style({ visibility: 'visible' }),
                            animate('0.4s cubic-bezier(0.25, 0.8, 0.25, 1)')
                        ])
                    ])
                ],
                encapsulation: ViewEncapsulation.None,
                styles: ["adf-version-manager .mat-list .mat-3-line{height:auto!important;width:100%!important}adf-version-manager .mat-list-item-content{padding:16px 0!important}.adf-version-list-item-comment.mat-line{height:100%;overflow:unset!important;white-space:unset!important;word-break:break-all}.adf-button.adf-upload-new-version{box-shadow:none;float:left;height:175px;position:relative;width:100%}.adf-new-version-uploader-container{float:left;height:0;padding:16px 0;position:relative;width:100%}.adf-new-version-container{height:inherit;overflow:hidden}.adf-version-list-table,.adf-version-upload-table{width:100%}.adf-version-list{width:100%!important}.adf-new-version-uploader-container,.adf-version-list{float:left!important}"]
            }]
    }], function () { return [{ type: ɵngcc1.ContentService }, { type: ɵngcc1.AlfrescoApiService }]; }, { showComments: [{
            type: Input
        }], showVersionComparison: [{
            type: Input
        }], allowDownload: [{
            type: Input
        }], uploadSuccess: [{
            type: Output
        }], uploadError: [{
            type: Output
        }], uploadCancel: [{
            type: Output
        }], viewVersion: [{
            type: Output
        }], newFileVersion: [{
            type: Input
        }], node: [{
            type: Input
        }], versionListComponent: [{
            type: ViewChild,
            args: ['versionList', { static: true }]
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,