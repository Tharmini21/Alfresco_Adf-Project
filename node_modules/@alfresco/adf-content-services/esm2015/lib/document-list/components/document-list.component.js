/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, ContentChild, ElementRef, EventEmitter, HostListener, Input, NgZone, Output, ViewChild, ViewEncapsulation } from '@angular/core';
import { ContentService, DataSorting, DataTableComponent, DisplayMode, ShowHeaderMode, ObjectDataColumn, AppConfigService, DataColumnListComponent, UserPreferencesService, ThumbnailService, CustomLoadingContentTemplateDirective, CustomNoPermissionTemplateDirective, CustomEmptyContentTemplateDirective, AlfrescoApiService, UserPreferenceValues, LockService } from '@alfresco/adf-core';
import { NodePaging, Pagination } from '@alfresco/js-api';
import { Subject, BehaviorSubject, of } from 'rxjs';
import { ShareDataTableAdapter } from './../data/share-datatable-adapter';
import { presetsDefaultModel } from '../models/preset.model';
import { ContentActionModel } from './../models/content-action.model';
import { NodeEntityEvent, NodeEntryEvent } from './node.event';
import { DocumentListService } from '../services/document-list.service';
import { takeUntil } from 'rxjs/operators';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../services/document-list.service';
import * as ɵngcc2 from '@alfresco/adf-core';

const _c0 = ["dataTable"];
function DocumentListComponent_div_2_Template(rf, ctx) { if (rf & 1) {
    const _r6 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵelementStart(1, "adf-filter-header", 3);
    ɵngcc0.ɵɵlistener("filterSelection", function DocumentListComponent_div_2_Template_adf_filter_header_filterSelection_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r5 = ɵngcc0.ɵɵnextContext(); return ctx_r5.onFilterSelectionChange($event); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("currentFolderId", ctx_r1.currentFolderId)("value", ctx_r1.filterValue);
} }
function DocumentListComponent_ng_template_4_adf_empty_list_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "adf-empty-list");
    ɵngcc0.ɵɵelementStart(1, "div", 4);
    ɵngcc0.ɵɵelementStart(2, "div", 5);
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "div", 6);
    ɵngcc0.ɵɵtext(6);
    ɵngcc0.ɵɵpipe(7, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(8, "div", 7);
    ɵngcc0.ɵɵtext(9);
    ɵngcc0.ɵɵpipe(10, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(11, "img", 8);
    ɵngcc0.ɵɵpipe(12, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r7 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(4, 5, "ADF-DOCUMENT-LIST.EMPTY.HEADER"));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(7, 7, "ADF-DATATABLE.EMPTY.DRAG-AND-DROP.TITLE"));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(10, 9, "ADF-DATATABLE.EMPTY.DRAG-AND-DROP.SUBTITLE"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("alt", ɵngcc0.ɵɵpipeBind1(12, 11, "ADF-DATATABLE.EMPTY.DRAG-AND-DROP.TITLE"))("src", ctx_r7.emptyFolderImageUrl, ɵngcc0.ɵɵsanitizeUrl);
} }
function DocumentListComponent_ng_template_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, DocumentListComponent_ng_template_4_adf_empty_list_0_Template, 13, 13, "adf-empty-list", 2);
    ɵngcc0.ɵɵprojection(1);
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r2.customNoContentTemplate);
} }
function DocumentListComponent_ng_template_6_div_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 10);
    ɵngcc0.ɵɵelementStart(1, "mat-icon");
    ɵngcc0.ɵɵtext(2, "error");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "p", 11);
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵpipe(5, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(5, 1, "ADF-DOCUMENT-LIST.NO_PERMISSION"));
} }
function DocumentListComponent_ng_template_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, DocumentListComponent_ng_template_6_div_0_Template, 6, 3, "div", 9);
    ɵngcc0.ɵɵprojection(1, 1);
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r3.customNoPermissionsTemplate);
} }
function DocumentListComponent_ng_template_8_div_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 13);
    ɵngcc0.ɵɵelement(1, "mat-progress-spinner", 14);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("color", "primary")("mode", "indeterminate");
} }
function DocumentListComponent_ng_template_8_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, DocumentListComponent_ng_template_8_div_0_Template, 2, 2, "div", 12);
    ɵngcc0.ɵɵprojection(1, 2);
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r4.customLoadingContent);
} }
const _c1 = [[["adf-custom-empty-content-template"], ["empty-folder-content"]], [["adf-custom-no-permission-template"], ["no-permission-content"]], [["adf-custom-loading-content-template"]]];
const _c2 = ["adf-custom-empty-content-template, empty-folder-content", "adf-custom-no-permission-template, no-permission-content", "adf-custom-loading-content-template"];
export class DocumentListComponent {
    constructor(documentListService, ngZone, elementRef, appConfig, userPreferencesService, contentService, thumbnailService, alfrescoApiService, lockService) {
        this.documentListService = documentListService;
        this.ngZone = ngZone;
        this.elementRef = elementRef;
        this.appConfig = appConfig;
        this.userPreferencesService = userPreferencesService;
        this.contentService = contentService;
        this.thumbnailService = thumbnailService;
        this.alfrescoApiService = alfrescoApiService;
        this.lockService = lockService;
        this.DEFAULT_PAGINATION = new Pagination({
            hasMoreItems: false,
            skipCount: 0,
            maxItems: 25,
            totalItems: 0
        });
        this.DEFAULT_SORTING = [
            new DataSorting('name', 'asc'),
            new DataSorting('isFolder', 'desc')
        ];
        this.display = DisplayMode.List;
        this.permissionsStyle = [];
        this.locationFormat = '/';
        this.navigate = true;
        this.showHeader = ShowHeaderMode.Data;
        this.navigationMode = DocumentListComponent.DOUBLE_CLICK_NAVIGATION;
        this.thumbnails = false;
        this.selectionMode = 'single';
        this.multiselect = false;
        this.contentActions = false;
        this.contentActionsPosition = 'right';
        this.contextMenuActions = false;
        this.emptyFolderImageUrl = './assets/images/empty_doc_lib.svg';
        this.allowDropFiles = false;
        this.sorting = ['name', 'asc'];
        this.additionalSorting = new DataSorting('isFolder', 'desc');
        this.sortingMode = 'server';
        this.loading = false;
        this._rowFilter = null;
        this.imageResolver = null;
        this.stickyHeader = false;
        this.headerFilters = false;
        this.currentFolderId = null;
        this.preselectNodes = [];
        this.node = null;
        this.maxItems = this.DEFAULT_PAGINATION.maxItems;
        this.nodeClick = new EventEmitter();
        this.nodeDblClick = new EventEmitter();
        this.folderChange = new EventEmitter();
        this.preview = new EventEmitter();
        this.ready = new EventEmitter();
        this.error = new EventEmitter();
        this.nodeSelected = new EventEmitter();
        this.filterSelection = new EventEmitter();
        this.actions = [];
        this.contextActionHandler = new Subject();
        this.noPermission = false;
        this.selection = new Array();
        this.$folderNode = new Subject();
        this.allowFiltering = true;
        this.orderBy = null;
        this.preselectedRows = [];
        this._pagination = this.DEFAULT_PAGINATION;
        this.pagination = new BehaviorSubject(this.DEFAULT_PAGINATION);
        this.sortingSubject = new BehaviorSubject(this.DEFAULT_SORTING);
        this.layoutPresets = {};
        this.rowMenuCache = {};
        this.onDestroy$ = new Subject();
        this.userPreferencesService
            .select(UserPreferenceValues.PaginationSize)
            .pipe(takeUntil(this.onDestroy$))
            .subscribe(pagSize => {
            this.maxItems = this._pagination.maxItems = pagSize;
        });
    }
    set rowFilter(rowFilter) {
        this._rowFilter = rowFilter;
        if (this.data) {
            this.data.setFilter(this._rowFilter);
            if (this.currentFolderId) {
                this.reload();
            }
        }
    }
    get rowFilter() {
        return this._rowFilter;
    }
    getContextActions(node) {
        if (node && node.entry) {
            const actions = this.getNodeActions(node);
            if (actions && actions.length > 0) {
                return actions.map((currentAction) => {
                    return {
                        model: currentAction,
                        node: node,
                        subject: this.contextActionHandler
                    };
                });
            }
        }
        return null;
    }
    get hasCustomLayout() {
        return this.columnList && this.columnList.columns && this.columnList.columns.length > 0;
    }
    getDefaultSorting() {
        let defaultSorting;
        if (Array.isArray(this.sorting)) {
            const [key, direction] = this.sorting;
            defaultSorting = new DataSorting(key, direction);
        }
        else {
            defaultSorting = new DataSorting(this.sorting.key, this.sorting.direction);
        }
        return defaultSorting;
    }
    getLayoutPreset(name = 'default') {
        return (this.layoutPresets[name] || this.layoutPresets['default']).map((col) => new ObjectDataColumn(col));
    }
    isMobile() {
        return !!/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
    }
    isEmpty() {
        return !this.data || this.data.getRows().length === 0;
    }
    ngOnInit() {
        this.rowMenuCache = {};
        this.loadLayoutPresets();
        this.data = new ShareDataTableAdapter(this.thumbnailService, this.contentService, null, this.getDefaultSorting(), this.sortingMode, this.allowDropFiles);
        this.data.thumbnails = this.thumbnails;
        this.data.permissionsStyle = this.permissionsStyle;
        if (this._rowFilter) {
            this.data.setFilter(this._rowFilter);
        }
        if (this.imageResolver) {
            this.data.setImageResolver(this.imageResolver);
        }
        this.contextActionHandler
            .pipe(takeUntil(this.onDestroy$))
            .subscribe(val => this.contextActionCallback(val));
        this.enforceSingleClickNavigationForMobile();
    }
    ngAfterContentInit() {
        if (this.columnList) {
            this.columnList.columns.changes
                .pipe(takeUntil(this.onDestroy$))
                .subscribe(() => this.setTableSchema());
        }
        this.setTableSchema();
    }
    setTableSchema() {
        let schema = [];
        if (this.hasCustomLayout) {
            schema = this.columnList.columns.map((c) => c);
        }
        if (!this.data) {
            this.data = new ShareDataTableAdapter(this.thumbnailService, this.contentService, schema, this.getDefaultSorting(), this.sortingMode);
        }
        else if (schema && schema.length > 0) {
            this.data.setColumns(schema);
        }
        const columns = this.data.getColumns();
        if (!columns || columns.length === 0) {
            this.setupDefaultColumns(this.currentFolderId);
        }
    }
    ngOnChanges(changes) {
        var _a, _b;
        if (!changes['preselectNodes']) {
            this.resetSelection();
        }
        if (Array.isArray(this.sorting)) {
            const [key, direction] = this.sorting;
            this.orderBy = this.buildOrderByArray(key, direction);
        }
        else {
            this.orderBy = this.buildOrderByArray(this.sorting.key, this.sorting.direction);
        }
        if (this.data) {
            this.data.thumbnails = this.thumbnails;
        }
        if (changes.sortingMode && !changes.sortingMode.firstChange && this.data) {
            this.data.sortingMode = changes.sortingMode.currentValue;
        }
        if (changes.sorting && !changes.sorting.firstChange && this.data) {
            const newValue = changes.sorting.currentValue;
            if (newValue && newValue.length > 0) {
                const [key, direction] = newValue;
                this.data.setSorting(new DataSorting(key, direction));
            }
        }
        if (this.currentFolderId && ((_a = changes['currentFolderId']) === null || _a === void 0 ? void 0 : _a.currentValue) !== ((_b = changes['currentFolderId']) === null || _b === void 0 ? void 0 : _b.previousValue)) {
            this.loadFolder();
        }
        if (this.data) {
            if (changes.node && changes.node.currentValue) {
                const merge = this._pagination ? this._pagination.merge : false;
                this.data.loadPage(changes.node.currentValue, merge, null);
                this.preserveExistingSelection();
                this.onPreselectNodes();
                this.onDataReady(changes.node.currentValue);
            }
            else if (changes.imageResolver) {
                this.data.setImageResolver(changes.imageResolver.currentValue);
            }
        }
    }
    reload() {
        this.ngZone.run(() => {
            this.resetSelection();
            this.reloadWithoutResettingSelection();
        });
    }
    reloadWithoutResettingSelection() {
        if (this.node) {
            if (this.data) {
                this.data.loadPage(this.node, this._pagination.merge, null);
                this.preserveExistingSelection();
            }
            this.onPreselectNodes();
            this.syncPagination();
            this.onDataReady(this.node);
        }
        else {
            this.loadFolder();
        }
    }
    contextActionCallback(action) {
        if (action) {
            this.executeContentAction(action.node, action.model);
        }
    }
    getNodeActions(node) {
        if (node && node.entry) {
            let target = null;
            if (node.entry.isFile) {
                target = 'document';
            }
            else if (node.entry.isFolder) {
                target = 'folder';
            }
            if (target) {
                const actions = this.rowMenuCache[node.entry.id];
                if (actions) {
                    actions.forEach((action) => {
                        this.refreshAction(action, node);
                    });
                    return actions;
                }
                const actionsByTarget = this.actions
                    .filter((entry) => {
                    const isVisible = (typeof entry.visible === 'function')
                        ? entry.visible(node)
                        : entry.visible;
                    return isVisible && entry.target.toLowerCase() === target;
                })
                    .map((action) => new ContentActionModel(action));
                actionsByTarget.forEach((action) => {
                    this.refreshAction(action, node);
                });
                this.rowMenuCache[node.entry.id] = actionsByTarget;
                return actionsByTarget;
            }
        }
        return [];
    }
    refreshAction(action, node) {
        action.disabled = this.isActionDisabled(action, node);
        action.visible = this.isActionVisible(action, node);
    }
    isActionVisible(action, node) {
        if (typeof action.visible === 'function') {
            return action.visible(node);
        }
        return action.visible;
    }
    isActionDisabled(action, node) {
        if (typeof action.disabled === 'function') {
            return action.disabled(node);
        }
        if ((action.permission &&
            action.disableWithNoPermission &&
            !this.contentService.hasAllowableOperations(node.entry, action.permission)) ||
            this.lockService.isLocked(node.entry)) {
            return true;
        }
        else {
            return action.disabled;
        }
    }
    onShowContextMenu(e) {
        if (e && this.contextMenuActions) {
            e.preventDefault();
        }
    }
    navigateTo(node) {
        if (typeof node === 'string') {
            this.resetNewFolderPagination();
            this.currentFolderId = node;
            this.folderChange.emit(new NodeEntryEvent({ id: node }));
            this.reload();
            return true;
        }
        else {
            if (this.canNavigateFolder(node)) {
                this.resetNewFolderPagination();
                this.currentFolderId = this.getNodeFolderDestinationId(node);
                this.folderChange.emit(new NodeEntryEvent({ id: this.currentFolderId }));
                this.reload();
                return true;
            }
        }
        return false;
    }
    getNodeFolderDestinationId(node) {
        return this.isLinkFolder(node) ? node.properties['cm:destination'] : node.id;
    }
    isLinkFolder(node) {
        return node.nodeType === 'app:folderlink' && node.properties &&
            node.properties['cm:destination'];
    }
    updateCustomSourceData(nodeId) {
        this.currentFolderId = nodeId;
    }
    executeContentAction(node, action) {
        if (node && node.entry && action) {
            const handlerSub = (typeof action.handler === 'function') ? action.handler(node, this, action.permission) : of(true);
            if (typeof action.execute === 'function' && handlerSub) {
                handlerSub
                    .pipe(takeUntil(this.onDestroy$))
                    .subscribe(() => action.execute(node));
            }
        }
    }
    setLoadingState(value) {
        var _a;
        if (((_a = this.data) === null || _a === void 0 ? void 0 : _a.getRows().length) > 0) {
            if (value) {
                clearTimeout(this.loadingTimeout);
                this.loadingTimeout = setTimeout(() => {
                    this.loading = true;
                }, 1000);
            }
            else {
                clearTimeout(this.loadingTimeout);
                this.loading = false;
            }
        }
        else {
            clearTimeout(this.loadingTimeout);
            this.loading = value;
        }
    }
    loadFolder() {
        if (!this._pagination.merge) {
            this.setLoadingState(true);
        }
        if (!this.hasCustomLayout) {
            this.setupDefaultColumns(this.currentFolderId);
        }
        if (this.documentListService.isCustomSourceService(this.currentFolderId)) {
            this.updateCustomSourceData(this.currentFolderId);
        }
        this.documentListService.loadFolderByNodeId(this.currentFolderId, this._pagination, this.includeFields, this.where, this.orderBy)
            .subscribe((documentNode) => {
            if (documentNode.currentNode) {
                this.folderNode = documentNode.currentNode.entry;
                this.$folderNode.next(documentNode.currentNode.entry);
            }
            this.onPageLoaded(documentNode.children);
        }, (err) => {
            this.handleError(err);
        });
    }
    resetSelection() {
        this.dataTable.resetSelection();
        this.selection = [];
        this.noPermission = false;
    }
    onPageLoaded(nodePaging) {
        if (nodePaging) {
            if (this.data) {
                this.data.loadPage(nodePaging, this._pagination.merge, this.allowDropFiles);
                this.preserveExistingSelection();
            }
            this.onPreselectNodes();
            this.setLoadingState(false);
            this.onDataReady(nodePaging);
        }
    }
    onSortingChanged(event) {
        this.orderBy = this.buildOrderByArray(event.detail.sortingKey, event.detail.direction);
        this.sortingSubject.next([this.additionalSorting, event.detail]);
        if (this.sortingMode === 'server') {
            this.reload();
        }
    }
    buildOrderByArray(currentKey, currentDirection) {
        return [
            `${this.additionalSorting.key} ${this.additionalSorting.direction}`,
            `${currentKey} ${currentDirection}`
        ];
    }
    setupDefaultColumns(preset = 'default') {
        if (this.data) {
            const columns = this.getLayoutPreset(preset);
            this.data.setColumns(columns);
        }
    }
    onPreviewFile(node) {
        if (node) {
            this.preview.emit(new NodeEntityEvent(node));
        }
    }
    onNodeClick(nodeEntry) {
        const domEvent = new CustomEvent('node-click', {
            detail: {
                sender: this,
                node: nodeEntry
            },
            bubbles: true
        });
        this.elementRef.nativeElement.dispatchEvent(domEvent);
        const event = new NodeEntityEvent(nodeEntry);
        this.nodeClick.emit(event);
        if (!event.defaultPrevented) {
            if (this.navigate && this.navigationMode === DocumentListComponent.SINGLE_CLICK_NAVIGATION) {
                this.executeActionClick(nodeEntry);
            }
        }
    }
    onNodeDblClick(nodeEntry) {
        const domEvent = new CustomEvent('node-dblclick', {
            detail: {
                sender: this,
                node: nodeEntry
            },
            bubbles: true
        });
        this.elementRef.nativeElement.dispatchEvent(domEvent);
        const event = new NodeEntityEvent(nodeEntry);
        this.nodeDblClick.emit(event);
        if (!event.defaultPrevented) {
            if (this.navigate && this.navigationMode === DocumentListComponent.DOUBLE_CLICK_NAVIGATION) {
                this.executeActionClick(nodeEntry);
            }
        }
    }
    executeActionClick(nodeEntry) {
        if (nodeEntry && nodeEntry.entry) {
            if (nodeEntry.entry.isFile) {
                this.onPreviewFile(nodeEntry);
            }
            if (nodeEntry.entry.isFolder) {
                this.navigateTo(nodeEntry.entry);
            }
            if (nodeEntry.entry['guid']) {
                const options = {
                    include: this.includeFields
                };
                this.alfrescoApiService.nodesApi.getNode(nodeEntry.entry['guid'], options)
                    .then((node) => {
                    this.navigateTo(node.entry);
                });
            }
        }
    }
    onNodeSelect(event) {
        this.selection = event.selection.map((entry) => entry.node);
        const domEvent = new CustomEvent('node-select', {
            detail: {
                node: event.row ? event.row.node : null,
                selection: this.selection
            },
            bubbles: true
        });
        this.nodeSelected.emit(this.selection);
        this.elementRef.nativeElement.dispatchEvent(domEvent);
    }
    onNodeUnselect(event) {
        this.selection = event.selection.map((entry) => entry.node);
        const domEvent = new CustomEvent('node-unselect', {
            detail: {
                node: event.row ? event.row.node : null,
                selection: this.selection
            },
            bubbles: true
        });
        this.nodeSelected.emit(this.selection);
        this.elementRef.nativeElement.dispatchEvent(domEvent);
    }
    onShowRowContextMenu(event) {
        if (this.contextMenuActions) {
            const args = event.value;
            const node = args.row.node;
            if (node) {
                args.actions = this.getContextActions(node) || [];
            }
        }
    }
    onShowRowActionsMenu(event) {
        if (this.contentActions) {
            const args = event.value;
            const node = args.row.node;
            if (node) {
                args.actions = this.getNodeActions(node) || [];
            }
        }
    }
    onExecuteRowAction(event) {
        if (this.contentActions) {
            const args = event.value;
            const node = args.row.node;
            const action = args.action;
            this.executeContentAction(node, action);
        }
    }
    enforceSingleClickNavigationForMobile() {
        if (this.isMobile()) {
            this.navigationMode = DocumentListComponent.SINGLE_CLICK_NAVIGATION;
        }
    }
    canNavigateFolder(node) {
        let canNavigateFolder = false;
        if (node && node.isFolder) {
            canNavigateFolder = true;
        }
        return canNavigateFolder;
    }
    loadLayoutPresets() {
        const externalSettings = this.appConfig.get('document-list.presets', null);
        this.layoutPresets = externalSettings ? Object.assign({}, presetsDefaultModel, externalSettings) : presetsDefaultModel;
    }
    onDataReady(nodePaging) {
        this.ready.emit(nodePaging);
        this.pagination.next(nodePaging.list.pagination);
    }
    updatePagination(requestPaginationModel) {
        this._pagination.maxItems = requestPaginationModel.maxItems;
        this._pagination.merge = requestPaginationModel.merge;
        this._pagination.skipCount = requestPaginationModel.skipCount;
        this.reload();
    }
    syncPagination() {
        this.node.list.pagination.maxItems = this._pagination.maxItems;
        this.node.list.pagination.skipCount = this._pagination.skipCount;
    }
    onFilterSelectionChange(activeFilters) {
        this.filterSelection.emit(activeFilters);
    }
    resetNewFolderPagination() {
        this._pagination.skipCount = 0;
        this._pagination.maxItems = this.maxItems;
    }
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
    handleError(err) {
        if (err.message) {
            try {
                if (JSON.parse(err.message).error.statusCode === 403) {
                    this.noPermission = true;
                }
            }
            catch (error) {
            }
        }
        this.setLoadingState(false);
        this.error.emit(err);
    }
    getPreselectedNodesBasedOnSelectionMode() {
        return this.hasPreselectedNodes() ? (this.isSingleSelectionMode() ? [this.preselectNodes[0]] : this.preselectNodes) : [];
    }
    getPreselectedRowsBasedOnSelectionMode() {
        return this.hasPreselectedRows() ? (this.isSingleSelectionMode() ? [this.preselectedRows[0]] : this.preselectedRows) : [];
    }
    getSelectionBasedOnSelectionMode() {
        return this.hasPreselectedRows() ? (this.isSingleSelectionMode() ? [this.preselectedRows[0]] : this.data.getSelectedRows()) : this.data.getSelectedRows();
    }
    onPreselectNodes() {
        if (this.hasPreselectedNodes()) {
            this.preselectRowsOfPreselectedNodes();
            const preselectedRows = this.getPreselectedRowsBasedOnSelectionMode();
            const selectedNodes = this.data.getSelectedRows();
            for (const node of preselectedRows) {
                this.dataTable.selectRow(node, true);
            }
            this.onNodeSelect({ row: undefined, selection: selectedNodes });
        }
    }
    preserveExistingSelection() {
        if (this.isMultipleSelectionMode()) {
            for (const selection of this.selection) {
                const rowOfSelection = this.data.getRowByNodeId(selection.entry.id);
                if (rowOfSelection) {
                    rowOfSelection.isSelected = true;
                }
            }
        }
    }
    preselectRowsOfPreselectedNodes() {
        this.preselectedRows = [];
        const preselectedNodes = this.getPreselectedNodesBasedOnSelectionMode();
        preselectedNodes.forEach((preselectedNode) => {
            const rowOfPreselectedNode = this.data.getRowByNodeId(preselectedNode.entry.id);
            if (rowOfPreselectedNode) {
                rowOfPreselectedNode.isSelected = true;
                this.preselectedRows.push(rowOfPreselectedNode);
            }
        });
    }
    unselectRowFromNodeId(nodeId) {
        const rowToUnselect = this.data.getRowByNodeId(nodeId);
        if (rowToUnselect === null || rowToUnselect === void 0 ? void 0 : rowToUnselect.isSelected) {
            rowToUnselect.isSelected = false;
            this.dataTable.selectRow(rowToUnselect, false);
            const selection = this.getSelectionBasedOnSelectionMode();
            this.onNodeUnselect({ row: undefined, selection: selection });
        }
    }
    isSingleSelectionMode() {
        return this.selectionMode === 'single';
    }
    isMultipleSelectionMode() {
        return this.selectionMode === 'multiple';
    }
    hasPreselectedNodes() {
        var _a;
        return ((_a = this.preselectNodes) === null || _a === void 0 ? void 0 : _a.length) > 0;
    }
    hasPreselectedRows() {
        var _a;
        return ((_a = this.preselectedRows) === null || _a === void 0 ? void 0 : _a.length) > 0;
    }
}
DocumentListComponent.ɵfac = function DocumentListComponent_Factory(t) { return new (t || DocumentListComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DocumentListService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.AppConfigService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.UserPreferencesService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ContentService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ThumbnailService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.AlfrescoApiService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.LockService)); };
DocumentListComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DocumentListComponent, selectors: [["adf-document-list"]], contentQueries: function DocumentListComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, DataColumnListComponent, true);
        ɵngcc0.ɵɵcontentQuery(dirIndex, CustomLoadingContentTemplateDirective, true);
        ɵngcc0.ɵɵcontentQuery(dirIndex, CustomNoPermissionTemplateDirective, true);
        ɵngcc0.ɵɵcontentQuery(dirIndex, CustomEmptyContentTemplateDirective, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.columnList = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.customLoadingContent = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.customNoPermissionsTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.customNoContentTemplate = _t.first);
    } }, viewQuery: function DocumentListComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵstaticViewQuery(_c0, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.dataTable = _t.first);
    } }, hostAttrs: [1, "adf-document-list"], hostBindings: function DocumentListComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("contextmenu", function DocumentListComponent_contextmenu_HostBindingHandler($event) { return ctx.onShowContextMenu($event); });
    } }, inputs: { display: "display", permissionsStyle: "permissionsStyle", locationFormat: "locationFormat", navigate: "navigate", showHeader: "showHeader", navigationMode: "navigationMode", thumbnails: "thumbnails", selectionMode: "selectionMode", multiselect: "multiselect", contentActions: "contentActions", contentActionsPosition: "contentActionsPosition", contextMenuActions: "contextMenuActions", emptyFolderImageUrl: "emptyFolderImageUrl", allowDropFiles: "allowDropFiles", sorting: "sorting", additionalSorting: "additionalSorting", sortingMode: "sortingMode", loading: "loading", _rowFilter: "_rowFilter", imageResolver: "imageResolver", stickyHeader: "stickyHeader", headerFilters: "headerFilters", currentFolderId: "currentFolderId", preselectNodes: "preselectNodes", node: "node", maxItems: "maxItems", rowFilter: "rowFilter", includeFields: "includeFields", where: "where", rowStyle: "rowStyle", rowStyleClass: "rowStyleClass", filterValue: "filterValue" }, outputs: { nodeClick: "nodeClick", nodeDblClick: "nodeDblClick", folderChange: "folderChange", preview: "preview", ready: "ready", error: "error", nodeSelected: "nodeSelected", filterSelection: "filterSelection" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], ngContentSelectors: _c2, decls: 9, vars: 18, consts: [[3, "selectionMode", "data", "actions", "actionsPosition", "multiselect", "contextMenu", "rowStyle", "rowStyleClass", "loading", "display", "noPermission", "showHeader", "rowMenuCacheEnabled", "stickyHeader", "allowFiltering", "showRowContextMenu", "showRowActionsMenu", "executeRowAction", "rowClick", "rowDblClick", "row-select", "row-unselect", "sorting-changed"], ["dataTable", ""], [4, "ngIf"], [3, "currentFolderId", "value", "filterSelection"], [1, "adf-empty-list_template", "adf-empty-folder"], [1, "adf-empty-folder-this-space-is-empty"], ["fxHide.lt-md", "true", 1, "adf-empty-folder-drag-drop"], ["fxHide.lt-md", "true", 1, "adf-empty-folder-any-files-here-to-add"], [1, "adf-empty-folder-image", 3, "alt", "src"], ["class", "adf-no-permission__template", 4, "ngIf"], [1, "adf-no-permission__template"], [1, "adf-no-permission__template--text"], ["class", "adf-document-list-loading-container", 4, "ngIf"], [1, "adf-document-list-loading-container"], ["id", "adf-document-list-loading", 1, "adf-document-list-loading-margin", 3, "color", "mode"]], template: function DocumentListComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef(_c1);
        ɵngcc0.ɵɵelementStart(0, "adf-datatable", 0, 1);
        ɵngcc0.ɵɵlistener("showRowContextMenu", function DocumentListComponent_Template_adf_datatable_showRowContextMenu_0_listener($event) { return ctx.onShowRowContextMenu($event); })("showRowActionsMenu", function DocumentListComponent_Template_adf_datatable_showRowActionsMenu_0_listener($event) { return ctx.onShowRowActionsMenu($event); })("executeRowAction", function DocumentListComponent_Template_adf_datatable_executeRowAction_0_listener($event) { return ctx.onExecuteRowAction($event); })("rowClick", function DocumentListComponent_Template_adf_datatable_rowClick_0_listener($event) { return ctx.onNodeClick($event.value == null ? null : $event.value.node); })("rowDblClick", function DocumentListComponent_Template_adf_datatable_rowDblClick_0_listener($event) { return ctx.onNodeDblClick($event.value == null ? null : $event.value.node); })("row-select", function DocumentListComponent_Template_adf_datatable_row_select_0_listener($event) { return ctx.onNodeSelect($event.detail); })("row-unselect", function DocumentListComponent_Template_adf_datatable_row_unselect_0_listener($event) { return ctx.onNodeUnselect($event.detail); })("sorting-changed", function DocumentListComponent_Template_adf_datatable_sorting_changed_0_listener($event) { return ctx.onSortingChanged($event); });
        ɵngcc0.ɵɵtemplate(2, DocumentListComponent_div_2_Template, 2, 2, "div", 2);
        ɵngcc0.ɵɵelementStart(3, "adf-no-content-template");
        ɵngcc0.ɵɵtemplate(4, DocumentListComponent_ng_template_4_Template, 2, 1, "ng-template");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(5, "adf-no-permission-template");
        ɵngcc0.ɵɵtemplate(6, DocumentListComponent_ng_template_6_Template, 2, 1, "ng-template");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(7, "adf-loading-content-template");
        ɵngcc0.ɵɵtemplate(8, DocumentListComponent_ng_template_8_Template, 2, 1, "ng-template");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵclassProp("adf-datatable-gallery-thumbnails", ctx.data.thumbnails);
        ɵngcc0.ɵɵproperty("selectionMode", ctx.selectionMode)("data", ctx.data)("actions", ctx.contentActions)("actionsPosition", ctx.contentActionsPosition)("multiselect", ctx.multiselect)("contextMenu", ctx.contextMenuActions)("rowStyle", ctx.rowStyle)("rowStyleClass", ctx.rowStyleClass)("loading", ctx.loading)("display", ctx.display)("noPermission", ctx.noPermission)("showHeader", ctx.showHeader)("rowMenuCacheEnabled", false)("stickyHeader", ctx.stickyHeader)("allowFiltering", ctx.allowFiltering);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.headerFilters);
    } }, encapsulation: 2 });
DocumentListComponent.SINGLE_CLICK_NAVIGATION = 'click';
DocumentListComponent.DOUBLE_CLICK_NAVIGATION = 'dblclick';
DocumentListComponent.ctorParameters = () => [
    { type: DocumentListService },
    { type: NgZone },
    { type: ElementRef },
    { type: AppConfigService },
    { type: UserPreferencesService },
    { type: ContentService },
    { type: ThumbnailService },
    { type: AlfrescoApiService },
    { type: LockService }
];
DocumentListComponent.propDecorators = {
    columnList: [{ type: ContentChild, args: [DataColumnListComponent,] }],
    customLoadingContent: [{ type: ContentChild, args: [CustomLoadingContentTemplateDirective,] }],
    customNoPermissionsTemplate: [{ type: ContentChild, args: [CustomNoPermissionTemplateDirective,] }],
    customNoContentTemplate: [{ type: ContentChild, args: [CustomEmptyContentTemplateDirective,] }],
    includeFields: [{ type: Input }],
    where: [{ type: Input }],
    display: [{ type: Input }],
    permissionsStyle: [{ type: Input }],
    locationFormat: [{ type: Input }],
    navigate: [{ type: Input }],
    showHeader: [{ type: Input }],
    navigationMode: [{ type: Input }],
    thumbnails: [{ type: Input }],
    selectionMode: [{ type: Input }],
    multiselect: [{ type: Input }],
    contentActions: [{ type: Input }],
    contentActionsPosition: [{ type: Input }],
    contextMenuActions: [{ type: Input }],
    emptyFolderImageUrl: [{ type: Input }],
    allowDropFiles: [{ type: Input }],
    sorting: [{ type: Input }],
    additionalSorting: [{ type: Input }],
    sortingMode: [{ type: Input }],
    rowStyle: [{ type: Input }],
    rowStyleClass: [{ type: Input }],
    loading: [{ type: Input }],
    _rowFilter: [{ type: Input }],
    rowFilter: [{ type: Input }],
    imageResolver: [{ type: Input }],
    stickyHeader: [{ type: Input }],
    headerFilters: [{ type: Input }],
    filterValue: [{ type: Input }],
    currentFolderId: [{ type: Input }],
    preselectNodes: [{ type: Input }],
    node: [{ type: Input }],
    maxItems: [{ type: Input }],
    nodeClick: [{ type: Output }],
    nodeDblClick: [{ type: Output }],
    folderChange: [{ type: Output }],
    preview: [{ type: Output }],
    ready: [{ type: Output }],
    error: [{ type: Output }],
    nodeSelected: [{ type: Output }],
    filterSelection: [{ type: Output }],
    dataTable: [{ type: ViewChild, args: ['dataTable', { static: true },] }],
    onShowContextMenu: [{ type: HostListener, args: ['contextmenu', ['$event'],] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DocumentListComponent, [{
        type: Component,
        args: [{
                selector: 'adf-document-list',
                template: "<adf-datatable\n    #dataTable\n    [selectionMode]=\"selectionMode\"\n    [data]=\"data\"\n    [actions]=\"contentActions\"\n    [actionsPosition]=\"contentActionsPosition\"\n    [multiselect]=\"multiselect\"\n    [contextMenu]=\"contextMenuActions\"\n    [rowStyle]=\"rowStyle\"\n    [rowStyleClass]=\"rowStyleClass\"\n    [loading]=\"loading\"\n    [display]=\"display\"\n    [noPermission]=\"noPermission\"\n    [showHeader]=\"showHeader\"\n    [rowMenuCacheEnabled]=\"false\"\n    [stickyHeader]=\"stickyHeader\"\n    [allowFiltering]=\"allowFiltering\"\n    (showRowContextMenu)=\"onShowRowContextMenu($event)\"\n    (showRowActionsMenu)=\"onShowRowActionsMenu($event)\"\n    (executeRowAction)=\"onExecuteRowAction($event)\"\n    (rowClick)=\"onNodeClick($event.value?.node)\"\n    (rowDblClick)=\"onNodeDblClick($event.value?.node)\"\n    (row-select)=\"onNodeSelect($any($event).detail)\"\n    (row-unselect)=\"onNodeUnselect($any($event).detail)\"\n    (sorting-changed)=\"onSortingChanged($any($event))\"\n    [class.adf-datatable-gallery-thumbnails]=\"data.thumbnails\">\n\n    <div *ngIf=\"headerFilters\">\n        <adf-filter-header\n            [currentFolderId]=\"currentFolderId\"\n            [value]=\"filterValue\"\n            (filterSelection)=\"onFilterSelectionChange($event)\">\n        </adf-filter-header>\n    </div>\n\n    <adf-no-content-template>\n        <ng-template>\n            <adf-empty-list *ngIf=\"!customNoContentTemplate\">\n                <div class=\"adf-empty-list_template adf-empty-folder\">\n                    <div class=\"adf-empty-folder-this-space-is-empty\">{{'ADF-DOCUMENT-LIST.EMPTY.HEADER' | translate}}</div>\n                    <div fxHide.lt-md=\"true\" class=\"adf-empty-folder-drag-drop\">{{ 'ADF-DATATABLE.EMPTY.DRAG-AND-DROP.TITLE' | translate }}</div>\n                    <div fxHide.lt-md=\"true\" class=\"adf-empty-folder-any-files-here-to-add\">{{ 'ADF-DATATABLE.EMPTY.DRAG-AND-DROP.SUBTITLE' | translate }}</div>\n                    <img [alt]=\"'ADF-DATATABLE.EMPTY.DRAG-AND-DROP.TITLE' | translate\" class=\"adf-empty-folder-image\" [src]=\"emptyFolderImageUrl\">\n                </div>\n            </adf-empty-list>\n            <ng-content select=\"adf-custom-empty-content-template, empty-folder-content\"></ng-content>\n        </ng-template>\n    </adf-no-content-template>\n\n    <adf-no-permission-template>\n        <ng-template>\n            <div class=\"adf-no-permission__template\" *ngIf=\"!customNoPermissionsTemplate\">\n                <mat-icon>error</mat-icon>\n                <p class=\"adf-no-permission__template--text\">{{ 'ADF-DOCUMENT-LIST.NO_PERMISSION' | translate }}</p>\n            </div>\n            <ng-content select=\"adf-custom-no-permission-template, no-permission-content\"></ng-content>\n        </ng-template>\n    </adf-no-permission-template>\n\n    <adf-loading-content-template>\n        <ng-template>\n            <div class=\"adf-document-list-loading-container\" *ngIf=\"!customLoadingContent\">\n                <mat-progress-spinner\n                    id=\"adf-document-list-loading\"\n                    class=\"adf-document-list-loading-margin\"\n                    [color]=\"'primary'\"\n                    [mode]=\"'indeterminate'\">\n                </mat-progress-spinner>\n            </div>\n            <ng-content select=\"adf-custom-loading-content-template\"></ng-content>\n        </ng-template>\n    </adf-loading-content-template>\n\n</adf-datatable>\n",
                encapsulation: ViewEncapsulation.None,
                host: { class: 'adf-document-list' }
            }]
    }], function () { return [{ type: ɵngcc1.DocumentListService }, { type: ɵngcc0.NgZone }, { type: ɵngcc0.ElementRef }, { type: ɵngcc2.AppConfigService }, { type: ɵngcc2.UserPreferencesService }, { type: ɵngcc2.ContentService }, { type: ɵngcc2.ThumbnailService }, { type: ɵngcc2.AlfrescoApiService }, { type: ɵngcc2.LockService }]; }, { display: [{
            type: Input
        }], permissionsStyle: [{
            type: Input
        }], locationFormat: [{
            type: Input
        }], navigate: [{
            type: Input
        }], showHeader: [{
            type: Input
        }], navigationMode: [{
            type: Input
        }], thumbnails: [{
            type: Input
        }], selectionMode: [{
            type: Input
        }], multiselect: [{
            type: Input
        }], contentActions: [{
            type: Input
        }], contentActionsPosition: [{
            type: Input
        }], contextMenuActions: [{
            type: Input
        }], emptyFolderImageUrl: [{
            type: Input
        }], allowDropFiles: [{
            type: Input
        }], sorting: [{
            type: Input
        }], additionalSorting: [{
            type: Input
        }], sortingMode: [{
            type: Input
        }], loading: [{
            type: Input
        }], _rowFilter: [{
            type: Input
        }], imageResolver: [{
            type: Input
        }], stickyHeader: [{
            type: Input
        }], headerFilters: [{
            type: Input
        }], currentFolderId: [{
            type: Input
        }], preselectNodes: [{
            type: Input
        }], node: [{
            type: Input
        }], maxItems: [{
            type: Input
        }], nodeClick: [{
            type: Output
        }], nodeDblClick: [{
            type: Output
        }], folderChange: [{
            type: Output
        }], preview: [{
            type: Output
        }], ready: [{
            type: Output
        }], error: [{
            type: Output
        }], nodeSelected: [{
            type: Output
        }], filterSelection: [{
            type: Output
        }], rowFilter: [{
            type: Input
        }], onShowContextMenu: [{
            type: HostListener,
            args: ['contextmenu', ['$event']]
        }], columnList: [{
            type: ContentChild,
            args: [DataColumnListComponent]
        }], customLoadingContent: [{
            type: ContentChild,
            args: [CustomLoadingContentTemplateDirective]
        }], customNoPermissionsTemplate: [{
            type: ContentChild,
            args: [CustomNoPermissionTemplateDirective]
        }], customNoContentTemplate: [{
            type: ContentChild,
            args: [CustomEmptyContentTemplateDirective]
        }], includeFields: [{
            type: Input
        }], where: [{
            type: Input
        }], rowStyle: [{
            type: Input
        }], rowStyleClass: [{
            type: Input
        }], filterValue: [{
            type: Input
        }], dataTable: [{
            type: ViewChild,
            args: ['dataTable', { static: true }]
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,