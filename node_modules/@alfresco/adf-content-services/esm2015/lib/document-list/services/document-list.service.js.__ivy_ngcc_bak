import { AlfrescoApiService, ContentService, LogService } from '@alfresco/adf-core';
import { Injectable } from '@angular/core';
import { DocumentLoaderNode } from '../models/document-folder.model';
import { from, throwError, forkJoin } from 'rxjs';
import { catchError, map } from 'rxjs/operators';
import { CustomResourcesService } from './custom-resources.service';
import * as i0 from "@angular/core";
import * as i1 from "@alfresco/adf-core";
import * as i2 from "./custom-resources.service";
export class DocumentListService {
    constructor(contentService, apiService, logService, customResourcesService) {
        this.contentService = contentService;
        this.apiService = apiService;
        this.logService = logService;
        this.customResourcesService = customResourcesService;
    }
    deleteNode(nodeId) {
        return from(this.apiService.getInstance().nodes.deleteNode(nodeId));
    }
    copyNode(nodeId, targetParentId) {
        return from(this.apiService.getInstance().nodes.copyNode(nodeId, { targetParentId })).pipe(catchError((err) => this.handleError(err)));
    }
    moveNode(nodeId, targetParentId) {
        return from(this.apiService.getInstance().nodes.moveNode(nodeId, { targetParentId })).pipe(catchError((err) => this.handleError(err)));
    }
    getFolder(folder, opts, includeFields = []) {
        let rootNodeId = DocumentListService.ROOT_ID;
        if (opts && opts.rootFolderId) {
            rootNodeId = opts.rootFolderId;
        }
        const includeFieldsRequest = ['path', 'properties', 'allowableOperations', 'permissions', 'aspectNames', ...includeFields]
            .filter((element, index, array) => index === array.indexOf(element));
        const params = {
            includeSource: true,
            include: includeFieldsRequest
        };
        if (folder) {
            params.relativePath = folder;
        }
        if (opts) {
            if (opts.maxItems) {
                params.maxItems = opts.maxItems;
            }
            if (opts.skipCount) {
                params.skipCount = opts.skipCount;
            }
            if (opts.where) {
                params.where = opts.where;
            }
            if (opts.orderBy) {
                params.orderBy = opts.orderBy;
            }
        }
        return from(this.apiService.getInstance().nodes.getNodeChildren(rootNodeId, params)).pipe(catchError((err) => this.handleError(err)));
    }
    getNode(nodeId, includeFields = []) {
        const includeFieldsRequest = ['path', 'properties', 'allowableOperations', 'permissions', 'definition', ...includeFields]
            .filter((element, index, array) => index === array.indexOf(element));
        const opts = {
            includeSource: true,
            include: includeFieldsRequest
        };
        return this.contentService.getNode(nodeId, opts);
    }
    getFolderNode(nodeId, includeFields = []) {
        const includeFieldsRequest = ['path', 'properties', 'allowableOperations', 'permissions', 'aspectNames', ...includeFields]
            .filter((element, index, array) => index === array.indexOf(element));
        const opts = {
            includeSource: true,
            include: includeFieldsRequest
        };
        return from(this.apiService.getInstance().nodes.getNode(nodeId, opts)).pipe(catchError((err) => this.handleError(err)));
    }
    isCustomSourceService(nodeId) {
        return this.customResourcesService.isCustomSource(nodeId);
    }
    loadFolderByNodeId(nodeId, pagination, includeFields, where, orderBy) {
        if (this.customResourcesService.isCustomSource(nodeId)) {
            return this.customResourcesService.loadFolderByNodeId(nodeId, pagination, includeFields, where).pipe(map((result) => new DocumentLoaderNode(null, result)));
        }
        else {
            return this.retrieveDocumentNode(nodeId, pagination, includeFields, where, orderBy);
        }
    }
    retrieveDocumentNode(nodeId, pagination, includeFields, where, orderBy) {
        return forkJoin([
            this.getFolderNode(nodeId, includeFields),
            this.getFolder(null, {
                maxItems: pagination.maxItems,
                skipCount: pagination.skipCount,
                orderBy: orderBy,
                rootFolderId: nodeId,
                where: where
            }, includeFields)
        ]).pipe(map((results) => new DocumentLoaderNode(results[0], results[1])));
    }
    handleError(error) {
        this.logService.error(error);
        return throwError(error || 'Server error');
    }
}
DocumentListService.ROOT_ID = '-root-';
DocumentListService.ɵprov = i0.ɵɵdefineInjectable({ factory: function DocumentListService_Factory() { return new DocumentListService(i0.ɵɵinject(i1.ContentService), i0.ɵɵinject(i1.AlfrescoApiService), i0.ɵɵinject(i1.LogService), i0.ɵɵinject(i2.CustomResourcesService)); }, token: DocumentListService, providedIn: "root" });
DocumentListService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
DocumentListService.ctorParameters = () => [
    { type: ContentService },
    { type: AlfrescoApiService },
    { type: LogService },
    { type: CustomResourcesService }
];
//# sourceMappingURL=data:application/json;base64,