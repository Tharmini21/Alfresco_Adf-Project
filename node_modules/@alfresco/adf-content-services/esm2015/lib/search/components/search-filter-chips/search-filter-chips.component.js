/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, Inject, Input, ViewEncapsulation } from '@angular/core';
import { SearchFacetFiltersService } from '../../services/search-facet-filters.service';
import { SEARCH_QUERY_SERVICE_TOKEN } from '../../search-query-service.token';
import { SearchQueryBuilderService } from '../../services/search-query-builder.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../../services/search-facet-filters.service';
import * as ɵngcc2 from '@angular/material/chips';
import * as ɵngcc3 from '@angular/common';
import * as ɵngcc4 from './search-widget-chip/search-widget-chip.component';
import * as ɵngcc5 from './search-facet-chip/search-facet-chip.component';
import * as ɵngcc6 from '../../services/search-query-builder.service';

function SearchFilterChipsComponent_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelement(1, "adf-search-widget-chip", 3);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const category_r2 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("category", category_r2);
} }
function SearchFilterChipsComponent_ng_container_2_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelement(1, "adf-search-facet-chip", 4);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const field_r4 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("field", field_r4);
    ɵngcc0.ɵɵattribute("data-automation-id", "search-fact-chip-" + field_r4.field);
} }
function SearchFilterChipsComponent_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, SearchFilterChipsComponent_ng_container_2_ng_container_1_Template, 2, 2, "ng-container", 1);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r1.facetFiltersService.responseFacets);
} }
export class SearchFilterChipsComponent {
    constructor(queryBuilder, facetFiltersService) {
        this.queryBuilder = queryBuilder;
        this.facetFiltersService = facetFiltersService;
        this.showContextFacets = true;
    }
}
SearchFilterChipsComponent.ɵfac = function SearchFilterChipsComponent_Factory(t) { return new (t || SearchFilterChipsComponent)(ɵngcc0.ɵɵdirectiveInject(SEARCH_QUERY_SERVICE_TOKEN), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.SearchFacetFiltersService)); };
SearchFilterChipsComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: SearchFilterChipsComponent, selectors: [["adf-search-filter-chips"]], inputs: { showContextFacets: "showContextFacets" }, decls: 3, vars: 2, consts: [["aria-orientation", "horizontal"], [4, "ngFor", "ngForOf"], [4, "ngIf"], [3, "category"], [3, "field"]], template: function SearchFilterChipsComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "mat-chip-list", 0);
        ɵngcc0.ɵɵtemplate(1, SearchFilterChipsComponent_ng_container_1_Template, 2, 1, "ng-container", 1);
        ɵngcc0.ɵɵtemplate(2, SearchFilterChipsComponent_ng_container_2_Template, 2, 1, "ng-container", 2);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.queryBuilder.categories);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.facetFiltersService.responseFacets && ctx.showContextFacets);
    } }, directives: [ɵngcc2.MatChipList, ɵngcc3.NgForOf, ɵngcc3.NgIf, ɵngcc4.SearchWidgetChipComponent, ɵngcc5.SearchFacetChipComponent], encapsulation: 2 });
SearchFilterChipsComponent.ctorParameters = () => [
    { type: SearchQueryBuilderService, decorators: [{ type: Inject, args: [SEARCH_QUERY_SERVICE_TOKEN,] }] },
    { type: SearchFacetFiltersService }
];
SearchFilterChipsComponent.propDecorators = {
    showContextFacets: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SearchFilterChipsComponent, [{
        type: Component,
        args: [{
                selector: 'adf-search-filter-chips',
                template: "<mat-chip-list aria-orientation=\"horizontal\">\n    <ng-container *ngFor=\"let category of queryBuilder.categories\">\n        <adf-search-widget-chip [category]=\"category\"></adf-search-widget-chip>\n    </ng-container>\n\n    <ng-container *ngIf=\"facetFiltersService.responseFacets && showContextFacets\">\n        <ng-container *ngFor=\"let field of facetFiltersService.responseFacets\">\n            <adf-search-facet-chip [field]=\"field\" [attr.data-automation-id]=\"'search-fact-chip-' + field.field\" ></adf-search-facet-chip>\n        </ng-container>\n    </ng-container>\n</mat-chip-list>\n",
                encapsulation: ViewEncapsulation.None
            }]
    }], function () { return [{ type: ɵngcc6.SearchQueryBuilderService, decorators: [{
                type: Inject,
                args: [SEARCH_QUERY_SERVICE_TOKEN]
            }] }, { type: ɵngcc1.SearchFacetFiltersService }]; }, { showContextFacets: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VhcmNoLWZpbHRlci1jaGlwcy5jb21wb25lbnQuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL2hvbWUvdHJhdmlzL2J1aWxkL0FsZnJlc2NvL2FsZnJlc2NvLW5nMi1jb21wb25lbnRzL2xpYi9jb250ZW50LXNlcnZpY2VzL3NyYy9saWIvc2VhcmNoL2NvbXBvbmVudHMvc2VhcmNoLWZpbHRlci1jaGlwcy9zZWFyY2gtZmlsdGVyLWNoaXBzLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBRUgsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzVFLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLDZDQUE2QyxDQUFDO0FBQ3hGLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBQzlFLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLDZDQUE2QyxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBT3hGLE1BQU0sT0FBTywwQkFBMEI7QUFDdkMsSUFJSSxZQUVXLFlBQXVDLEVBQ3ZDLG1CQUE4QztBQUFJLFFBRGxELGlCQUFZLEdBQVosWUFBWSxDQUEyQjtBQUFDLFFBQ3hDLHdCQUFtQixHQUFuQixtQkFBbUIsQ0FBMkI7QUFBQyxRQUwxRCxzQkFBaUIsR0FBWSxJQUFJLENBQUM7QUFDdEMsSUFJZ0UsQ0FBQztBQUNqRTtzREFkQyxTQUFTLFNBQUMsa0JBQ1AsUUFBUSxFQUFFLHlCQUF5QixrQkFDbkM7Ozt1REFBbUQsa0JBQ25ELGFBQWEsRUFBRSxpQkFBaUIsQ0FBQztHQUFJLGNBQ3hDOzs7Ozs7OytKQUNJO0FBQUM7QUFDVSxZQVJQLHlCQUF5Qix1QkFhekIsTUFBTSxTQUFDLDBCQUEwQjtBQUNuQyxZQWhCRSx5QkFBeUI7QUFBRztBQUFHO0FBQThDLGdDQVdqRixLQUFLO0FBQ1Q7Ozs7Ozs7Ozs7Ozs7b0JBQUU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IENvbXBvbmVudCwgSW5qZWN0LCBJbnB1dCwgVmlld0VuY2Fwc3VsYXRpb24gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFNlYXJjaEZhY2V0RmlsdGVyc1NlcnZpY2UgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9zZWFyY2gtZmFjZXQtZmlsdGVycy5zZXJ2aWNlJztcbmltcG9ydCB7IFNFQVJDSF9RVUVSWV9TRVJWSUNFX1RPS0VOIH0gZnJvbSAnLi4vLi4vc2VhcmNoLXF1ZXJ5LXNlcnZpY2UudG9rZW4nO1xuaW1wb3J0IHsgU2VhcmNoUXVlcnlCdWlsZGVyU2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL3NlYXJjaC1xdWVyeS1idWlsZGVyLnNlcnZpY2UnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ2FkZi1zZWFyY2gtZmlsdGVyLWNoaXBzJyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vc2VhcmNoLWZpbHRlci1jaGlwcy5jb21wb25lbnQuaHRtbCcsXG4gICAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZVxufSlcbmV4cG9ydCBjbGFzcyBTZWFyY2hGaWx0ZXJDaGlwc0NvbXBvbmVudCB7XG4gICAgLyoqIFRvZ2dsZXMgd2hldGhlciB0byBzaG93IG9yIG5vdCB0aGUgY29udGV4dCBmYWNldCBmaWx0ZXJzLiAqL1xuICAgIEBJbnB1dCgpXG4gICAgc2hvd0NvbnRleHRGYWNldHM6IGJvb2xlYW4gPSB0cnVlO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBJbmplY3QoU0VBUkNIX1FVRVJZX1NFUlZJQ0VfVE9LRU4pXG4gICAgICAgIHB1YmxpYyBxdWVyeUJ1aWxkZXI6IFNlYXJjaFF1ZXJ5QnVpbGRlclNlcnZpY2UsXG4gICAgICAgIHB1YmxpYyBmYWNldEZpbHRlcnNTZXJ2aWNlOiBTZWFyY2hGYWNldEZpbHRlcnNTZXJ2aWNlKSB7fVxuXG59XG4iXX0=