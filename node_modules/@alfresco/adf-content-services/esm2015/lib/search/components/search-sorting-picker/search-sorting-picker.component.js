/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, ViewEncapsulation, Inject } from '@angular/core';
import { SearchQueryBuilderService } from '../../services/search-query-builder.service';
import { SEARCH_QUERY_SERVICE_TOKEN } from '../../search-query-service.token';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@alfresco/adf-core';
import * as ɵngcc2 from '../../services/search-query-builder.service';
export class SearchSortingPickerComponent {
    constructor(queryBuilder) {
        this.queryBuilder = queryBuilder;
        this.options = [];
    }
    ngOnInit() {
        this.options = this.queryBuilder.getSortingOptions();
        const primary = this.queryBuilder.getPrimarySorting();
        if (primary) {
            this.value = primary.key;
            this.ascending = primary.ascending;
        }
    }
    onValueChanged(key) {
        this.value = key;
        this.ascending = this.getSortingOrder();
        this.applySorting();
    }
    onSortingChanged(ascending) {
        this.ascending = ascending;
        this.applySorting();
    }
    findOptionByKey(key) {
        if (key) {
            return this.options.find((opt) => opt.key === key);
        }
        return null;
    }
    applySorting() {
        const option = this.findOptionByKey(this.value);
        if (option) {
            this.queryBuilder.sorting = [Object.assign(Object.assign({}, option), { ascending: this.ascending })];
            this.queryBuilder.update();
        }
    }
    getSortingOrder() {
        const option = this.findOptionByKey(this.value);
        if (option) {
            return option.ascending;
        }
        return this.queryBuilder.getPrimarySorting().ascending;
    }
}
SearchSortingPickerComponent.ɵfac = function SearchSortingPickerComponent_Factory(t) { return new (t || SearchSortingPickerComponent)(ɵngcc0.ɵɵdirectiveInject(SEARCH_QUERY_SERVICE_TOKEN)); };
SearchSortingPickerComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: SearchSortingPickerComponent, selectors: [["adf-search-sorting-picker"]], hostAttrs: [1, "adf-search-sorting-picker"], decls: 1, vars: 3, consts: [[3, "options", "selected", "ascending", "valueChange", "sortingChange"]], template: function SearchSortingPickerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "adf-sorting-picker", 0);
        ɵngcc0.ɵɵlistener("valueChange", function SearchSortingPickerComponent_Template_adf_sorting_picker_valueChange_0_listener($event) { return ctx.onValueChanged($event); })("sortingChange", function SearchSortingPickerComponent_Template_adf_sorting_picker_sortingChange_0_listener($event) { return ctx.onSortingChanged($event); });
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("options", ctx.options)("selected", ctx.value)("ascending", ctx.ascending);
    } }, directives: [ɵngcc1.SortingPickerComponent], encapsulation: 2 });
SearchSortingPickerComponent.ctorParameters = () => [
    { type: SearchQueryBuilderService, decorators: [{ type: Inject, args: [SEARCH_QUERY_SERVICE_TOKEN,] }] }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SearchSortingPickerComponent, [{
        type: Component,
        args: [{
                selector: 'adf-search-sorting-picker',
                template: "<adf-sorting-picker\n    [options]=\"options\"\n    [selected]=\"value\"\n    [ascending]=\"ascending\"\n    (valueChange)=\"onValueChanged($event)\"\n    (sortingChange)=\"onSortingChanged($event)\">\n</adf-sorting-picker>\n",
                encapsulation: ViewEncapsulation.None,
                host: { class: 'adf-search-sorting-picker' }
            }]
    }], function () { return [{ type: ɵngcc2.SearchQueryBuilderService, decorators: [{
                type: Inject,
                args: [SEARCH_QUERY_SERVICE_TOKEN]
            }] }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VhcmNoLXNvcnRpbmctcGlja2VyLmNvbXBvbmVudC5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vaG9tZS90cmF2aXMvYnVpbGQvQWxmcmVzY28vYWxmcmVzY28tbmcyLWNvbXBvbmVudHMvbGliL2NvbnRlbnQtc2VydmljZXMvc3JjL2xpYi9zZWFyY2gvY29tcG9uZW50cy9zZWFyY2gtc29ydGluZy1waWNrZXIvc2VhcmNoLXNvcnRpbmctcGlja2VyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBRUgsT0FBTyxFQUFFLFNBQVMsRUFBVSxpQkFBaUIsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDN0UsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sNkNBQTZDLENBQUM7QUFFeEYsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0sa0NBQWtDLENBQUM7Ozs7QUFROUUsTUFBTSxPQUFPLDRCQUE0QjtBQUFHLElBTXhDLFlBQXdELFlBQXVDO0FBQUksUUFBM0MsaUJBQVksR0FBWixZQUFZLENBQTJCO0FBQUMsUUFKaEcsWUFBTyxHQUE4QixFQUFFLENBQUM7QUFDNUMsSUFHc0csQ0FBQztBQUN2RyxJQUNJLFFBQVE7QUFDWixRQUFRLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO0FBQzdELFFBQ1EsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO0FBQzlELFFBQVEsSUFBSSxPQUFPLEVBQUU7QUFDckIsWUFBWSxJQUFJLENBQUMsS0FBSyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUM7QUFDckMsWUFBWSxJQUFJLENBQUMsU0FBUyxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUM7QUFDL0MsU0FBUztBQUNULElBQUksQ0FBQztBQUNMLElBQ0ksY0FBYyxDQUFDLEdBQVc7QUFDOUIsUUFBUSxJQUFJLENBQUMsS0FBSyxHQUFHLEdBQUcsQ0FBQztBQUN6QixRQUFRLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO0FBQ2hELFFBQVEsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO0FBQzVCLElBQUksQ0FBQztBQUNMLElBQ0ksZ0JBQWdCLENBQUMsU0FBa0I7QUFDdkMsUUFBUSxJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztBQUNuQyxRQUFRLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztBQUM1QixJQUFJLENBQUM7QUFDTCxJQUNZLGVBQWUsQ0FBQyxHQUFXO0FBQUksUUFDbkMsSUFBSSxHQUFHLEVBQUU7QUFDakIsWUFBWSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsR0FBRyxLQUFLLEdBQUcsQ0FBQyxDQUFDO0FBQy9ELFNBQVM7QUFDVCxRQUFRLE9BQU8sSUFBSSxDQUFDO0FBQ3BCLElBQUksQ0FBQztBQUNMLElBQ1ksWUFBWTtBQUN4QixRQUFRLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3hELFFBQVEsSUFBSSxNQUFNLEVBQUU7QUFDcEIsWUFBWSxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sR0FBRyxpQ0FDckIsTUFBTSxLQUNULFNBQVMsRUFBRSxJQUFJLENBQUMsU0FBUyxJQUMzQixDQUFDO0FBQ2YsWUFBWSxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sRUFBRSxDQUFDO0FBQ3ZDLFNBQVM7QUFDVCxJQUFJLENBQUM7QUFDTCxJQUNZLGVBQWU7QUFBSyxRQUN4QixNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUN4RCxRQUFRLElBQUksTUFBTSxFQUFFO0FBQ3BCLFlBQVksT0FBTyxNQUFNLENBQUMsU0FBUyxDQUFDO0FBQ3BDLFNBQVM7QUFDVCxRQUNRLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLFNBQVMsQ0FBQztBQUMvRCxJQUFJLENBQUM7QUFDTDt3REE3REMsU0FBUyxTQUFDLGtCQUNQLFFBQVEsRUFBRSwyQkFBMkIsa0JBQ3JDO2dNQUFxRCxrQkFDckQsYUFBYSxFQUFFLGlCQUFpQixDQUFDLElBQUksa0JBQ3JDLElBQUksRUFBRSxFQUFFLEtBQUssRUFBRSwyQkFBMkIsRUFBRSxjQUMvQzs7Ozs7OzBFQUNJO0FBQUM7QUFBc0QsWUFWbkQseUJBQXlCLHVCQWdCakIsTUFBTSxTQUFDLDBCQUEwQjtBQUFROzs7Ozs7Ozs7Ozs7a0NBQUU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0LCBWaWV3RW5jYXBzdWxhdGlvbiwgSW5qZWN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTZWFyY2hRdWVyeUJ1aWxkZXJTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvc2VhcmNoLXF1ZXJ5LWJ1aWxkZXIuc2VydmljZSc7XG5pbXBvcnQgeyBTZWFyY2hTb3J0aW5nRGVmaW5pdGlvbiB9IGZyb20gJy4uLy4uL21vZGVscy9zZWFyY2gtc29ydGluZy1kZWZpbml0aW9uLmludGVyZmFjZSc7XG5pbXBvcnQgeyBTRUFSQ0hfUVVFUllfU0VSVklDRV9UT0tFTiB9IGZyb20gJy4uLy4uL3NlYXJjaC1xdWVyeS1zZXJ2aWNlLnRva2VuJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdhZGYtc2VhcmNoLXNvcnRpbmctcGlja2VyJyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vc2VhcmNoLXNvcnRpbmctcGlja2VyLmNvbXBvbmVudC5odG1sJyxcbiAgICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lLFxuICAgIGhvc3Q6IHsgY2xhc3M6ICdhZGYtc2VhcmNoLXNvcnRpbmctcGlja2VyJyB9XG59KVxuZXhwb3J0IGNsYXNzIFNlYXJjaFNvcnRpbmdQaWNrZXJDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuXG4gICAgb3B0aW9uczogU2VhcmNoU29ydGluZ0RlZmluaXRpb25bXSA9IFtdO1xuICAgIHZhbHVlOiBzdHJpbmc7XG4gICAgYXNjZW5kaW5nOiBib29sZWFuO1xuXG4gICAgY29uc3RydWN0b3IoQEluamVjdChTRUFSQ0hfUVVFUllfU0VSVklDRV9UT0tFTikgcHJpdmF0ZSBxdWVyeUJ1aWxkZXI6IFNlYXJjaFF1ZXJ5QnVpbGRlclNlcnZpY2UpIHt9XG5cbiAgICBuZ09uSW5pdCgpIHtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gdGhpcy5xdWVyeUJ1aWxkZXIuZ2V0U29ydGluZ09wdGlvbnMoKTtcblxuICAgICAgICBjb25zdCBwcmltYXJ5ID0gdGhpcy5xdWVyeUJ1aWxkZXIuZ2V0UHJpbWFyeVNvcnRpbmcoKTtcbiAgICAgICAgaWYgKHByaW1hcnkpIHtcbiAgICAgICAgICAgIHRoaXMudmFsdWUgPSBwcmltYXJ5LmtleTtcbiAgICAgICAgICAgIHRoaXMuYXNjZW5kaW5nID0gcHJpbWFyeS5hc2NlbmRpbmc7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvblZhbHVlQ2hhbmdlZChrZXk6IHN0cmluZykge1xuICAgICAgICB0aGlzLnZhbHVlID0ga2V5O1xuICAgICAgICB0aGlzLmFzY2VuZGluZyA9IHRoaXMuZ2V0U29ydGluZ09yZGVyKCk7XG4gICAgICAgIHRoaXMuYXBwbHlTb3J0aW5nKCk7XG4gICAgfVxuXG4gICAgb25Tb3J0aW5nQ2hhbmdlZChhc2NlbmRpbmc6IGJvb2xlYW4pIHtcbiAgICAgICAgdGhpcy5hc2NlbmRpbmcgPSBhc2NlbmRpbmc7XG4gICAgICAgIHRoaXMuYXBwbHlTb3J0aW5nKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBmaW5kT3B0aW9uQnlLZXkoa2V5OiBzdHJpbmcpOiBTZWFyY2hTb3J0aW5nRGVmaW5pdGlvbiB7XG4gICAgICAgIGlmIChrZXkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMuZmluZCgob3B0KSA9PiBvcHQua2V5ID09PSBrZXkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHByaXZhdGUgYXBwbHlTb3J0aW5nKCkge1xuICAgICAgICBjb25zdCBvcHRpb24gPSB0aGlzLmZpbmRPcHRpb25CeUtleSh0aGlzLnZhbHVlKTtcbiAgICAgICAgaWYgKG9wdGlvbikge1xuICAgICAgICAgICAgdGhpcy5xdWVyeUJ1aWxkZXIuc29ydGluZyA9IFt7XG4gICAgICAgICAgICAgICAgLi4ub3B0aW9uLFxuICAgICAgICAgICAgICAgIGFzY2VuZGluZzogdGhpcy5hc2NlbmRpbmdcbiAgICAgICAgICAgIH1dO1xuICAgICAgICAgICAgdGhpcy5xdWVyeUJ1aWxkZXIudXBkYXRlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGdldFNvcnRpbmdPcmRlcigpOiBib29sZWFuIHtcbiAgICAgICAgY29uc3Qgb3B0aW9uID0gdGhpcy5maW5kT3B0aW9uQnlLZXkodGhpcy52YWx1ZSk7XG4gICAgICAgIGlmIChvcHRpb24pIHtcbiAgICAgICAgICAgIHJldHVybiBvcHRpb24uYXNjZW5kaW5nO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMucXVlcnlCdWlsZGVyLmdldFByaW1hcnlTb3J0aW5nKCkuYXNjZW5kaW5nO1xuICAgIH1cblxufVxuIl19