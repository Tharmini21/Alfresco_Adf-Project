/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { EXTENDIBLE_COMPONENT, FileUtils, NotificationService, TranslationService, UploadService, ContentService, AllowableOperationsEnum } from '@alfresco/adf-core';
import { Component, forwardRef, ViewEncapsulation, NgZone } from '@angular/core';
import { UploadBase } from './base-upload/upload-base';
export class UploadDragAreaComponent extends UploadBase {
    constructor(uploadService, translationService, notificationService, contentService, ngZone) {
        super(uploadService, translationService, ngZone);
        this.uploadService = uploadService;
        this.translationService = translationService;
        this.notificationService = notificationService;
        this.contentService = contentService;
        this.ngZone = ngZone;
    }
    onFilesDropped(files) {
        if (!this.disabled && files.length) {
            this.uploadFiles(files);
        }
    }
    onFolderEntityDropped(folder) {
        if (!this.disabled && folder.isDirectory) {
            FileUtils.flatten(folder).then((filesInfo) => {
                this.uploadFilesInfo(filesInfo);
            });
        }
    }
    showUndoNotificationBar(latestFilesAdded) {
        let messageTranslate, actionTranslate;
        messageTranslate = this.translationService.get('FILE_UPLOAD.MESSAGES.PROGRESS');
        actionTranslate = this.translationService.get('FILE_UPLOAD.ACTION.UNDO');
        this.notificationService.openSnackMessageAction(messageTranslate.value, actionTranslate.value, 3000).onAction().subscribe(() => {
            this.uploadService.cancelUpload(...latestFilesAdded);
        });
    }
    isDroppable() {
        return !this.disabled;
    }
    onUploadFiles(event) {
        event.stopPropagation();
        event.preventDefault();
        const isAllowed = this.isTargetNodeFolder(event) ?
            this.contentService.hasAllowableOperations(event.detail.data.obj.entry, AllowableOperationsEnum.CREATE)
            : this.contentService.hasAllowableOperations(event.detail.data.obj.entry, AllowableOperationsEnum.UPDATE);
        if (isAllowed) {
            if (!this.isTargetNodeFolder(event) && event.detail.files.length === 1) {
                this.updateFileVersion.emit(event);
            }
            else {
                const fileInfo = event.detail.files;
                if (this.isTargetNodeFolder(event)) {
                    const destinationFolderName = event.detail.data.obj.entry.name;
                    fileInfo.map((file) => file.relativeFolder = destinationFolderName ? destinationFolderName.concat(file.relativeFolder) : file.relativeFolder);
                }
                if (fileInfo && fileInfo.length > 0) {
                    this.uploadFilesInfo(fileInfo);
                }
            }
        }
    }
    isTargetNodeFolder(event) {
        return event.detail.data.obj && event.detail.data.obj.entry.isFolder;
    }
}
UploadDragAreaComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-upload-drag-area',
                template: "<div [adf-file-draggable]=\"isDroppable()\" class=\"adf-upload-border\"\n     (filesDropped)=\"onFilesDropped($event)\"\n     (folderEntityDropped)=\"onFolderEntityDropped($event)\"\n     (upload-files)=\"onUploadFiles($any($event))\"\n     dropzone=\"\" webkitdropzone=\"*\" #droparea>\n    <ng-content></ng-content>\n</div>\n",
                host: { 'class': 'adf-upload-drag-area' },
                viewProviders: [
                    { provide: EXTENDIBLE_COMPONENT, useExisting: forwardRef(() => UploadDragAreaComponent) }
                ],
                encapsulation: ViewEncapsulation.None
            },] }
];
UploadDragAreaComponent.ctorParameters = () => [
    { type: UploadService },
    { type: TranslationService },
    { type: NotificationService },
    { type: ContentService },
    { type: NgZone }
];
//# sourceMappingURL=data:application/json;base64,