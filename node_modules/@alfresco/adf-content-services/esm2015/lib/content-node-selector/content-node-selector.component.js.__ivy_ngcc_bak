/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, Inject, ViewEncapsulation } from '@angular/core';
import { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';
import { TranslationService, NotificationService, AllowableOperationsEnum, ContentService, UploadService } from '@alfresco/adf-core';
import { NodeAction } from '../document-list/models/node-action.enum';
export class ContentNodeSelectorComponent {
    constructor(translation, contentService, notificationService, uploadService, dialog, data) {
        var _a;
        this.translation = translation;
        this.contentService = contentService;
        this.notificationService = notificationService;
        this.uploadService = uploadService;
        this.dialog = dialog;
        this.data = data;
        this.showingSearch = false;
        this.hasAllowableOperations = false;
        this.isLoading = true;
        this.selectedTabIndex = 0;
        this.uploadStarted = false;
        this.emptyFolderImageUrl = './assets/images/empty_doc_lib.svg';
        this.action = (_a = data.actionName) !== null && _a !== void 0 ? _a : NodeAction.CHOOSE;
        this.buttonActionName = `NODE_SELECTOR.${this.action}`;
        this.title = data.title;
        this.currentDirectoryId = data.currentFolderId;
    }
    ngOnInit() {
        this.dialog.keydownEvents().subscribe(event => {
            if (event.keyCode === 27) {
                event.preventDefault();
                event.stopImmediatePropagation();
                this.close();
            }
        });
        this.dialog.backdropClick().subscribe(() => {
            this.close();
        });
        this.uploadService.fileUploadStarting.subscribe(() => {
            this.uploadStarted = true;
        });
    }
    close() {
        this.dialog.close();
    }
    onSelect(nodeList) {
        this.chosenNode = nodeList;
    }
    onSiteChange(siteTitle) {
        this.updateTitle(siteTitle);
    }
    onNavigationChange(pathElement) {
        this.currentDirectoryId = pathElement.value.id;
        this.isLoading = true;
    }
    onClick() {
        this.data.select.next(this.chosenNode);
        this.close();
    }
    updateTitle(siteTitle) {
        if (this.action === NodeAction.CHOOSE && siteTitle) {
            this.title = this.getTitleTranslation(this.action, siteTitle);
        }
    }
    getTitleTranslation(action, name) {
        return this.translation.instant(`NODE_SELECTOR.${action}_ITEM`, { name: this.translation.instant(name) });
    }
    getSelectedCount() {
        var _a;
        return ((_a = this.chosenNode) === null || _a === void 0 ? void 0 : _a.length) || 0;
    }
    isCounterVisible() {
        return this.action === NodeAction.ATTACH || this.action === NodeAction.CHOOSE;
    }
    isMultipleSelection() {
        return this.data.selectionMode === 'multiple';
    }
    onError(error) {
        this.notificationService.showError(error);
    }
    isChooseButtonDisabled() {
        return this.uploadService.isUploading() || !this.hasNodeSelected();
    }
    hasNodeSelected() {
        var _a;
        return ((_a = this.chosenNode) === null || _a === void 0 ? void 0 : _a.length) > 0;
    }
    onShowingSearch(value) {
        this.showingSearch = value;
    }
    onCurrentFolder(currentFolder) {
        this.hasAllowableOperations = this.contentService.hasAllowableOperations(currentFolder, AllowableOperationsEnum.CREATE);
        this.breadcrumbFolderNode = currentFolder;
    }
    isNotAllowedToUpload() {
        return this.showingSearch || !this.hasAllowableOperations;
    }
    onFolderLoaded() {
        this.isLoading = false;
    }
    onTabSelectionChange(tabIndex) {
        this.selectedTabIndex = tabIndex;
    }
    isFileServerTabSelected() {
        return this.selectedTabIndex === 0;
    }
    isLocalUploadTabSelected() {
        return this.selectedTabIndex === 1;
    }
    isUploadEnabled() {
        return this.canPerformLocalUpload() && this.isLocalUploadTabSelected();
    }
    canPerformLocalUpload() {
        var _a;
        return (_a = this.data) === null || _a === void 0 ? void 0 : _a.showLocalUploadButton;
    }
    getWarningMessage() {
        return this.showingSearch ? 'NODE_SELECTOR.UPLOAD_BUTTON_SEARCH_WARNING_MESSAGE' :
            (this.hasNoPermissionToUpload() ? 'NODE_SELECTOR.UPLOAD_BUTTON_PERMISSION_WARNING_MESSAGE' : '');
    }
    hasNoPermissionToUpload() {
        return (!this.hasAllowableOperations && !this.showingSearch) && !this.isLoading;
    }
    hasUploadError() {
        return this.showingSearch || this.hasNoPermissionToUpload();
    }
}
ContentNodeSelectorComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-content-node-selector',
                template: "<header\n    mat-dialog-title\n    data-automation-id=\"content-node-selector-title\">\n    <h2>{{title}}</h2>\n</header>\n\n<mat-tab-group class=\"adf-content-node-selector-dialog-content\"\n               mat-align-tabs=\"start\"\n               (selectedIndexChange)=\"onTabSelectionChange($event)\"\n               [class.adf-content-node-selector-headless-tabs]=\"!canPerformLocalUpload()\">\n    <mat-tab label=\"{{ 'NODE_SELECTOR.REPOSITORY' | translate }}\">\n            <adf-content-node-selector-panel\n                [currentFolderId]=\"data?.currentFolderId\"\n                [restrictRootToCurrentFolderId]=\"data?.restrictRootToCurrentFolderId\"\n                [dropdownHideMyFiles]=\"data?.dropdownHideMyFiles\"\n                [dropdownSiteList]=\"data?.dropdownSiteList\"\n                [rowFilter]=\"data?.rowFilter\"\n                [imageResolver]=\"data?.imageResolver\"\n                [isSelectionValid]=\"data?.isSelectionValid\"\n                [breadcrumbTransform]=\"data?.breadcrumbTransform\"\n                [excludeSiteContent]=\"data?.excludeSiteContent\"\n                [selectionMode]=\"data?.selectionMode\"\n                [where]=\"data?.where\"\n                [showSearch]=\"data?.showSearch\"\n                [showDropdownSiteList]=\"data?.showDropdownSiteList\"\n                [showFilesInResult]=\"data?.showFilesInResult\"\n                [showNodeCounter]=\"isCounterVisible()\"\n                (currentFolder)=\"onCurrentFolder($event)\"\n                (folderLoaded)=\"onFolderLoaded()\"\n                (select)=\"onSelect($event)\"\n                (showingSearch)=\"onShowingSearch($event)\"\n                (siteChange)=\"onSiteChange($event)\"\n                (navigationChange)=\"onNavigationChange($event)\">\n            </adf-content-node-selector-panel>\n    </mat-tab>\n    <mat-tab *ngIf=\"canPerformLocalUpload()\"\n             [disabled]=\"isNotAllowedToUpload()\">\n        <div class=\"adf-content-node-selector-local-upload-container\">\n            <div class=\"adf-content-node-selector-local-upload-header\">\n                <adf-toolbar>\n                    <adf-toolbar-title>\n                        <adf-dropdown-breadcrumb\n                            class=\"adf-content-node-selector-content-breadcrumb\"\n                            [folderNode]=\"breadcrumbFolderNode\"\n                            [rootId]=\"data?.currentFolderId\"\n                            [readOnly]=\"true\"\n                            data-automation-id=\"content-node-selector-upload-breadcrumb\"\n                        ></adf-dropdown-breadcrumb>\n                        <ng-container *ngIf=\"isCounterVisible()\" [adf-node-counter]=\"getSelectedCount()\"></ng-container>\n                    </adf-toolbar-title>\n                </adf-toolbar>\n                <ng-template mat-tab-label>\n                    {{ 'NODE_SELECTOR.UPLOAD_FROM_DEVICE' | translate }}\n                    <mat-icon *ngIf=\"hasUploadError()\"\n                              data-automation-id=\"adf-content-node-selector-disabled-tab-info-icon\"\n                              matTooltip=\"{{ getWarningMessage() | translate }}\">info\n                    </mat-icon>\n                </ng-template>\n            </div>\n            <div class=\"adf-content-node-selector-local-upload-content\">\n                <adf-upload-drag-area [rootFolderId]=\"currentDirectoryId\">\n                    <div [class.adf-upload-dialog-container]=\"uploadStarted\">\n                        <adf-file-uploading-dialog [alwaysVisible]=\"true\"></adf-file-uploading-dialog>\n                    </div>\n                    <adf-empty-list data-automation-id=\"adf-empty-list\" *ngIf=\"!uploadStarted\">\n                        <div class=\"adf-empty-list_template adf-empty-folder\">\n                            <div fxHide.lt-md=\"true\"\n                                 class=\"adf-empty-folder-drag-drop\">{{ 'ADF-DATATABLE.EMPTY.DRAG-AND-DROP.TITLE' | translate }}</div>\n                            <div fxHide.lt-md=\"true\"\n                                 class=\"adf-empty-folder-any-files-here-to-add\">{{ 'ADF-DATATABLE.EMPTY.DRAG-AND-DROP.SUBTITLE' | translate }}</div>\n                            <img [alt]=\"'ADF-DATATABLE.EMPTY.DRAG-AND-DROP.TITLE' | translate\" class=\"adf-empty-folder-image\"\n                                 [src]=\"emptyFolderImageUrl\">\n                        </div>\n                    </adf-empty-list>\n                </adf-upload-drag-area>\n            </div>\n        </div>\n    </mat-tab>\n</mat-tab-group>\n\n<mat-dialog-actions>\n    <div>\n        <ng-container *ngIf=\"isUploadEnabled()\">\n            <adf-upload-button\n                [staticTitle]=\"'FORM.FIELD.UPLOAD' | translate \"\n                [multipleFiles]=\"isMultipleSelection()\"\n                [rootFolderId]=\"currentDirectoryId\"\n                [disabled]=\"isNotAllowedToUpload()\"\n                (error)=\"onError($event)\">\n            </adf-upload-button>\n        </ng-container>\n    </div>\n    <div>\n        <button\n            mat-button\n            (click)=\"close()\"\n            data-automation-id=\"content-node-selector-actions-cancel\">{{ 'NODE_SELECTOR.CANCEL' | translate }}\n        </button>\n\n        <button mat-button\n                [disabled]=\"isChooseButtonDisabled()\"\n                class=\"adf-choose-action\"\n                (click)=\"onClick()\"\n                data-automation-id=\"content-node-selector-actions-choose\">{{ buttonActionName | translate }}\n        </button>\n    </div>\n</mat-dialog-actions>\n",
                encapsulation: ViewEncapsulation.None
            },] }
];
ContentNodeSelectorComponent.ctorParameters = () => [
    { type: TranslationService },
    { type: ContentService },
    { type: NotificationService },
    { type: UploadService },
    { type: MatDialogRef },
    { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_DATA,] }] }
];
//# sourceMappingURL=data:application/json;base64,