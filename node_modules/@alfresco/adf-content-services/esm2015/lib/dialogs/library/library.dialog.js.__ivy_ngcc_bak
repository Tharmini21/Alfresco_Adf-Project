/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { __awaiter } from "tslib";
import { Subject } from 'rxjs';
import { Component, Output, EventEmitter, ViewEncapsulation } from '@angular/core';
import { FormBuilder, Validators } from '@angular/forms';
import { MatDialogRef } from '@angular/material/dialog';
import { AlfrescoApiService, SitesService } from '@alfresco/adf-core';
import { debounceTime, finalize, mergeMap, takeUntil } from 'rxjs/operators';
export class LibraryDialogComponent {
    constructor(alfrescoApiService, sitesService, formBuilder, dialog) {
        this.alfrescoApiService = alfrescoApiService;
        this.sitesService = sitesService;
        this.formBuilder = formBuilder;
        this.dialog = dialog;
        this.error = new EventEmitter();
        this.success = new EventEmitter();
        this.onDestroy$ = new Subject();
        this.createTitle = 'LIBRARY.DIALOG.CREATE_TITLE';
        this.libraryTitleExists = false;
        this.visibilityOptions = [
            { value: 'PUBLIC', label: 'LIBRARY.VISIBILITY.PUBLIC', disabled: false },
            { value: 'PRIVATE', label: 'LIBRARY.VISIBILITY.PRIVATE', disabled: false },
            {
                value: 'MODERATED',
                label: 'LIBRARY.VISIBILITY.MODERATED',
                disabled: false
            }
        ];
        this.disableCreateButton = false;
    }
    ngOnInit() {
        const validators = {
            id: [
                Validators.required,
                Validators.maxLength(72),
                this.forbidSpecialCharacters
            ],
            title: [
                Validators.required,
                this.forbidOnlySpaces,
                Validators.minLength(2),
                Validators.maxLength(256)
            ],
            description: [Validators.maxLength(512)]
        };
        this.form = this.formBuilder.group({
            title: [null, validators.title],
            id: [null, validators.id, this.createSiteIdValidator()],
            description: ['', validators.description]
        });
        this.visibilityOption = this.visibilityOptions[0].value;
        this.form.controls['title'].valueChanges
            .pipe(debounceTime(500), mergeMap((title) => this.checkLibraryNameExists(title), (title) => title), takeUntil(this.onDestroy$))
            .subscribe((title) => {
            if (!this.form.controls['id'].dirty && this.canGenerateId(title)) {
                this.form.patchValue({ id: this.sanitize(title.trim()) });
                this.form.controls['id'].markAsTouched();
            }
        });
    }
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
    get title() {
        const { title } = this.form.value;
        return (title || '').trim();
    }
    get id() {
        const { id } = this.form.value;
        return (id || '').trim();
    }
    get description() {
        const { description } = this.form.value;
        return (description || '').trim();
    }
    get visibility() {
        return this.visibilityOption || '';
    }
    submit() {
        const { form, dialog } = this;
        if (!form.valid) {
            return;
        }
        this.disableCreateButton = true;
        this.create().pipe(finalize(() => this.disableCreateButton = false)).subscribe((node) => {
            this.success.emit(node);
            dialog.close(node);
        }, (error) => this.handleError(error));
    }
    visibilityChangeHandler(event) {
        this.visibilityOption = event.value;
    }
    create() {
        const { title, id, description, visibility } = this;
        const siteBody = {
            id,
            title,
            description,
            visibility
        };
        return this.sitesService.createSite(siteBody);
    }
    sanitize(input) {
        return input.replace(/[\s\s]+/g, '-').replace(/[^A-Za-z0-9-]/g, '');
    }
    canGenerateId(title) {
        return Boolean(title.replace(/[^A-Za-z0-9-]/g, '').length);
    }
    handleError(error) {
        try {
            const { error: { statusCode } } = JSON.parse(error.message);
            if (statusCode === 409) {
                this.form.controls['id'].setErrors({
                    message: 'LIBRARY.ERRORS.CONFLICT'
                });
            }
        }
        catch (error) {
        }
        return error;
    }
    checkLibraryNameExists(libraryTitle) {
        return __awaiter(this, void 0, void 0, function* () {
            let entries = [];
            try {
                entries = (yield this.findLibraryByTitle(libraryTitle)).list.entries;
            }
            catch (_a) {
                entries = [];
            }
            if (entries.length) {
                this.libraryTitleExists = entries[0].entry.title.toLowerCase() === libraryTitle.toLowerCase();
            }
            else {
                this.libraryTitleExists = false;
            }
        });
    }
    findLibraryByTitle(libraryTitle) {
        return this.alfrescoApiService
            .getInstance()
            .core.queriesApi.findSites(libraryTitle, {
            maxItems: 1,
            fields: ['title']
        });
    }
    forbidSpecialCharacters({ value }) {
        if (value === null || value.length === 0) {
            return null;
        }
        const validCharacters = /[^A-Za-z0-9-]/;
        const isValid = !validCharacters.test(value);
        return isValid
            ? null
            : {
                message: 'LIBRARY.ERRORS.ILLEGAL_CHARACTERS'
            };
    }
    forbidOnlySpaces({ value }) {
        if (value === null || value.length === 0) {
            return null;
        }
        const isValid = !!(value || '').trim();
        return isValid
            ? null
            : {
                message: 'LIBRARY.ERRORS.ONLY_SPACES'
            };
    }
    createSiteIdValidator() {
        let timer;
        return (control) => {
            if (timer) {
                clearTimeout(timer);
            }
            return new Promise((resolve) => {
                timer = setTimeout(() => {
                    return this.sitesService.getSite(control.value).subscribe(() => resolve({ message: 'LIBRARY.ERRORS.EXISTENT_SITE' }), () => resolve(null));
                }, 300);
            });
        };
    }
}
LibraryDialogComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-library-dialog',
                template: "<h2 mat-dialog-title>{{ createTitle | translate }}</h2>\n\n<mat-dialog-content>\n  <form novalidate [formGroup]=\"form\" (submit)=\"submit()\">\n    <mat-form-field>\n      <input\n        placeholder=\"{{ 'LIBRARY.DIALOG.FORM.NAME' | translate }}\"\n        required\n        matInput\n        autofocus\n        formControlName=\"title\"\n        autocomplete=\"off\"\n      />\n\n      <mat-hint *ngIf=\"libraryTitleExists\">{{\n        'LIBRARY.HINTS.SITE_TITLE_EXISTS' | translate\n      }}</mat-hint>\n      <mat-error *ngIf=\"form.controls['title'].hasError('maxlength')\">\n        {{ 'LIBRARY.ERRORS.TITLE_TOO_LONG' | translate }}\n      </mat-error>\n\n      <mat-error *ngIf=\"form.controls['title'].hasError('minlength')\">\n        {{ 'LIBRARY.ERRORS.TITLE_TOO_SHORT' | translate }}\n      </mat-error>\n\n      <mat-error *ngIf=\"form.controls['title'].errors?.message\">\n        {{ form.controls['title'].errors?.message | translate }}\n      </mat-error>\n    </mat-form-field>\n\n    <mat-form-field>\n      <input\n        required\n        placeholder=\"{{ 'LIBRARY.DIALOG.FORM.SITE_ID' | translate }}\"\n        matInput\n        formControlName=\"id\"\n        autocomplete=\"off\"\n      />\n\n      <mat-error *ngIf=\"form.controls['id'].errors?.message\">\n        {{ form.controls['id'].errors?.message | translate }}\n      </mat-error>\n\n      <mat-error *ngIf=\"form.controls['id'].hasError('maxlength')\">\n        {{ 'LIBRARY.ERRORS.ID_TOO_LONG' | translate }}\n      </mat-error>\n    </mat-form-field>\n\n    <mat-form-field>\n      <textarea\n        matInput\n        placeholder=\"{{ 'LIBRARY.DIALOG.FORM.DESCRIPTION' | translate }}\"\n        rows=\"3\"\n        formControlName=\"description\"\n      ></textarea>\n\n      <mat-error *ngIf=\"form.controls['description'].hasError('maxlength')\">\n        {{ 'LIBRARY.ERRORS.DESCRIPTION_TOO_LONG' | translate }}\n      </mat-error>\n    </mat-form-field>\n\n    <mat-radio-group\n      [ngModelOptions]=\"{ standalone: true }\"\n      [(ngModel)]=\"visibilityOption\"\n      (change)=\"visibilityChangeHandler($event)\"\n    >\n      <mat-radio-button\n        color=\"primary\"\n        [disabled]=\"option.disabled\"\n        *ngFor=\"let option of visibilityOptions\"\n        [attr.data-automation-id]=\"option.value\"\n        [value]=\"option.value\"\n        [checked]=\"visibilityOption.value === option.value\"\n      >\n        {{ option.label | translate }}\n      </mat-radio-button>\n    </mat-radio-group>\n  </form>\n</mat-dialog-content>\n\n<mat-dialog-actions class=\"adf-action-buttons\">\n  <button mat-button mat-dialog-close data-automation-id=\"cancel-library-id\">\n    {{ 'LIBRARY.DIALOG.CANCEL' | translate }}\n  </button>\n\n  <button\n    color=\"primary\"\n    mat-button\n    (click)=\"submit()\"\n    [disabled]=\"!form.valid || disableCreateButton\"\n    data-automation-id=\"create-library-id\"\n  >\n    {{ 'LIBRARY.DIALOG.CREATE' | translate }}\n  </button>\n</mat-dialog-actions>\n",
                encapsulation: ViewEncapsulation.None,
                host: { class: 'adf-library-dialog' },
                styles: [".adf-library-dialog .mat-radio-group{display:flex;flex-direction:column;margin:0 0 20px}.adf-library-dialog .mat-radio-group .mat-radio-button{margin:10px 0}.adf-library-dialog .mat-form-field{width:100%}.adf-library-dialog mat-form-field{padding-top:20px}.adf-library-dialog .adf-action-buttons{display:flex;flex-direction:row;justify-content:flex-end}.adf-library-dialog .adf-action-buttons .mat-button{text-transform:uppercase}"]
            },] }
];
LibraryDialogComponent.ctorParameters = () => [
    { type: AlfrescoApiService },
    { type: SitesService },
    { type: FormBuilder },
    { type: MatDialogRef }
];
LibraryDialogComponent.propDecorators = {
    error: [{ type: Output }],
    success: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,