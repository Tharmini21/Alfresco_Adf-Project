/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { EventEmitter, ElementRef, OnChanges, TemplateRef, OnInit, OnDestroy } from '@angular/core';
import { Node, NodeEntry, VersionEntry } from '@alfresco/js-api';
import { BaseEvent } from '../../events';
import { AlfrescoApiService } from '../../services/alfresco-api.service';
import { LogService } from '../../services/log.service';
import { ViewerMoreActionsComponent } from './viewer-more-actions.component';
import { ViewerOpenWithComponent } from './viewer-open-with.component';
import { ViewerSidebarComponent } from './viewer-sidebar.component';
import { ViewerToolbarComponent } from './viewer-toolbar.component';
import { ViewUtilService } from '../services/view-util.service';
import { AppExtensionService, ViewerExtensionRef } from '@alfresco/adf-extensions';
import { MatDialog } from '@angular/material/dialog';
import { ContentService } from '../../services/content.service';
import { UploadService } from '../../services/upload.service';
export declare class ViewerComponent implements OnChanges, OnInit, OnDestroy {
    private apiService;
    private viewUtilService;
    private logService;
    private extensionService;
    private contentService;
    private uploadService;
    private el;
    dialog: MatDialog;
    toolbar: ViewerToolbarComponent;
    sidebar: ViewerSidebarComponent;
    mnuOpenWith: ViewerOpenWithComponent;
    mnuMoreActions: ViewerMoreActionsComponent;
    urlFile: string;
    urlFileViewer: string;
    blobFile: Blob;
    nodeId: string;
    versionId: string;
    sharedLinkId: string;
    overlayMode: boolean;
    showViewer: boolean;
    showToolbar: boolean;
    displayName: string;
    allowGoBack: boolean;
    allowDownload: boolean;
    allowPrint: boolean;
    allowFullScreen: boolean;
    allowNavigate: boolean;
    canNavigateBefore: boolean;
    canNavigateNext: boolean;
    allowLeftSidebar: boolean;
    allowRightSidebar: boolean;
    allowThumbnails: boolean;
    showRightSidebar: boolean;
    showLeftSidebar: boolean;
    sidebarRightTemplate: TemplateRef<any>;
    sidebarLeftTemplate: TemplateRef<any>;
    thumbnailsTemplate: TemplateRef<any>;
    mimeType: string;
    fileName: string;
    maxRetries: number;
    goBack: EventEmitter<BaseEvent<any>>;
    print: EventEmitter<BaseEvent<any>>;
    showViewerChange: EventEmitter<boolean>;
    extensionChange: EventEmitter<string>;
    navigateBefore: EventEmitter<MouseEvent | KeyboardEvent>;
    navigateNext: EventEmitter<MouseEvent | KeyboardEvent>;
    invalidSharedLink: EventEmitter<any>;
    TRY_TIMEOUT: number;
    viewerType: string;
    isLoading: boolean;
    nodeEntry: NodeEntry;
    versionEntry: VersionEntry;
    extensionTemplates: {
        template: TemplateRef<any>;
        isVisible: boolean;
    }[];
    externalExtensions: string[];
    urlFileContent: string;
    otherMenu: any;
    extension: string;
    sidebarRightTemplateContext: {
        node: Node;
    };
    sidebarLeftTemplateContext: {
        node: Node;
    };
    fileTitle: string;
    viewerExtensions: Array<ViewerExtensionRef>;
    readOnly: boolean;
    private cacheBusterNumber;
    cacheTypeForContent: string;
    private extensions;
    private mimeTypes;
    private onDestroy$;
    private shouldCloseViewer;
    private keyDown$;
    constructor(apiService: AlfrescoApiService, viewUtilService: ViewUtilService, logService: LogService, extensionService: AppExtensionService, contentService: ContentService, uploadService: UploadService, el: ElementRef, dialog: MatDialog);
    isSourceDefined(): boolean;
    ngOnInit(): void;
    private loadExtensions;
    private getNodeVersionProperty;
    ngOnDestroy(): void;
    private onNodeUpdated;
    ngOnChanges(): void;
    private setUpBlobData;
    private setUpUrlFile;
    private setUpNodeFile;
    private setUpSharedLinkFile;
    toggleSidebar(): void;
    toggleLeftSidebar(): void;
    private getDisplayName;
    scrollTop(): void;
    getViewerTypeByMimeType(mimeType: string): string;
    getViewerTypeByExtension(extension: string): "custom" | "media" | "image" | "text" | "unknown" | "pdf";
    onBackButtonClick(): void;
    onNavigateBeforeClick(event: MouseEvent | KeyboardEvent): void;
    onNavigateNextClick(event: MouseEvent | KeyboardEvent): void;
    close(): void;
    getFilenameFromUrl(url: string): string;
    getFileExtension(fileName: string): string;
    isCustomViewerExtension(extension: string): boolean;
    handleKeyboardEvent(event: KeyboardEvent): void;
    printContent(): void;
    enterFullScreen(): void;
    private displaySharedLinkRendition;
    checkExtensions(extensionAllowed: any): any;
    onSubmitFile(newImageBlob: Blob): void;
    onUnsupportedFile(): void;
    private closeOverlayManager;
    private generateCacheBusterNumber;
}
