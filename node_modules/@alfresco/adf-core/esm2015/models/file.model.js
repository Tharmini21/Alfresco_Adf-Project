/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
export class FileUploadOptions {
}
export var FileUploadStatus;
(function (FileUploadStatus) {
    FileUploadStatus[FileUploadStatus["Pending"] = 0] = "Pending";
    FileUploadStatus[FileUploadStatus["Complete"] = 1] = "Complete";
    FileUploadStatus[FileUploadStatus["Starting"] = 2] = "Starting";
    FileUploadStatus[FileUploadStatus["Progress"] = 3] = "Progress";
    FileUploadStatus[FileUploadStatus["Cancelled"] = 4] = "Cancelled";
    FileUploadStatus[FileUploadStatus["Aborted"] = 5] = "Aborted";
    FileUploadStatus[FileUploadStatus["Error"] = 6] = "Error";
    FileUploadStatus[FileUploadStatus["Deleted"] = 7] = "Deleted";
})(FileUploadStatus || (FileUploadStatus = {}));
export class FileModel {
    constructor(file, options, id) {
        this.status = FileUploadStatus.Pending;
        this.file = file;
        this.id = id;
        this.name = file.name;
        this.size = file.size;
        this.data = null;
        this.errorCode = null;
        this.progress = {
            loaded: 0,
            total: 0,
            percent: 0
        };
        this.options = Object.assign({}, {
            newVersion: false
        }, options);
    }
    get extension() {
        return this.name.slice((Math.max(0, this.name.lastIndexOf('.')) || Infinity) + 1);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZS5tb2RlbC5qcyIsInNvdXJjZVJvb3QiOiIvaG9tZS90cmF2aXMvYnVpbGQvQWxmcmVzY28vYWxmcmVzY28tbmcyLWNvbXBvbmVudHMvbGliL2NvcmUvIiwic291cmNlcyI6WyJtb2RlbHMvZmlsZS5tb2RlbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7O0dBZUc7QUFVSCxNQUFNLE9BQU8saUJBQWlCO0NBVzdCO0FBRUQsTUFBTSxDQUFOLElBQVksZ0JBU1g7QUFURCxXQUFZLGdCQUFnQjtJQUN4Qiw2REFBVyxDQUFBO0lBQ1gsK0RBQVksQ0FBQTtJQUNaLCtEQUFZLENBQUE7SUFDWiwrREFBWSxDQUFBO0lBQ1osaUVBQWEsQ0FBQTtJQUNiLDZEQUFXLENBQUE7SUFDWCx5REFBUyxDQUFBO0lBQ1QsNkRBQVcsQ0FBQTtBQUNmLENBQUMsRUFUVyxnQkFBZ0IsS0FBaEIsZ0JBQWdCLFFBUzNCO0FBRUQsTUFBTSxPQUFPLFNBQVM7SUFZbEIsWUFBWSxJQUFVLEVBQUUsT0FBMkIsRUFBRSxFQUFXO1FBTmhFLFdBQU0sR0FBcUIsZ0JBQWdCLENBQUMsT0FBTyxDQUFDO1FBT2hELElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQ2IsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO1FBQ3RCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztRQUN0QixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNqQixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztRQUV0QixJQUFJLENBQUMsUUFBUSxHQUFHO1lBQ1osTUFBTSxFQUFFLENBQUM7WUFDVCxLQUFLLEVBQUUsQ0FBQztZQUNSLE9BQU8sRUFBRSxDQUFDO1NBQ2IsQ0FBQztRQUVGLElBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUU7WUFDN0IsVUFBVSxFQUFFLEtBQUs7U0FDcEIsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUNoQixDQUFDO0lBRUQsSUFBSSxTQUFTO1FBQ1QsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDdEYsQ0FBQztDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgQXNzb2NDaGlsZEJvZHksIEFzc29jaWF0aW9uQm9keSB9IGZyb20gJ0BhbGZyZXNjby9qcy1hcGknO1xuXG5leHBvcnQgaW50ZXJmYWNlIEZpbGVVcGxvYWRQcm9ncmVzcyB7XG4gICAgbG9hZGVkOiBudW1iZXI7XG4gICAgdG90YWw6IG51bWJlcjtcbiAgICBwZXJjZW50OiBudW1iZXI7XG59XG5cbmV4cG9ydCBjbGFzcyBGaWxlVXBsb2FkT3B0aW9ucyB7XG4gICAgY29tbWVudD86IHN0cmluZztcbiAgICBuZXdWZXJzaW9uPzogYm9vbGVhbjtcbiAgICBtYWpvclZlcnNpb24/OiBib29sZWFuO1xuICAgIHBhcmVudElkPzogc3RyaW5nO1xuICAgIHBhdGg/OiBzdHJpbmc7XG4gICAgbm9kZVR5cGU/OiBzdHJpbmc7XG4gICAgcHJvcGVydGllcz86IGFueTtcbiAgICBhc3NvY2lhdGlvbj86IGFueTtcbiAgICBzZWNvbmRhcnlDaGlsZHJlbj86IEFzc29jQ2hpbGRCb2R5W107XG4gICAgdGFyZ2V0cz86IEFzc29jaWF0aW9uQm9keVtdO1xufVxuXG5leHBvcnQgZW51bSBGaWxlVXBsb2FkU3RhdHVzIHtcbiAgICBQZW5kaW5nID0gMCxcbiAgICBDb21wbGV0ZSA9IDEsXG4gICAgU3RhcnRpbmcgPSAyLFxuICAgIFByb2dyZXNzID0gMyxcbiAgICBDYW5jZWxsZWQgPSA0LFxuICAgIEFib3J0ZWQgPSA1LFxuICAgIEVycm9yID0gNixcbiAgICBEZWxldGVkID0gN1xufVxuXG5leHBvcnQgY2xhc3MgRmlsZU1vZGVsIHtcbiAgICByZWFkb25seSBuYW1lOiBzdHJpbmc7XG4gICAgcmVhZG9ubHkgc2l6ZTogbnVtYmVyO1xuICAgIHJlYWRvbmx5IGZpbGU6IEZpbGU7XG5cbiAgICBpZDogc3RyaW5nO1xuICAgIHN0YXR1czogRmlsZVVwbG9hZFN0YXR1cyA9IEZpbGVVcGxvYWRTdGF0dXMuUGVuZGluZztcbiAgICBlcnJvckNvZGU6IG51bWJlcjtcbiAgICBwcm9ncmVzczogRmlsZVVwbG9hZFByb2dyZXNzO1xuICAgIG9wdGlvbnM6IEZpbGVVcGxvYWRPcHRpb25zO1xuICAgIGRhdGE6IGFueTtcblxuICAgIGNvbnN0cnVjdG9yKGZpbGU6IEZpbGUsIG9wdGlvbnM/OiBGaWxlVXBsb2FkT3B0aW9ucywgaWQ/OiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5maWxlID0gZmlsZTtcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xuICAgICAgICB0aGlzLm5hbWUgPSBmaWxlLm5hbWU7XG4gICAgICAgIHRoaXMuc2l6ZSA9IGZpbGUuc2l6ZTtcbiAgICAgICAgdGhpcy5kYXRhID0gbnVsbDtcbiAgICAgICAgdGhpcy5lcnJvckNvZGUgPSBudWxsO1xuXG4gICAgICAgIHRoaXMucHJvZ3Jlc3MgPSB7XG4gICAgICAgICAgICBsb2FkZWQ6IDAsXG4gICAgICAgICAgICB0b3RhbDogMCxcbiAgICAgICAgICAgIHBlcmNlbnQ6IDBcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLm9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCB7XG4gICAgICAgICAgICBuZXdWZXJzaW9uOiBmYWxzZVxuICAgICAgICB9LCBvcHRpb25zKTtcbiAgICB9XG5cbiAgICBnZXQgZXh0ZW5zaW9uKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLm5hbWUuc2xpY2UoKE1hdGgubWF4KDAsIHRoaXMubmFtZS5sYXN0SW5kZXhPZignLicpKSB8fCBJbmZpbml0eSkgKyAxKTtcbiAgICB9XG59XG4iXX0=