/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import validatorsMap from '../validators/validators.map';
export class CardViewBaseItemModel {
    constructor(cardViewItemProperties) {
        var _a, _b;
        this.label = cardViewItemProperties.label || '';
        this.value = cardViewItemProperties.value && cardViewItemProperties.value.displayName || cardViewItemProperties.value;
        this.key = cardViewItemProperties.key;
        this.default = cardViewItemProperties.default;
        this.editable = !!cardViewItemProperties.editable;
        this.clickable = !!cardViewItemProperties.clickable;
        this.icon = cardViewItemProperties.icon || '';
        this.validators = cardViewItemProperties.validators || [];
        this.data = cardViewItemProperties.data || null;
        this.multivalued = !!cardViewItemProperties.multivalued;
        if ((_b = (_a = cardViewItemProperties === null || cardViewItemProperties === void 0 ? void 0 : cardViewItemProperties.constraints) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) {
            for (const constraint of cardViewItemProperties.constraints) {
                if (constraint.type !== 'LIST') {
                    this.validators.push(validatorsMap[constraint.type.toLowerCase()](constraint.parameters));
                }
            }
        }
    }
    isEmpty() {
        return this.value === undefined || this.value === null || this.value.length === 0;
    }
    isValid(newValue) {
        if (!this.validators.length) {
            return true;
        }
        return this.validators
            .map((validator) => validator.isValid(newValue))
            .reduce((isValidUntilNow, isValid) => isValidUntilNow && isValid, true);
    }
    getValidationErrors(value) {
        if (!this.validators.length) {
            return [];
        }
        return this.validators.filter((validator) => !validator.isValid(value)).map((validator) => validator);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FyZC12aWV3LWJhc2VpdGVtLm1vZGVsLmpzIiwic291cmNlUm9vdCI6Ii9ob21lL3RyYXZpcy9idWlsZC9BbGZyZXNjby9hbGZyZXNjby1uZzItY29tcG9uZW50cy9saWIvY29yZS8iLCJzb3VyY2VzIjpbImNhcmQtdmlldy9tb2RlbHMvY2FyZC12aWV3LWJhc2VpdGVtLm1vZGVsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7R0FlRztBQUdILE9BQU8sYUFBYSxNQUFNLDhCQUE4QixDQUFDO0FBRXpELE1BQU0sT0FBZ0IscUJBQXFCO0lBYXZDLFlBQVksc0JBQThDOztRQUN0RCxJQUFJLENBQUMsS0FBSyxHQUFHLHNCQUFzQixDQUFDLEtBQUssSUFBSSxFQUFFLENBQUM7UUFDaEQsSUFBSSxDQUFDLEtBQUssR0FBRyxzQkFBc0IsQ0FBQyxLQUFLLElBQUksc0JBQXNCLENBQUMsS0FBSyxDQUFDLFdBQVcsSUFBSSxzQkFBc0IsQ0FBQyxLQUFLLENBQUM7UUFDdEgsSUFBSSxDQUFDLEdBQUcsR0FBRyxzQkFBc0IsQ0FBQyxHQUFHLENBQUM7UUFDdEMsSUFBSSxDQUFDLE9BQU8sR0FBRyxzQkFBc0IsQ0FBQyxPQUFPLENBQUM7UUFDOUMsSUFBSSxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUMsc0JBQXNCLENBQUMsUUFBUSxDQUFDO1FBQ2xELElBQUksQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLHNCQUFzQixDQUFDLFNBQVMsQ0FBQztRQUNwRCxJQUFJLENBQUMsSUFBSSxHQUFHLHNCQUFzQixDQUFDLElBQUksSUFBSSxFQUFFLENBQUM7UUFDOUMsSUFBSSxDQUFDLFVBQVUsR0FBRyxzQkFBc0IsQ0FBQyxVQUFVLElBQUksRUFBRSxDQUFDO1FBQzFELElBQUksQ0FBQyxJQUFJLEdBQUcsc0JBQXNCLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQztRQUNoRCxJQUFJLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQyxzQkFBc0IsQ0FBQyxXQUFXLENBQUM7UUFFeEQsZ0JBQUksc0JBQXNCLGFBQXRCLHNCQUFzQix1QkFBdEIsc0JBQXNCLENBQUUsV0FBVywwQ0FBRSxNQUFNLG1DQUFJLENBQUMsRUFBRTtZQUNsRCxLQUFLLE1BQU0sVUFBVSxJQUFJLHNCQUFzQixDQUFDLFdBQVcsRUFBRTtnQkFDekQsSUFBSSxVQUFVLENBQUMsSUFBSSxLQUFLLE1BQU0sRUFBRTtvQkFDNUIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztpQkFDN0Y7YUFDSjtTQUNKO0lBQ0wsQ0FBQztJQUVELE9BQU87UUFDSCxPQUFPLElBQUksQ0FBQyxLQUFLLEtBQUssU0FBUyxJQUFJLElBQUksQ0FBQyxLQUFLLEtBQUssSUFBSSxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxLQUFLLENBQUMsQ0FBQztJQUN0RixDQUFDO0lBRUQsT0FBTyxDQUFDLFFBQWE7UUFDakIsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFO1lBQ3pCLE9BQU8sSUFBSSxDQUFDO1NBQ2Y7UUFFRCxPQUFPLElBQUksQ0FBQyxVQUFVO2FBQ2pCLEdBQUcsQ0FBQyxDQUFDLFNBQVMsRUFBRSxFQUFFLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQzthQUMvQyxNQUFNLENBQUMsQ0FBQyxlQUFlLEVBQUUsT0FBTyxFQUFFLEVBQUUsQ0FBQyxlQUFlLElBQUksT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ2hGLENBQUM7SUFFRCxtQkFBbUIsQ0FBQyxLQUFLO1FBQ3JCLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRTtZQUN6QixPQUFPLEVBQUUsQ0FBQztTQUNiO1FBRUQsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLFNBQVMsRUFBRSxFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsU0FBUyxFQUFFLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUMxRyxDQUFDO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBDYXJkVmlld0l0ZW1Qcm9wZXJ0aWVzLCBDYXJkVmlld0l0ZW1WYWxpZGF0b3IgfSBmcm9tICcuLi9pbnRlcmZhY2VzL2NhcmQtdmlldy5pbnRlcmZhY2VzJztcbmltcG9ydCB2YWxpZGF0b3JzTWFwIGZyb20gJy4uL3ZhbGlkYXRvcnMvdmFsaWRhdG9ycy5tYXAnO1xuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQ2FyZFZpZXdCYXNlSXRlbU1vZGVsIHtcbiAgICBsYWJlbDogc3RyaW5nO1xuICAgIHZhbHVlOiBhbnk7XG4gICAga2V5OiBhbnk7XG4gICAgZGVmYXVsdDogYW55O1xuICAgIGVkaXRhYmxlOiBib29sZWFuO1xuICAgIGNsaWNrYWJsZTogYm9vbGVhbjtcbiAgICBpY29uPzogc3RyaW5nO1xuICAgIHZhbGlkYXRvcnM/OiBDYXJkVmlld0l0ZW1WYWxpZGF0b3JbXTtcbiAgICBkYXRhPzogYW55O1xuICAgIHR5cGU/OiBzdHJpbmc7XG4gICAgbXVsdGl2YWx1ZWQ/OiBib29sZWFuO1xuXG4gICAgY29uc3RydWN0b3IoY2FyZFZpZXdJdGVtUHJvcGVydGllczogQ2FyZFZpZXdJdGVtUHJvcGVydGllcykge1xuICAgICAgICB0aGlzLmxhYmVsID0gY2FyZFZpZXdJdGVtUHJvcGVydGllcy5sYWJlbCB8fCAnJztcbiAgICAgICAgdGhpcy52YWx1ZSA9IGNhcmRWaWV3SXRlbVByb3BlcnRpZXMudmFsdWUgJiYgY2FyZFZpZXdJdGVtUHJvcGVydGllcy52YWx1ZS5kaXNwbGF5TmFtZSB8fCBjYXJkVmlld0l0ZW1Qcm9wZXJ0aWVzLnZhbHVlO1xuICAgICAgICB0aGlzLmtleSA9IGNhcmRWaWV3SXRlbVByb3BlcnRpZXMua2V5O1xuICAgICAgICB0aGlzLmRlZmF1bHQgPSBjYXJkVmlld0l0ZW1Qcm9wZXJ0aWVzLmRlZmF1bHQ7XG4gICAgICAgIHRoaXMuZWRpdGFibGUgPSAhIWNhcmRWaWV3SXRlbVByb3BlcnRpZXMuZWRpdGFibGU7XG4gICAgICAgIHRoaXMuY2xpY2thYmxlID0gISFjYXJkVmlld0l0ZW1Qcm9wZXJ0aWVzLmNsaWNrYWJsZTtcbiAgICAgICAgdGhpcy5pY29uID0gY2FyZFZpZXdJdGVtUHJvcGVydGllcy5pY29uIHx8ICcnO1xuICAgICAgICB0aGlzLnZhbGlkYXRvcnMgPSBjYXJkVmlld0l0ZW1Qcm9wZXJ0aWVzLnZhbGlkYXRvcnMgfHwgW107XG4gICAgICAgIHRoaXMuZGF0YSA9IGNhcmRWaWV3SXRlbVByb3BlcnRpZXMuZGF0YSB8fCBudWxsO1xuICAgICAgICB0aGlzLm11bHRpdmFsdWVkID0gISFjYXJkVmlld0l0ZW1Qcm9wZXJ0aWVzLm11bHRpdmFsdWVkO1xuXG4gICAgICAgIGlmIChjYXJkVmlld0l0ZW1Qcm9wZXJ0aWVzPy5jb25zdHJhaW50cz8ubGVuZ3RoID8/IDApIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgY29uc3RyYWludCBvZiBjYXJkVmlld0l0ZW1Qcm9wZXJ0aWVzLmNvbnN0cmFpbnRzKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNvbnN0cmFpbnQudHlwZSAhPT0gJ0xJU1QnKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudmFsaWRhdG9ycy5wdXNoKHZhbGlkYXRvcnNNYXBbY29uc3RyYWludC50eXBlLnRvTG93ZXJDYXNlKCldKGNvbnN0cmFpbnQucGFyYW1ldGVycykpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlzRW1wdHkoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlID09PSB1bmRlZmluZWQgfHwgdGhpcy52YWx1ZSA9PT0gbnVsbCB8fCB0aGlzLnZhbHVlLmxlbmd0aCA9PT0gMDtcbiAgICB9XG5cbiAgICBpc1ZhbGlkKG5ld1ZhbHVlOiBhbnkpOiBib29sZWFuIHtcbiAgICAgICAgaWYgKCF0aGlzLnZhbGlkYXRvcnMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLnZhbGlkYXRvcnNcbiAgICAgICAgICAgIC5tYXAoKHZhbGlkYXRvcikgPT4gdmFsaWRhdG9yLmlzVmFsaWQobmV3VmFsdWUpKVxuICAgICAgICAgICAgLnJlZHVjZSgoaXNWYWxpZFVudGlsTm93LCBpc1ZhbGlkKSA9PiBpc1ZhbGlkVW50aWxOb3cgJiYgaXNWYWxpZCwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgZ2V0VmFsaWRhdGlvbkVycm9ycyh2YWx1ZSk6IENhcmRWaWV3SXRlbVZhbGlkYXRvcltdIHtcbiAgICAgICAgaWYgKCF0aGlzLnZhbGlkYXRvcnMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy52YWxpZGF0b3JzLmZpbHRlcigodmFsaWRhdG9yKSA9PiAhdmFsaWRhdG9yLmlzVmFsaWQodmFsdWUpKS5tYXAoKHZhbGlkYXRvcikgPT4gdmFsaWRhdG9yKTtcbiAgICB9XG59XG4iXX0=