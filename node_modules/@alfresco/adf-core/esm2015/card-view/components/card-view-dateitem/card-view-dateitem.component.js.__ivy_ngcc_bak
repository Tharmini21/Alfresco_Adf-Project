/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, Input, ViewChild } from '@angular/core';
import { DateAdapter, MAT_DATE_FORMATS } from '@angular/material/core';
import { DatetimeAdapter, MAT_DATETIME_FORMATS, MatDatetimepicker } from '@mat-datetimepicker/core';
import { MAT_MOMENT_DATETIME_FORMATS, MomentDatetimeAdapter } from '@mat-datetimepicker/moment';
import moment from 'moment-es6';
import { CardViewDateItemModel } from '../../models/card-view-dateitem.model';
import { CardViewUpdateService } from '../../services/card-view-update.service';
import { UserPreferencesService, UserPreferenceValues } from '../../../services/user-preferences.service';
import { MomentDateAdapter } from '../../../utils/moment-date-adapter';
import { MOMENT_DATE_FORMATS } from '../../../utils/moment-date-formats.model';
import { AppConfigService } from '../../../app-config/app-config.service';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { BaseCardView } from '../base-card-view';
import { ClipboardService } from '../../../clipboard/clipboard.service';
import { TranslationService } from '../../../services/translation.service';
const ɵ0 = MOMENT_DATE_FORMATS, ɵ1 = MAT_MOMENT_DATETIME_FORMATS;
export class CardViewDateItemComponent extends BaseCardView {
    constructor(cardViewUpdateService, dateAdapter, userPreferencesService, appConfig, clipboardService, translateService) {
        super(cardViewUpdateService);
        this.dateAdapter = dateAdapter;
        this.userPreferencesService = userPreferencesService;
        this.appConfig = appConfig;
        this.clipboardService = clipboardService;
        this.translateService = translateService;
        this.editable = false;
        this.displayEmpty = true;
        this.displayClearAction = true;
        this.onDestroy$ = new Subject();
        this.dateFormat = this.appConfig.get('dateValues.defaultDateFormat');
    }
    ngOnInit() {
        this.userPreferencesService
            .select(UserPreferenceValues.Locale)
            .pipe(takeUntil(this.onDestroy$))
            .subscribe(locale => {
            this.dateAdapter.setLocale(locale);
            this.property.locale = locale;
        });
        this.dateAdapter.overrideDisplayFormat = 'MMM DD';
        if (this.property.value) {
            this.valueDate = moment(this.property.value, this.dateFormat);
        }
        else if (this.property.multivalued && !this.property.value) {
            this.property.value = [];
        }
    }
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
    showProperty() {
        return this.displayEmpty || !this.property.isEmpty();
    }
    showClearAction() {
        return this.displayClearAction && (!this.property.isEmpty() || !!this.property.default);
    }
    isEditable() {
        return this.editable && this.property.editable;
    }
    showDatePicker() {
        this.datepicker.open();
    }
    onDateChanged(newDateValue) {
        if (newDateValue) {
            const momentDate = moment(newDateValue.value, this.dateFormat, true);
            if (momentDate.isValid()) {
                this.valueDate = momentDate;
                this.property.value = momentDate.toDate();
                this.update();
            }
        }
    }
    onDateClear() {
        this.valueDate = null;
        this.cardViewUpdateService.update(Object.assign({}, this.property), null);
        this.property.value = null;
        this.property.default = null;
    }
    copyToClipboard(valueToCopy) {
        const clipboardMessage = this.translateService.instant('CORE.METADATA.ACCESSIBILITY.COPY_TO_CLIPBOARD_MESSAGE');
        this.clipboardService.copyContentToClipboard(valueToCopy, clipboardMessage);
    }
    addDateToList(newDateValue) {
        if (newDateValue) {
            const momentDate = moment(newDateValue.value, this.dateFormat, true);
            if (momentDate.isValid()) {
                this.property.value.push(momentDate.toDate());
                this.update();
            }
        }
    }
    removeValueFromList(itemIndex) {
        this.property.value.splice(itemIndex, 1);
        this.update();
    }
    update() {
        this.cardViewUpdateService.update(Object.assign({}, this.property), this.property.value);
    }
}
CardViewDateItemComponent.decorators = [
    { type: Component, args: [{
                providers: [
                    { provide: DateAdapter, useClass: MomentDateAdapter },
                    { provide: MAT_DATE_FORMATS, useValue: ɵ0 },
                    { provide: DatetimeAdapter, useClass: MomentDatetimeAdapter },
                    { provide: MAT_DATETIME_FORMATS, useValue: ɵ1 }
                ],
                selector: 'adf-card-view-dateitem',
                template: "<div class=\"adf-property-label\"\n     [attr.data-automation-id]=\"'card-dateitem-label-' + property.key\"\n     *ngIf=\"showProperty() || isEditable()\">\n    {{ property.label | translate }}\n</div>\n\n<div class=\"adf-property-value adf-property-value-padding-top\">\n    <span *ngIf=\"!isEditable() && !property.multivalued\"\n          [attr.data-automation-id]=\"'card-' + property.type + '-value-' + property.key\">\n        <span *ngIf=\"showProperty()\"\n              [attr.data-automation-id]=\"'card-dateitem-' + property.key\"\n              (dblclick)=\"copyToClipboard(property.displayValue)\"\n              matTooltipShowDelay=\"1000\"\n              [matTooltip]=\"'CORE.METADATA.ACTIONS.COPY_TO_CLIPBOARD' | translate\">{{ property.displayValue}}</span>\n    </span>\n    <div *ngIf=\"isEditable() && !property.multivalued\"\n         class=\"adf-dateitem-editable\">\n        <div class=\"adf-dateitem-editable-controls\">\n            <span class=\"adf-datepicker-toggle\"\n                  [attr.data-automation-id]=\"'datepicker-label-toggle-' + property.key\"\n                  (click)=\"showDatePicker()\">\n                <span *ngIf=\"showProperty(); else elseEmptyValueBlock\"\n                      [attr.data-automation-id]=\"'card-' + property.type + '-value-' + property.key\">\n                    {{ property.displayValue }}</span>\n            </span>\n\n            <mat-icon *ngIf=\"showClearAction()\"\n                      class=\"adf-date-reset-icon\"\n                      (click)=\"onDateClear()\"\n                      [attr.title]=\"'CORE.METADATA.ACTIONS.CLEAR' | translate\"\n                      [attr.data-automation-id]=\"'datepicker-date-clear-' + property.key\">\n                clear\n            </mat-icon>\n\n            <mat-datetimepicker-toggle [attr.tabindex]=\"-1\"\n                                       [attr.title]=\"'CORE.METADATA.ACTIONS.EDIT' | translate\"\n                                       [attr.data-automation-id]=\"'datepickertoggle-' + property.key\"\n                                       [for]=\"datetimePicker\">\n            </mat-datetimepicker-toggle>\n        </div>\n\n        <input class=\"adf-invisible-date-input\"\n               [attr.tabIndex]=\"-1\"\n               [matDatetimepicker]=\"datetimePicker\"\n               [value]=\"valueDate\"\n               (dateChange)=\"onDateChanged($event)\">\n\n        <mat-datetimepicker #datetimePicker\n                            [type]=\"$any(property).type\"\n                            [timeInterval]=\"5\"\n                            [attr.data-automation-id]=\"'datepicker-' + property.key\"\n                            [startAt]=\"valueDate\">\n        </mat-datetimepicker>\n    </div>\n    <ng-template #elseEmptyValueBlock>\n        {{ property.default | translate }}\n    </ng-template>\n\n    <div *ngIf=\"property.multivalued\"\n         class=\"adf-property-field adf-dateitem-chip-list-container adf-dateitem-editable\">\n        <mat-chip-list #chipList\n                       class=\"adf-textitem-chip-list\">\n            <mat-chip *ngFor=\"let propertyValue of property.displayValue; let idx = index\"\n                      [removable]=\"isEditable()\"\n                      (removed)=\"removeValueFromList(idx)\">\n                {{ propertyValue }}\n                <mat-icon *ngIf=\"isEditable()\"\n                          matChipRemove>cancel</mat-icon>\n            </mat-chip>\n        </mat-chip-list>\n\n        <mat-form-field *ngIf=\"isEditable()\"\n                        class=\"adf-property-field adf-dateitem-editable-controls\"\n                        [floatLabel]=\"'never'\"\n                        (click)=\"showDatePicker()\">\n            <input matInput\n                   class=\"adf-invisible-date-input\"\n                   [attr.tabIndex]=\"-1\"\n                   [matDatetimepicker]=\"datetimePicker\"\n                   (dateChange)=\"addDateToList($event)\">\n            <mat-datetimepicker-toggle [attr.tabindex]=\"-1\"\n                                       matSuffix\n                                       [attr.title]=\"'CORE.METADATA.ACTIONS.EDIT' | translate\"\n                                       [attr.data-automation-id]=\"'datepickertoggle-' + property.key\"\n                                       [for]=\"datetimePicker\">\n            </mat-datetimepicker-toggle>\n\n            <mat-datetimepicker #datetimePicker\n                                [type]=\"$any(property).type\"\n                                [timeInterval]=\"5\"\n                                [attr.data-automation-id]=\"'datepicker-' + property.key\"\n                                [startAt]=\"valueDate\">\n            </mat-datetimepicker>\n        </mat-form-field>\n    </div>\n</div>\n"
            },] }
];
CardViewDateItemComponent.ctorParameters = () => [
    { type: CardViewUpdateService },
    { type: DateAdapter },
    { type: UserPreferencesService },
    { type: AppConfigService },
    { type: ClipboardService },
    { type: TranslationService }
];
CardViewDateItemComponent.propDecorators = {
    property: [{ type: Input }],
    editable: [{ type: Input }],
    displayEmpty: [{ type: Input }],
    displayClearAction: [{ type: Input }],
    datepicker: [{ type: ViewChild, args: ['datetimePicker',] }]
};
export { ɵ0, ɵ1 };
//# sourceMappingURL=data:application/json;base64,