/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, Input } from '@angular/core';
import { CardViewUpdateService } from '../../services/card-view-update.service';
import { MatTableDataSource } from '@angular/material/table';
import { BaseCardView } from '../base-card-view';
export class CardViewKeyValuePairsItemComponent extends BaseCardView {
    constructor(cardViewUpdateService) {
        super(cardViewUpdateService);
        this.editable = false;
    }
    ngOnChanges() {
        this.values = this.property.value || [];
        this.matTableValues = new MatTableDataSource(this.values);
    }
    isEditable() {
        return this.editable && this.property.editable;
    }
    add() {
        this.values.push({ name: '', value: '' });
    }
    remove(index) {
        this.values.splice(index, 1);
        this.save(true);
    }
    onBlur(value) {
        if (value.length) {
            this.save();
        }
    }
    save(remove) {
        const validValues = this.values.filter((i) => i.name.length && i.value.length);
        if (remove || validValues.length) {
            this.cardViewUpdateService.update(Object.assign({}, this.property), validValues);
            this.property.value = validValues;
        }
    }
}
CardViewKeyValuePairsItemComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-card-view-boolitem',
                template: "<div [attr.data-automation-id]=\"'card-key-value-pairs-label-' + property.key\"\n     class=\"adf-property-label\">{{ property.label | translate }}</div>\n<div class=\"adf-property-field\">\n\n    <div *ngIf=\"!isEditable()\"\n         class=\"adf-card-view__key-value-pairs__read-only adf-property-value\">\n        <mat-table #table\n                   [dataSource]=\"matTableValues\"\n                   class=\"mat-elevation-z8\">\n            <ng-container matColumnDef=\"name\">\n                <mat-header-cell *matHeaderCellDef>{{ 'CORE.CARDVIEW.KEYVALUEPAIRS.NAME' | translate }}\n                </mat-header-cell>\n                <mat-cell *matCellDef=\"let item\">{{item.name}}</mat-cell>\n            </ng-container>\n            <ng-container matColumnDef=\"value\">\n                <mat-header-cell *matHeaderCellDef>{{ 'CORE.CARDVIEW.KEYVALUEPAIRS.VALUE' | translate }}\n                </mat-header-cell>\n                <mat-cell *matCellDef=\"let item\">{{item.value}}</mat-cell>\n            </ng-container>\n\n            <mat-header-row *matHeaderRowDef=\"['name', 'value']\"></mat-header-row>\n            <mat-row *matRowDef=\"let row; columns: ['name', 'value'];\"></mat-row>\n        </mat-table>\n    </div>\n\n\n    <div class=\"adf-card-view__key-value-pairs adf-property-value\"\n         *ngIf=\"isEditable() && values && values.length\">\n        <div class=\"adf-card-view__key-value-pairs__row\">\n            <div class=\"adf-card-view__key-value-pairs__col\">{{ 'CORE.CARDVIEW.KEYVALUEPAIRS.NAME' | translate }}</div>\n            <div class=\"adf-card-view__key-value-pairs__col\">{{ 'CORE.CARDVIEW.KEYVALUEPAIRS.VALUE' | translate }}</div>\n        </div>\n\n        <div class=\"adf-card-view__key-value-pairs__row\"\n             *ngFor=\"let item of values; let i = index\">\n            <div class=\"adf-card-view__key-value-pairs__col\">\n                <mat-form-field>\n                    <input matInput\n                           placeholder=\"{{ 'CORE.CARDVIEW.KEYVALUEPAIRS.NAME' | translate }}\"\n                           (blur)=\"onBlur(item.value)\"\n                           [attr.data-automation-id]=\"'card-'+ property.key +'-name-input-' + i\"\n                           [(ngModel)]=\"values[i].name\">\n                </mat-form-field>\n            </div>\n            <div class=\"adf-card-view__key-value-pairs__col\">\n                <mat-form-field>\n                    <input matInput\n                           placeholder=\"{{ 'CORE.CARDVIEW.KEYVALUEPAIRS.VALUE' | translate }}\"\n                           (blur)=\"onBlur(item.value)\"\n                           [attr.data-automation-id]=\"'card-'+ property.key +'-value-input-' + i\"\n                           [(ngModel)]=\"values[i].value\">\n                    <button matSuffix\n                            mat-icon-button\n                            (click)=\"remove(i)\"\n                            class=\"adf-card-view__key-value-pairs__remove-btn\">\n                        <mat-icon>close</mat-icon>\n                    </button>\n                </mat-form-field>\n            </div>\n        </div>\n    </div>\n    <div *ngIf=\"isEditable()\"\n         class=\"adf-property-value adf-card-view__key-value-pairs__add-btn-container\">\n        <button (click)=\"add()\"\n                mat-button\n                class=\"adf-card-view__key-value-pairs__add-btn\"\n                [attr.data-automation-id]=\"'card-key-value-pairs-button-' + property.key\">\n            {{ 'CORE.CARDVIEW.KEYVALUEPAIRS.ADD' | translate }}\n            <mat-icon>add</mat-icon>\n        </button>\n    </div>\n</div>\n"
            },] }
];
CardViewKeyValuePairsItemComponent.ctorParameters = () => [
    { type: CardViewUpdateService }
];
CardViewKeyValuePairsItemComponent.propDecorators = {
    editable: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FyZC12aWV3LWtleXZhbHVlcGFpcnNpdGVtLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIvaG9tZS90cmF2aXMvYnVpbGQvQWxmcmVzY28vYWxmcmVzY28tbmcyLWNvbXBvbmVudHMvbGliL2NvcmUvIiwic291cmNlcyI6WyJjYXJkLXZpZXcvY29tcG9uZW50cy9jYXJkLXZpZXcta2V5dmFsdWVwYWlyc2l0ZW0vY2FyZC12aWV3LWtleXZhbHVlcGFpcnNpdGVtLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7O0dBZUc7QUFFSCxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBYSxNQUFNLGVBQWUsQ0FBQztBQUM1RCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSx5Q0FBeUMsQ0FBQztBQUdoRixPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUM3RCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFPakQsTUFBTSxPQUFPLGtDQUFtQyxTQUFRLFlBQTRDO0lBUWhHLFlBQVkscUJBQTRDO1FBQ3BELEtBQUssQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO1FBTmpDLGFBQVEsR0FBWSxLQUFLLENBQUM7SUFPMUIsQ0FBQztJQUVELFdBQVc7UUFDUCxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxJQUFJLEVBQUUsQ0FBQztRQUN4QyxJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksa0JBQWtCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzlELENBQUM7SUFFRCxVQUFVO1FBQ04sT0FBTyxJQUFJLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDO0lBQ25ELENBQUM7SUFFRCxHQUFHO1FBQ0MsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQzlDLENBQUM7SUFFRCxNQUFNLENBQUMsS0FBYTtRQUNoQixJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDN0IsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNwQixDQUFDO0lBRUQsTUFBTSxDQUFDLEtBQUs7UUFDUixJQUFJLEtBQUssQ0FBQyxNQUFNLEVBQUU7WUFDZCxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7U0FDZjtJQUNMLENBQUM7SUFFRCxJQUFJLENBQUMsTUFBZ0I7UUFDakIsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFL0UsSUFBSSxNQUFNLElBQUksV0FBVyxDQUFDLE1BQU0sRUFBRTtZQUM5QixJQUFJLENBQUMscUJBQXFCLENBQUMsTUFBTSxDQUFDLGtCQUFzQyxJQUFJLENBQUMsUUFBUSxDQUFFLEVBQUUsV0FBVyxDQUFDLENBQUM7WUFDdEcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEdBQUcsV0FBVyxDQUFDO1NBQ3JDO0lBQ0wsQ0FBQzs7O1lBaERKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsd0JBQXdCO2dCQUNsQyxrbEhBQTJEO2FBQzlEOzs7WUFUUSxxQkFBcUI7Ozt1QkFhekIsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIE9uQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ2FyZFZpZXdVcGRhdGVTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvY2FyZC12aWV3LXVwZGF0ZS5zZXJ2aWNlJztcbmltcG9ydCB7IENhcmRWaWV3S2V5VmFsdWVQYWlyc0l0ZW1Nb2RlbCB9IGZyb20gJy4uLy4uL21vZGVscy9jYXJkLXZpZXcubW9kZWxzJztcbmltcG9ydCB7IENhcmRWaWV3S2V5VmFsdWVQYWlyc0l0ZW1UeXBlIH0gZnJvbSAnLi4vLi4vaW50ZXJmYWNlcy9jYXJkLXZpZXcuaW50ZXJmYWNlcyc7XG5pbXBvcnQgeyBNYXRUYWJsZURhdGFTb3VyY2UgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC90YWJsZSc7XG5pbXBvcnQgeyBCYXNlQ2FyZFZpZXcgfSBmcm9tICcuLi9iYXNlLWNhcmQtdmlldyc7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnYWRmLWNhcmQtdmlldy1ib29saXRlbScsXG4gICAgdGVtcGxhdGVVcmw6ICcuL2NhcmQtdmlldy1rZXl2YWx1ZXBhaXJzaXRlbS5jb21wb25lbnQuaHRtbCdcbn0pXG5cbmV4cG9ydCBjbGFzcyBDYXJkVmlld0tleVZhbHVlUGFpcnNJdGVtQ29tcG9uZW50IGV4dGVuZHMgQmFzZUNhcmRWaWV3PENhcmRWaWV3S2V5VmFsdWVQYWlyc0l0ZW1Nb2RlbD4gaW1wbGVtZW50cyBPbkNoYW5nZXMge1xuXG4gICAgQElucHV0KClcbiAgICBlZGl0YWJsZTogYm9vbGVhbiA9IGZhbHNlO1xuXG4gICAgdmFsdWVzOiBDYXJkVmlld0tleVZhbHVlUGFpcnNJdGVtVHlwZVtdO1xuICAgIG1hdFRhYmxlVmFsdWVzOiBNYXRUYWJsZURhdGFTb3VyY2U8Q2FyZFZpZXdLZXlWYWx1ZVBhaXJzSXRlbVR5cGU+O1xuXG4gICAgY29uc3RydWN0b3IoY2FyZFZpZXdVcGRhdGVTZXJ2aWNlOiBDYXJkVmlld1VwZGF0ZVNlcnZpY2UpIHtcbiAgICAgICAgc3VwZXIoY2FyZFZpZXdVcGRhdGVTZXJ2aWNlKTtcbiAgICB9XG5cbiAgICBuZ09uQ2hhbmdlcygpIHtcbiAgICAgICAgdGhpcy52YWx1ZXMgPSB0aGlzLnByb3BlcnR5LnZhbHVlIHx8IFtdO1xuICAgICAgICB0aGlzLm1hdFRhYmxlVmFsdWVzID0gbmV3IE1hdFRhYmxlRGF0YVNvdXJjZSh0aGlzLnZhbHVlcyk7XG4gICAgfVxuXG4gICAgaXNFZGl0YWJsZSgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWRpdGFibGUgJiYgdGhpcy5wcm9wZXJ0eS5lZGl0YWJsZTtcbiAgICB9XG5cbiAgICBhZGQoKTogdm9pZCB7XG4gICAgICAgIHRoaXMudmFsdWVzLnB1c2goeyBuYW1lOiAnJywgdmFsdWU6ICcnIH0pO1xuICAgIH1cblxuICAgIHJlbW92ZShpbmRleDogbnVtYmVyKTogdm9pZCB7XG4gICAgICAgIHRoaXMudmFsdWVzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIHRoaXMuc2F2ZSh0cnVlKTtcbiAgICB9XG5cbiAgICBvbkJsdXIodmFsdWUpOiB2b2lkIHtcbiAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy5zYXZlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzYXZlKHJlbW92ZT86IGJvb2xlYW4pOiB2b2lkIHtcbiAgICAgICAgY29uc3QgdmFsaWRWYWx1ZXMgPSB0aGlzLnZhbHVlcy5maWx0ZXIoKGkpID0+IGkubmFtZS5sZW5ndGggJiYgaS52YWx1ZS5sZW5ndGgpO1xuXG4gICAgICAgIGlmIChyZW1vdmUgfHwgdmFsaWRWYWx1ZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aGlzLmNhcmRWaWV3VXBkYXRlU2VydmljZS51cGRhdGUoPENhcmRWaWV3S2V5VmFsdWVQYWlyc0l0ZW1Nb2RlbD4geyAuLi50aGlzLnByb3BlcnR5IH0sIHZhbGlkVmFsdWVzKTtcbiAgICAgICAgICAgIHRoaXMucHJvcGVydHkudmFsdWUgPSB2YWxpZFZhbHVlcztcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdfQ==