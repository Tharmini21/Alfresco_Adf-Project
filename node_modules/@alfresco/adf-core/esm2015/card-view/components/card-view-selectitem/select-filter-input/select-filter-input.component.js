/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, ViewEncapsulation, ViewChild, ElementRef, Inject, Output, EventEmitter } from '@angular/core';
import { ESCAPE, TAB } from '@angular/cdk/keycodes';
import { MatSelect } from '@angular/material/select';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/material/form-field';
import * as ɵngcc2 from '@angular/material/input';
import * as ɵngcc3 from '@angular/forms';
import * as ɵngcc4 from '@angular/common';
import * as ɵngcc5 from '@angular/material/button';
import * as ɵngcc6 from '@angular/material/icon';
import * as ɵngcc7 from '@ngx-translate/core';
import * as ɵngcc8 from '@angular/material/select';

const _c0 = ["selectFilterInput"];
function SelectFilterInputComponent_button_6_Template(rf, ctx) { if (rf & 1) {
    const _r3 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 4);
    ɵngcc0.ɵɵlistener("keydown.enter", function SelectFilterInputComponent_button_6_Template_button_keydown_enter_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r2 = ɵngcc0.ɵɵnextContext(); return ctx_r2.reset($event); })("click", function SelectFilterInputComponent_button_6_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r4 = ɵngcc0.ɵɵnextContext(); return ctx_r4.reset(); });
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵelementStart(2, "mat-icon");
    ɵngcc0.ɵɵtext(3, "close");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵattribute("aria-label", ɵngcc0.ɵɵpipeBind1(1, 1, "SELECT_FILTER.BUTTON.ARIA_LABEL"));
} }
export class SelectFilterInputComponent {
    constructor(matSelect) {
        this.matSelect = matSelect;
        this.change = new EventEmitter();
        this.term = '';
        this.onDestroy$ = new Subject();
    }
    onModelChange(value) {
        this.change.next(value);
    }
    ngOnInit() {
        this.change
            .pipe(takeUntil(this.onDestroy$))
            .subscribe((val) => this.term = val);
        this.matSelect.openedChange
            .pipe(takeUntil(this.onDestroy$))
            .subscribe((isOpened) => {
            if (isOpened) {
                this.selectFilterInput.nativeElement.focus();
            }
            else {
                this.change.next('');
            }
        });
    }
    reset(event) {
        if (event) {
            event.stopPropagation();
        }
        this.change.next('');
        this.selectFilterInput.nativeElement.focus();
    }
    handleKeydown($event) {
        if (this.term) {
            if ($event.keyCode === ESCAPE) {
                event.stopPropagation();
                this.change.next('');
            }
            if ($event.target.tagName === 'INPUT' && $event.keyCode === TAB) {
                event.stopPropagation();
            }
        }
    }
    ngOnDestroy() {
        this.onDestroy$.next();
        this.onDestroy$.complete();
    }
}
SelectFilterInputComponent.ɵfac = function SelectFilterInputComponent_Factory(t) { return new (t || SelectFilterInputComponent)(ɵngcc0.ɵɵdirectiveInject(MatSelect)); };
SelectFilterInputComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: SelectFilterInputComponent, selectors: [["adf-select-filter-input"]], viewQuery: function SelectFilterInputComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, true, ElementRef);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.selectFilterInput = _t.first);
    } }, hostAttrs: [1, "adf-select-filter-input"], outputs: { change: "change" }, decls: 7, vars: 8, consts: [[1, "adf-select-filter-input-container"], ["matInput", "", "autocomplete", "off", 3, "placeholder", "ngModel", "keydown", "ngModelChange", "change"], ["selectFilterInput", ""], ["mat-button", "", "matSuffix", "", "mat-icon-button", "", 3, "keydown.enter", "click", 4, "ngIf"], ["mat-button", "", "matSuffix", "", "mat-icon-button", "", 3, "keydown.enter", "click"]], template: function SelectFilterInputComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "mat-form-field");
        ɵngcc0.ɵɵelementStart(2, "input", 1, 2);
        ɵngcc0.ɵɵlistener("keydown", function SelectFilterInputComponent_Template_input_keydown_2_listener($event) { return ctx.handleKeydown($event); })("ngModelChange", function SelectFilterInputComponent_Template_input_ngModelChange_2_listener($event) { return ctx.onModelChange($event); })("change", function SelectFilterInputComponent_Template_input_change_2_listener($event) { return $event.stopPropagation(); });
        ɵngcc0.ɵɵpipe(4, "translate");
        ɵngcc0.ɵɵpipe(5, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(6, SelectFilterInputComponent_button_6_Template, 4, 3, "button", 3);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("placeholder", ɵngcc0.ɵɵpipeBind1(4, 4, "SELECT_FILTER.INPUT.PLACEHOLDER"))("ngModel", ctx.term);
        ɵngcc0.ɵɵattribute("aria-label", ɵngcc0.ɵɵpipeBind1(5, 6, "SELECT_FILTER.INPUT.ARIA_LABEL"));
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("ngIf", ctx.term);
    } }, directives: [ɵngcc1.MatFormField, ɵngcc2.MatInput, ɵngcc3.DefaultValueAccessor, ɵngcc3.NgControlStatus, ɵngcc3.NgModel, ɵngcc4.NgIf, ɵngcc5.MatButton, ɵngcc1.MatSuffix, ɵngcc6.MatIcon], pipes: [ɵngcc7.TranslatePipe], encapsulation: 2 });
SelectFilterInputComponent.ctorParameters = () => [
    { type: MatSelect, decorators: [{ type: Inject, args: [MatSelect,] }] }
];
SelectFilterInputComponent.propDecorators = {
    selectFilterInput: [{ type: ViewChild, args: ['selectFilterInput', { read: ElementRef, static: false },] }],
    change: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SelectFilterInputComponent, [{
        type: Component,
        args: [{
                selector: 'adf-select-filter-input',
                template: "\n<div class=\"adf-select-filter-input-container\">\n    <mat-form-field>\n        <input matInput\n            autocomplete=\"off\"\n            (keydown)=\"handleKeydown($event)\"\n            [placeholder]=\"'SELECT_FILTER.INPUT.PLACEHOLDER' | translate\"\n            #selectFilterInput\n            [ngModel]=\"term\"\n            (ngModelChange)=\"onModelChange($event)\"\n            [attr.aria-label]=\"'SELECT_FILTER.INPUT.ARIA_LABEL' | translate\"\n            (change)=\"$event.stopPropagation()\"\n        />\n\n        <button mat-button\n            matSuffix\n            mat-icon-button\n            [attr.aria-label]=\"'SELECT_FILTER.BUTTON.ARIA_LABEL' | translate\"\n            *ngIf=\"term\"\n            (keydown.enter)=\"reset($event)\"\n            (click)=\"reset()\">\n            <mat-icon>close</mat-icon>\n        </button>\n    </mat-form-field>\n</div>\n",
                host: { 'class': 'adf-select-filter-input' },
                encapsulation: ViewEncapsulation.None
            }]
    }], function () { return [{ type: ɵngcc8.MatSelect, decorators: [{
                type: Inject,
                args: [MatSelect]
            }] }]; }, { change: [{
            type: Output
        }], selectFilterInput: [{
            type: ViewChild,
            args: ['selectFilterInput', { read: ElementRef, static: false }]
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0LWZpbHRlci1pbnB1dC5jb21wb25lbnQuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL2hvbWUvdHJhdmlzL2J1aWxkL0FsZnJlc2NvL2FsZnJlc2NvLW5nMi1jb21wb25lbnRzL2xpYi9jb3JlL2NhcmQtdmlldy9jb21wb25lbnRzL2NhcmQtdmlldy1zZWxlY3RpdGVtL3NlbGVjdC1maWx0ZXItaW5wdXQvc2VsZWN0LWZpbHRlci1pbnB1dC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUVILE9BQU8sRUFBRSxTQUFTLEVBQUUsaUJBQWlCLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBYSxNQUFNLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM3SCxPQUFPLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ3BELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUNyRCxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQy9CLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBUTNDLE1BQU0sT0FBTywwQkFBMEI7QUFBRyxJQU90QyxZQUF1QyxTQUFvQjtBQUFJLFFBQXhCLGNBQVMsR0FBVCxTQUFTLENBQVc7QUFBQyxRQUxsRCxXQUFNLEdBQUcsSUFBSSxZQUFZLEVBQVUsQ0FBQztBQUNsRCxRQUNJLFNBQUksR0FBRyxFQUFFLENBQUM7QUFDZCxRQUFZLGVBQVUsR0FBRyxJQUFJLE9BQU8sRUFBUSxDQUFDO0FBQzdDLElBQ2tFLENBQUM7QUFDbkUsSUFDSSxhQUFhLENBQUMsS0FBYTtBQUMvQixRQUFRLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ2hDLElBQUksQ0FBQztBQUNMLElBQ0ksUUFBUTtBQUNaLFFBQVEsSUFBSSxDQUFDLE1BQU07QUFDbkIsYUFBYSxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUM3QyxhQUFhLFNBQVMsQ0FBQyxDQUFDLEdBQVcsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksR0FBRyxHQUFHLENBQUUsQ0FBQztBQUMxRCxRQUNRLElBQUksQ0FBQyxTQUFTLENBQUMsWUFBWTtBQUNuQyxhQUFhLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQzdDLGFBQWEsU0FBUyxDQUFDLENBQUMsUUFBaUIsRUFBRSxFQUFFO0FBQzdDLFlBQWdCLElBQUksUUFBUSxFQUFFO0FBQzlCLGdCQUFvQixJQUFJLENBQUMsaUJBQWlCLENBQUMsYUFBYSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2pFLGFBQWlCO0FBQUMsaUJBQUs7QUFDdkIsZ0JBQW9CLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ3pDLGFBQWlCO0FBQ2pCLFFBQVksQ0FBQyxDQUFDLENBQUM7QUFDZixJQUFJLENBQUM7QUFDTCxJQUNJLEtBQUssQ0FBQyxLQUFhO0FBQ3ZCLFFBQVEsSUFBSSxLQUFLLEVBQUU7QUFDbkIsWUFBWSxLQUFLLENBQUMsZUFBZSxFQUFFLENBQUM7QUFDcEMsU0FBUztBQUNULFFBQ1EsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDN0IsUUFBUSxJQUFJLENBQUMsaUJBQWlCLENBQUMsYUFBYSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ3JELElBQUksQ0FBQztBQUNMLElBQ0ksYUFBYSxDQUFDLE1BQXFCO0FBQ3ZDLFFBQVEsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFO0FBQ3ZCLFlBQVksSUFBSSxNQUFNLENBQUMsT0FBTyxLQUFLLE1BQU0sRUFBRTtBQUMzQyxnQkFBZ0IsS0FBSyxDQUFDLGVBQWUsRUFBRSxDQUFDO0FBQ3hDLGdCQUFnQixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUNyQyxhQUFhO0FBQ2IsWUFDWSxJQUFLLE1BQU0sQ0FBQyxNQUEyQixDQUFDLE9BQU8sS0FBSyxPQUFPLElBQUksTUFBTSxDQUFDLE9BQU8sS0FBSyxHQUFHLEVBQUU7QUFDbkcsZ0JBQWdCLEtBQUssQ0FBQyxlQUFlLEVBQUUsQ0FBQztBQUN4QyxhQUFhO0FBQ2IsU0FBUztBQUNULElBQUksQ0FBQztBQUNMLElBQ0ksV0FBVztBQUNmLFFBQVEsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUMvQixRQUFRLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLENBQUM7QUFDbkMsSUFBSSxDQUFDO0FBQ0w7c0RBN0RDLFNBQVMsU0FBQyxrQkFDUCxRQUFRLEVBQUUseUJBQXlCLGtCQUNuQzs7Ozs7O3dkQUFtRCxrQkFDbkQsSUFBSSxFQUFFLEVBQUUsT0FBTyxFQUFFLHlCQUF5QixFQUFFLGtCQUM1QztPQUFhLEVBQUUsaUJBQWlCLENBQUMsSUFBSTtDQUN4Qzs7Ozs7Ozs7Ozs7Ozs7O3NQQUNJO0FBQUM7QUFBb0QsWUFWakQsU0FBUyx1QkFpQkQsTUFBTSxTQUFDLFNBQVM7QUFBUTtBQUFHO0FBRXZCLGdDQVJoQixTQUFTLFNBQUMsbUJBQW1CLEVBQUUsRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUU7QUFBTyxxQkFDekUsTUFBTTtBQUFJOzs7Ozs7Ozs7Ozs7Ozs7OztvQkFBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgQ29tcG9uZW50LCBWaWV3RW5jYXBzdWxhdGlvbiwgVmlld0NoaWxkLCBFbGVtZW50UmVmLCBPbkRlc3Ryb3ksIEluamVjdCwgT3V0cHV0LCBFdmVudEVtaXR0ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEVTQ0FQRSwgVEFCIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL2tleWNvZGVzJztcbmltcG9ydCB7IE1hdFNlbGVjdCB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL3NlbGVjdCc7XG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyB0YWtlVW50aWwgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnYWRmLXNlbGVjdC1maWx0ZXItaW5wdXQnLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9zZWxlY3QtZmlsdGVyLWlucHV0LmNvbXBvbmVudC5odG1sJyxcbiAgICBob3N0OiB7ICdjbGFzcyc6ICdhZGYtc2VsZWN0LWZpbHRlci1pbnB1dCcgfSxcbiAgICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lXG59KVxuZXhwb3J0IGNsYXNzIFNlbGVjdEZpbHRlcklucHV0Q29tcG9uZW50IGltcGxlbWVudHMgT25EZXN0cm95IHtcbiAgICBAVmlld0NoaWxkKCdzZWxlY3RGaWx0ZXJJbnB1dCcsIHsgcmVhZDogRWxlbWVudFJlZiwgc3RhdGljOiBmYWxzZSB9KSBzZWxlY3RGaWx0ZXJJbnB1dDogRWxlbWVudFJlZjtcbiAgICBAT3V0cHV0KCkgY2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjxzdHJpbmc+KCk7XG5cbiAgICB0ZXJtID0gJyc7XG4gICAgcHJpdmF0ZSBvbkRlc3Ryb3kkID0gbmV3IFN1YmplY3Q8dm9pZD4oKTtcblxuICAgIGNvbnN0cnVjdG9yKEBJbmplY3QoTWF0U2VsZWN0KSBwcml2YXRlIG1hdFNlbGVjdDogTWF0U2VsZWN0KSB7fVxuXG4gICAgb25Nb2RlbENoYW5nZSh2YWx1ZTogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuY2hhbmdlLm5leHQodmFsdWUpO1xuICAgIH1cblxuICAgIG5nT25Jbml0KCkge1xuICAgICAgICB0aGlzLmNoYW5nZVxuICAgICAgICAgICAgLnBpcGUodGFrZVVudGlsKHRoaXMub25EZXN0cm95JCkpXG4gICAgICAgICAgICAuc3Vic2NyaWJlKCh2YWw6IHN0cmluZykgPT4gdGhpcy50ZXJtID0gdmFsICk7XG5cbiAgICAgICAgdGhpcy5tYXRTZWxlY3Qub3BlbmVkQ2hhbmdlXG4gICAgICAgICAgICAucGlwZSh0YWtlVW50aWwodGhpcy5vbkRlc3Ryb3kkKSlcbiAgICAgICAgICAgIC5zdWJzY3JpYmUoKGlzT3BlbmVkOiBib29sZWFuKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGlzT3BlbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0RmlsdGVySW5wdXQubmF0aXZlRWxlbWVudC5mb2N1cygpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2hhbmdlLm5leHQoJycpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgIH1cblxuICAgIHJlc2V0KGV2ZW50PzogRXZlbnQpIHtcbiAgICAgICAgaWYgKGV2ZW50KSB7XG4gICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuY2hhbmdlLm5leHQoJycpO1xuICAgICAgICB0aGlzLnNlbGVjdEZpbHRlcklucHV0Lm5hdGl2ZUVsZW1lbnQuZm9jdXMoKTtcbiAgICB9XG5cbiAgICBoYW5kbGVLZXlkb3duKCRldmVudDogS2V5Ym9hcmRFdmVudCkge1xuICAgICAgICBpZiAodGhpcy50ZXJtKSB7XG4gICAgICAgICAgICBpZiAoJGV2ZW50LmtleUNvZGUgPT09IEVTQ0FQRSkge1xuICAgICAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgICAgIHRoaXMuY2hhbmdlLm5leHQoJycpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoKCRldmVudC50YXJnZXQgYXMgSFRNTElucHV0RWxlbWVudCkudGFnTmFtZSA9PT0gJ0lOUFVUJyAmJiAkZXZlbnQua2V5Q29kZSA9PT0gVEFCKSB7XG4gICAgICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBuZ09uRGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy5vbkRlc3Ryb3kkLm5leHQoKTtcbiAgICAgICAgdGhpcy5vbkRlc3Ryb3kkLmNvbXBsZXRlKCk7XG4gICAgfVxufVxuIl19