import { AlfrescoApiService } from '../../services/alfresco-api.service';
import { LogService } from '../../services/log.service';
import { SitesService } from '../../services/sites.service';
import { Injectable } from '@angular/core';
import { from, throwError } from 'rxjs';
import { map, catchError } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "../../services/alfresco-api.service";
import * as i2 from "../../services/log.service";
import * as i3 from "../../services/sites.service";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../../services/alfresco-api.service';
import * as ɵngcc2 from '../../services/log.service';
import * as ɵngcc3 from '../../services/sites.service';
export class ActivitiContentService {
    constructor(apiService, logService, sitesService) {
        this.apiService = apiService;
        this.logService = logService;
        this.sitesService = sitesService;
    }
    getAlfrescoNodes(accountId, folderId) {
        const apiService = this.apiService.getInstance();
        const accountShortId = accountId.replace('alfresco-', '');
        return from(apiService.activiti.alfrescoApi.getContentInFolder(accountShortId, folderId))
            .pipe(map(this.toJsonArray), catchError((err) => this.handleError(err)));
    }
    getAlfrescoRepositories(tenantId, includeAccount) {
        const apiService = this.apiService.getInstance();
        const opts = {
            tenantId,
            includeAccounts: includeAccount ? includeAccount : true
        };
        return from(apiService.activiti.alfrescoApi.getRepositories(opts))
            .pipe(map(this.toJsonArray), catchError((err) => this.handleError(err)));
    }
    linkAlfrescoNode(accountId, node, siteId) {
        const apiService = this.apiService.getInstance();
        return from(apiService.activiti.contentApi.createTemporaryRelatedContent({
            link: true,
            name: node.title,
            simpleType: node.simpleType,
            source: accountId,
            sourceId: node.id + '@' + siteId
        }))
            .pipe(map(this.toJson), catchError((err) => this.handleError(err)));
    }
    applyAlfrescoNode(node, siteId, accountId) {
        var _a;
        const apiService = this.apiService.getInstance();
        const currentSideId = siteId ? siteId : this.sitesService.getSiteNameFromNodePath(node);
        const params = {
            source: accountId,
            mimeType: (_a = node === null || node === void 0 ? void 0 : node.content) === null || _a === void 0 ? void 0 : _a.mimeType,
            sourceId: node.id + ';' + node.properties['cm:versionLabel'] + '@' + currentSideId,
            name: node.name,
            link: node.isLink
        };
        return from(apiService.activiti.contentApi.createTemporaryRelatedContent(params))
            .pipe(map(this.toJson), catchError((err) => this.handleError(err)));
    }
    toJson(res) {
        if (res) {
            return res || {};
        }
        return {};
    }
    toJsonArray(res) {
        if (res) {
            return res.data || [];
        }
        return [];
    }
    handleError(error) {
        let errMsg = ActivitiContentService.UNKNOWN_ERROR_MESSAGE;
        if (error) {
            errMsg = (error.message) ? error.message :
                error.status ? `${error.status} - ${error.statusText}` : ActivitiContentService.GENERIC_ERROR_MESSAGE;
        }
        this.logService.error(errMsg);
        return throwError(errMsg);
    }
}
ActivitiContentService.ɵfac = function ActivitiContentService_Factory(t) { return new (t || ActivitiContentService)(ɵngcc0.ɵɵinject(ɵngcc1.AlfrescoApiService), ɵngcc0.ɵɵinject(ɵngcc2.LogService), ɵngcc0.ɵɵinject(ɵngcc3.SitesService)); };
ActivitiContentService.UNKNOWN_ERROR_MESSAGE = 'Unknown error';
ActivitiContentService.GENERIC_ERROR_MESSAGE = 'Server error';
ActivitiContentService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ActivitiContentService_Factory() { return new ActivitiContentService(i0.ɵɵinject(i1.AlfrescoApiService), i0.ɵɵinject(i2.LogService), i0.ɵɵinject(i3.SitesService)); }, token: ActivitiContentService, providedIn: "root" });
ActivitiContentService.ctorParameters = () => [
    { type: AlfrescoApiService },
    { type: LogService },
    { type: SitesService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ActivitiContentService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.AlfrescoApiService }, { type: ɵngcc2.LogService }, { type: ɵngcc3.SitesService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,