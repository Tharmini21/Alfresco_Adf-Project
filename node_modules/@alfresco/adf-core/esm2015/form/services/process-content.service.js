import { AlfrescoApiService } from '../../services/alfresco-api.service';
import { LogService } from '../../services/log.service';
import { Injectable } from '@angular/core';
import { Observable, from, throwError } from 'rxjs';
import { catchError } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "../../services/alfresco-api.service";
import * as i2 from "../../services/log.service";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../../services/alfresco-api.service';
import * as ɵngcc2 from '../../services/log.service';
export class ProcessContentService {
    constructor(apiService, logService) {
        this.apiService = apiService;
        this.logService = logService;
    }
    get contentApi() {
        return this.apiService.getInstance().activiti.contentApi;
    }
    createTemporaryRawRelatedContent(file) {
        return from(this.contentApi.createTemporaryRawRelatedContent(file))
            .pipe(catchError((err) => this.handleError(err)));
    }
    getFileContent(contentId) {
        return from(this.contentApi.getContent(contentId))
            .pipe(catchError((err) => this.handleError(err)));
    }
    getFileRawContent(contentId) {
        return from(this.contentApi.getRawContent(contentId))
            .pipe(catchError((err) => this.handleError(err)));
    }
    getContentPreview(contentId) {
        return new Observable((observer) => {
            this.contentApi.getContentPreview(contentId).then((result) => {
                observer.next(result);
                observer.complete();
            }, () => {
                this.contentApi.getRawContent(contentId).then((data) => {
                    observer.next(data);
                    observer.complete();
                }, (err) => {
                    observer.error(err);
                    observer.complete();
                });
            });
        });
    }
    getFileRawContentUrl(contentId) {
        return this.contentApi.getRawContentUrl(contentId);
    }
    getContentThumbnail(contentId) {
        return from(this.contentApi.getContentThumbnail(contentId))
            .pipe(catchError((err) => this.handleError(err)));
    }
    getTaskRelatedContent(taskId, opts) {
        return from(this.contentApi.getRelatedContentForTask(taskId, opts))
            .pipe(catchError((err) => this.handleError(err)));
    }
    getProcessRelatedContent(processId, opts) {
        return from(this.contentApi.getRelatedContentForProcessInstance(processId, opts))
            .pipe(catchError((err) => this.handleError(err)));
    }
    deleteRelatedContent(contentId) {
        return from(this.contentApi.deleteContent(contentId))
            .pipe(catchError((err) => this.handleError(err)));
    }
    createProcessRelatedContent(processInstanceId, content, opts) {
        return from(this.contentApi.createRelatedContentOnProcessInstance(processInstanceId, content, opts))
            .pipe(catchError((err) => this.handleError(err)));
    }
    createTaskRelatedContent(taskId, file, opts) {
        return from(this.contentApi.createRelatedContentOnTask(taskId, file, opts))
            .pipe(catchError((err) => this.handleError(err)));
    }
    toJson(res) {
        if (res) {
            return res || {};
        }
        return {};
    }
    toJsonArray(res) {
        if (res) {
            return res.data || [];
        }
        return [];
    }
    handleError(error) {
        let errMsg = ProcessContentService.UNKNOWN_ERROR_MESSAGE;
        if (error) {
            errMsg = (error.message) ? error.message :
                error.status ? `${error.status} - ${error.statusText}` : ProcessContentService.GENERIC_ERROR_MESSAGE;
        }
        this.logService.error(errMsg);
        return throwError(errMsg);
    }
}
ProcessContentService.ɵfac = function ProcessContentService_Factory(t) { return new (t || ProcessContentService)(ɵngcc0.ɵɵinject(ɵngcc1.AlfrescoApiService), ɵngcc0.ɵɵinject(ɵngcc2.LogService)); };
ProcessContentService.UNKNOWN_ERROR_MESSAGE = 'Unknown error';
ProcessContentService.GENERIC_ERROR_MESSAGE = 'Server error';
ProcessContentService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ProcessContentService_Factory() { return new ProcessContentService(i0.ɵɵinject(i1.AlfrescoApiService), i0.ɵɵinject(i2.LogService)); }, token: ProcessContentService, providedIn: "root" });
ProcessContentService.ctorParameters = () => [
    { type: AlfrescoApiService },
    { type: LogService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ProcessContentService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.AlfrescoApiService }, { type: ɵngcc2.LogService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,