import { AlfrescoApiService } from '../../services/alfresco-api.service';
import { LogService } from '../../services/log.service';
import { Injectable } from '@angular/core';
import moment from 'moment-es6';
import { from, throwError } from 'rxjs';
import { WidgetTypeEnum } from '../models/widget-visibility.model';
import { map, catchError } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "../../services/alfresco-api.service";
import * as i2 from "../../services/log.service";
export class WidgetVisibilityService {
    constructor(apiService, logService) {
        this.apiService = apiService;
        this.logService = logService;
    }
    refreshVisibility(form, processVarList) {
        this.form = form;
        if (processVarList) {
            this.processVarList = processVarList;
        }
        if (form && form.tabs && form.tabs.length > 0) {
            form.tabs.map((tabModel) => this.refreshEntityVisibility(tabModel));
        }
        if (form && form.outcomes && form.outcomes.length > 0) {
            form.outcomes.map((outcomeModel) => this.refreshOutcomeVisibility(outcomeModel));
        }
        if (form) {
            form.getFormFields().map((field) => this.refreshEntityVisibility(field));
        }
    }
    refreshEntityVisibility(element) {
        const visible = this.evaluateVisibility(element.form, element.visibilityCondition);
        element.isVisible = visible && this.isParentTabVisible(this.form, element);
    }
    refreshOutcomeVisibility(element) {
        element.isVisible = this.evaluateVisibility(element.form, element.visibilityCondition);
    }
    evaluateVisibility(form, visibilityObj) {
        const isLeftFieldPresent = visibilityObj && (visibilityObj.leftType || visibilityObj.leftValue);
        if (!isLeftFieldPresent || isLeftFieldPresent === 'null') {
            return true;
        }
        else {
            return this.isFieldVisible(form, visibilityObj);
        }
    }
    isFieldVisible(form, visibilityObj, accumulator = [], result = false) {
        const leftValue = this.getLeftValue(form, visibilityObj);
        const rightValue = this.getRightValue(form, visibilityObj);
        const actualResult = this.evaluateCondition(leftValue, rightValue, visibilityObj.operator);
        if (this.isValidOperator(visibilityObj.nextConditionOperator)) {
            accumulator.push({ value: actualResult, operator: visibilityObj.nextConditionOperator });
        }
        if (this.isValidCondition(visibilityObj.nextCondition)) {
            result = this.isFieldVisible(form, visibilityObj.nextCondition, accumulator);
        }
        else if (accumulator[0] !== undefined) {
            result = accumulator[0].value;
            for (let i = 1; i < accumulator.length; i++) {
                if (accumulator[i] !== undefined) {
                    result = this.evaluateLogicalOperation(accumulator[i - 1].operator, result, accumulator[i].value);
                }
            }
        }
        else {
            result = actualResult;
        }
        return !!result;
    }
    getLeftValue(form, visibilityObj) {
        let leftValue = '';
        if (visibilityObj.leftType && visibilityObj.leftType === WidgetTypeEnum.variable) {
            leftValue = this.getVariableValue(form, visibilityObj.leftValue, this.processVarList);
        }
        else if (visibilityObj.leftType && visibilityObj.leftType === WidgetTypeEnum.field) {
            leftValue = this.getFormValue(form, visibilityObj.leftValue);
            if (leftValue === undefined || leftValue === '') {
                const variableValue = this.getVariableValue(form, visibilityObj.leftValue, this.processVarList);
                leftValue = !this.isInvalidValue(variableValue) ? variableValue : leftValue;
            }
        }
        return leftValue;
    }
    getRightValue(form, visibilityObj) {
        let valueFound = '';
        if (visibilityObj.rightType === WidgetTypeEnum.variable) {
            valueFound = this.getVariableValue(form, visibilityObj.rightValue, this.processVarList);
        }
        else if (visibilityObj.rightType === WidgetTypeEnum.field) {
            valueFound = this.getFormValue(form, visibilityObj.rightValue);
        }
        else {
            if (moment(visibilityObj.rightValue, 'YYYY-MM-DD', true).isValid()) {
                valueFound = visibilityObj.rightValue + 'T00:00:00.000Z';
            }
            else {
                valueFound = visibilityObj.rightValue;
            }
        }
        return valueFound;
    }
    getFormValue(form, fieldId) {
        const formField = this.getFormFieldById(form, fieldId);
        let value = undefined;
        if (this.isFormFieldValid(formField)) {
            value = this.getFieldValue(form.values, fieldId);
            if (this.isInvalidValue(value)) {
                value = this.searchValueInForm(formField, fieldId);
            }
        }
        return value;
    }
    isFormFieldValid(formField) {
        return formField && formField.isValid;
    }
    getFieldValue(valueList, fieldId) {
        let labelFilterByName, valueFound;
        if (fieldId && fieldId.indexOf('_LABEL') > 0) {
            labelFilterByName = fieldId.substring(0, fieldId.length - 6);
            if (valueList[labelFilterByName]) {
                valueFound = valueList[labelFilterByName].name;
            }
        }
        else if (valueList[fieldId] && valueList[fieldId].id) {
            valueFound = valueList[fieldId].id;
        }
        else {
            valueFound = valueList[fieldId];
        }
        return valueFound;
    }
    isInvalidValue(value) {
        return value === undefined || value === null;
    }
    getFormFieldById(form, fieldId) {
        return form.getFormFields().find((formField) => this.isSearchedField(formField, fieldId));
    }
    searchValueInForm(formField, fieldId) {
        let fieldValue = '';
        if (formField) {
            fieldValue = this.getObjectValue(formField, fieldId);
            if (!fieldValue) {
                if (formField.value && formField.value.id) {
                    fieldValue = formField.value.id;
                }
                else if (!this.isInvalidValue(formField.value)) {
                    fieldValue = formField.value;
                }
            }
        }
        return fieldValue;
    }
    isParentTabVisible(form, currentFormField) {
        const containers = this.getFormTabContainers(form);
        let isVisible = true;
        containers.map((container) => {
            if (!!this.getCurrentFieldFromTabById(container, currentFormField.id)) {
                const currentTab = form.tabs.find((tab) => tab.id === container.tab);
                if (!!currentTab) {
                    isVisible = currentTab.isVisible;
                }
            }
        });
        return isVisible;
    }
    getCurrentFieldFromTabById(container, fieldId) {
        const tabFields = Object.keys(container.field.fields).map(key => container.field.fields[key]);
        let currentField;
        for (const tabField of tabFields) {
            currentField = tabField.find((tab) => tab.id === fieldId);
            if (currentField) {
                return currentField;
            }
        }
        return null;
    }
    getFormTabContainers(form) {
        if (!!form) {
            return form.fields.filter(field => field.type === 'container' && field.tab);
        }
        return [];
    }
    getObjectValue(field, fieldId) {
        let value = '';
        if (field.value && field.value.name) {
            value = field.value.name;
        }
        else if (field.options) {
            const option = field.options.find((opt) => opt.id === field.value);
            if (option) {
                value = this.getValueFromOption(fieldId, option);
            }
        }
        return value;
    }
    getValueFromOption(fieldId, option) {
        let optionValue = '';
        if (fieldId && fieldId.indexOf('_LABEL') > 0) {
            optionValue = option.name;
        }
        else {
            optionValue = option.id;
        }
        return optionValue;
    }
    isSearchedField(field, fieldId) {
        const fieldToFind = (fieldId === null || fieldId === void 0 ? void 0 : fieldId.indexOf('_LABEL')) > 0 ? fieldId.replace('_LABEL', '') : fieldId;
        return (field.id && fieldToFind) ? field.id.toUpperCase() === fieldToFind.toUpperCase() : false;
    }
    getVariableValue(form, name, processVarList) {
        const processVariableValue = this.getProcessVariableValue(name, processVarList);
        const variableDefaultValue = form.getFormVariableValue(name);
        return (processVariableValue === undefined) ? variableDefaultValue : processVariableValue;
    }
    getProcessVariableValue(name, processVarList) {
        if (processVarList) {
            const processVariable = processVarList.find(variable => variable.id === name ||
                variable.id === `variables.${name}`);
            if (processVariable) {
                return processVariable.value;
            }
        }
        return undefined;
    }
    evaluateLogicalOperation(logicOp, previousValue, newValue) {
        switch (logicOp) {
            case 'and':
                return previousValue && newValue;
            case 'or':
                return previousValue || newValue;
            case 'and-not':
                return previousValue && !newValue;
            case 'or-not':
                return previousValue || !newValue;
            default:
                this.logService.error(`Invalid operator: ${logicOp}`);
                return undefined;
        }
    }
    evaluateCondition(leftValue, rightValue, operator) {
        switch (operator) {
            case '==':
                return leftValue + '' === rightValue + '';
            case '<':
                return leftValue < rightValue;
            case '!=':
                return leftValue + '' !== rightValue + '';
            case '>':
                return leftValue > rightValue;
            case '>=':
                return leftValue >= rightValue;
            case '<=':
                return leftValue <= rightValue;
            case 'empty':
                return leftValue ? leftValue === '' : true;
            case '!empty':
                return leftValue ? leftValue !== '' : false;
            default:
                this.logService.error(`Invalid operator: ${operator}`);
                return undefined;
        }
    }
    cleanProcessVariable() {
        this.processVarList = [];
    }
    getTaskProcessVariable(taskId) {
        return from(this.apiService.getInstance().activiti.taskFormsApi.getTaskFormVariables(taskId))
            .pipe(map((res) => {
            const jsonRes = this.toJson(res);
            this.processVarList = jsonRes;
            return jsonRes;
        }), catchError(() => this.handleError()));
    }
    toJson(res) {
        return res || {};
    }
    isValidOperator(operator) {
        return operator !== undefined;
    }
    isValidCondition(condition) {
        return !!(condition && condition.operator);
    }
    handleError() {
        this.logService.error('Error while performing a call');
        return throwError('Error while performing a call - Server error');
    }
}
WidgetVisibilityService.ɵprov = i0.ɵɵdefineInjectable({ factory: function WidgetVisibilityService_Factory() { return new WidgetVisibilityService(i0.ɵɵinject(i1.AlfrescoApiService), i0.ɵɵinject(i2.LogService)); }, token: WidgetVisibilityService, providedIn: "root" });
WidgetVisibilityService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
WidgetVisibilityService.ctorParameters = () => [
    { type: AlfrescoApiService },
    { type: LogService }
];
//# sourceMappingURL=data:application/json;base64,