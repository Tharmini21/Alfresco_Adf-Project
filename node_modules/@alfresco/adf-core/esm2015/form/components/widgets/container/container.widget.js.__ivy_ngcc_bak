/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, ViewEncapsulation } from '@angular/core';
import { FormService } from './../../../services/form.service';
import { WidgetComponent } from './../widget.component';
import { ContainerWidgetComponentModel } from './container.widget.model';
export class ContainerWidgetComponent extends WidgetComponent {
    constructor(formService) {
        super(formService);
        this.formService = formService;
    }
    onExpanderClicked() {
        if (this.content && this.content.isCollapsible()) {
            this.content.isExpanded = !this.content.isExpanded;
        }
    }
    ngOnInit() {
        if (this.field) {
            this.content = new ContainerWidgetComponentModel(this.field);
            this.getNumberOfColumnsFromTheBiggestBetweenJsonAndColumnsLengthOrOne();
            this.fields = this.getFields();
        }
    }
    getNumberOfColumnsFromTheBiggestBetweenJsonAndColumnsLengthOrOne() {
        var _a, _b, _c, _d;
        this.numberOfColumns = (((_a = this.content.json) === null || _a === void 0 ? void 0 : _a.numberOfColumns) || 1) > (((_b = this.content.columns) === null || _b === void 0 ? void 0 : _b.length) || 1) ?
            (((_c = this.content.json) === null || _c === void 0 ? void 0 : _c.numberOfColumns) || 1) :
            (((_d = this.content.columns) === null || _d === void 0 ? void 0 : _d.length) || 1);
    }
    getFields() {
        var _a;
        const serialisedFormFields = [];
        const maxColumnFieldsSize = this.getMaxColumnFieldSize();
        for (let rowIndex = 0; rowIndex < maxColumnFieldsSize; rowIndex++) {
            (_a = this.content) === null || _a === void 0 ? void 0 : _a.columns.flatMap((currentColumn) => {
                var _a;
                if (!!(currentColumn === null || currentColumn === void 0 ? void 0 : currentColumn.fields[rowIndex])) {
                    serialisedFormFields.push(currentColumn === null || currentColumn === void 0 ? void 0 : currentColumn.fields[rowIndex]);
                }
                else {
                    const firstRowElementColSpan = (_a = currentColumn === null || currentColumn === void 0 ? void 0 : currentColumn.fields[0]) === null || _a === void 0 ? void 0 : _a.colspan;
                    if (!!firstRowElementColSpan && rowIndex > 0) {
                        for (let i = 0; i < firstRowElementColSpan; i++) {
                            serialisedFormFields.push(null);
                        }
                    }
                }
            });
        }
        return serialisedFormFields;
    }
    getMaxColumnFieldSize() {
        var _a, _b, _c, _d, _e, _f;
        let maxFieldSize = 0;
        if (((_b = (_a = this.content) === null || _a === void 0 ? void 0 : _a.columns) === null || _b === void 0 ? void 0 : _b.length) > 0) {
            maxFieldSize = (_f = (_e = (_d = (_c = this.content) === null || _c === void 0 ? void 0 : _c.columns) === null || _d === void 0 ? void 0 : _d.reduce((prevColumn, currentColumn) => {
                var _a;
                return currentColumn.fields.length > ((_a = prevColumn === null || prevColumn === void 0 ? void 0 : prevColumn.fields) === null || _a === void 0 ? void 0 : _a.length) ? currentColumn : prevColumn;
            })) === null || _e === void 0 ? void 0 : _e.fields) === null || _f === void 0 ? void 0 : _f.length;
        }
        return maxFieldSize;
    }
    getColumnWith(field) {
        const colspan = field ? field.colspan : 1;
        return (100 / this.content.json.numberOfColumns) * colspan + '';
    }
}
ContainerWidgetComponent.decorators = [
    { type: Component, args: [{
                selector: 'container-widget',
                template: "<div [hidden]=\"!content?.isGroup()\" class=\"adf-container-widget__header\">\n    <h4 class=\"adf-container-widget__header-text\" id=\"container-header\"\n        [class.adf-collapsible]=\"content?.isCollapsible()\">\n        <button *ngIf=\"content?.isCollapsible()\"\n                mat-icon-button\n                class=\"mdl-button--icon\"\n                (click)=\"onExpanderClicked()\">\n            <mat-icon>{{ content?.isExpanded ? 'expand_more' : 'expand_less' }}</mat-icon>\n        </button>\n        <span (click)=\"onExpanderClicked()\" id=\"container-header-label\">{{content.name | translate }}</span>\n    </h4>\n</div>\n\n<div *ngIf=\"field?.form?.enableFixedSpace else fixingTemplate\">\n    <div class=\"adf-grid-list\" [ngStyle]=\"{ 'grid-template-columns': 'repeat('+numberOfColumns+', 1fr)'}\"\n        *ngIf=\"content?.isExpanded\">\n        <div class=\"adf-grid-list-item\" *ngFor=\"let field of fields\"\n            [ngStyle]=\"{'grid-area': 'auto / auto / span '+(field?.rowspan || 1)+' / span '+(field?.colspan || 1)}\">\n            <adf-form-field *ngIf=\"field\" [field]=\"field\"></adf-form-field>\n        </div>\n    </div>\n</div>\n\n<ng-template #fixingTemplate>\n    <section class=\"adf-grid-list-column-view\" *ngIf=\"content?.isExpanded\">\n        <div class=\"adf-grid-list-single-column\" *ngFor=\"let column of content?.columns\" [style.width.%]=\"getColumnWith(field)\">\n            <div class=\"adf-grid-list-column-view-item\" *ngFor=\"let field of column?.fields\">\n                <adf-form-field *ngIf=\"field\" [field]=\"field\"></adf-form-field>\n            </div>\n        </div>\n    </section>\n</ng-template>\n",
                host: {
                    '(click)': 'event($event)',
                    '(blur)': 'event($event)',
                    '(change)': 'event($event)',
                    '(focus)': 'event($event)',
                    '(focusin)': 'event($event)',
                    '(focusout)': 'event($event)',
                    '(input)': 'event($event)',
                    '(invalid)': 'event($event)',
                    '(select)': 'event($event)'
                },
                encapsulation: ViewEncapsulation.None
            },] }
];
ContainerWidgetComponent.ctorParameters = () => [
    { type: FormService }
];
//# sourceMappingURL=data:application/json;base64,