/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, ViewEncapsulation, InjectionToken, Inject, Optional } from '@angular/core';
import { FormService } from './../../../services/form.service';
import { WidgetComponent } from './../widget.component';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './../../../services/form.service';
import * as ɵngcc2 from '@angular/common';
import * as ɵngcc3 from '@angular/material/form-field';
import * as ɵngcc4 from '@angular/material/input';
import * as ɵngcc5 from '@angular/forms';
import * as ɵngcc6 from '@angular/material/tooltip';
import * as ɵngcc7 from '../error/error.component';
import * as ɵngcc8 from '@ngx-translate/core';

function AmountWidgetComponent_span_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtext(1, "*");
    ɵngcc0.ɵɵelementEnd();
} }
function AmountWidgetComponent_error_widget_10_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "error-widget", 7);
    ɵngcc0.ɵɵpipe(1, "translate");
} if (rf & 2) {
    ɵngcc0.ɵɵpropertyInterpolate("required", ɵngcc0.ɵɵpipeBind1(1, 1, "FORM.FIELD.REQUIRED"));
} }
export const ADF_AMOUNT_SETTINGS = new InjectionToken('adf-amount-settings');
export class AmountWidgetComponent extends WidgetComponent {
    constructor(formService, settings) {
        super(formService);
        this.formService = formService;
        this.settings = settings;
        this.showPlaceholder = true;
        this.currency = AmountWidgetComponent.DEFAULT_CURRENCY;
    }
    get placeholder() {
        return this.showPlaceholder ? this.field.placeholder : '';
    }
    ngOnInit() {
        if (this.field) {
            if (this.field.currency) {
                this.currency = this.field.currency;
            }
            if (this.field.readOnly) {
                this.showPlaceholder = this.settings && this.settings.showReadonlyPlaceholder;
            }
        }
    }
}
AmountWidgetComponent.ɵfac = function AmountWidgetComponent_Factory(t) { return new (t || AmountWidgetComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FormService), ɵngcc0.ɵɵdirectiveInject(ADF_AMOUNT_SETTINGS, 8)); };
AmountWidgetComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: AmountWidgetComponent, selectors: [["amount-widget"]], hostBindings: function AmountWidgetComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function AmountWidgetComponent_click_HostBindingHandler($event) { return ctx.event($event); })("blur", function AmountWidgetComponent_blur_HostBindingHandler($event) { return ctx.event($event); })("change", function AmountWidgetComponent_change_HostBindingHandler($event) { return ctx.event($event); })("focus", function AmountWidgetComponent_focus_HostBindingHandler($event) { return ctx.event($event); })("focusin", function AmountWidgetComponent_focusin_HostBindingHandler($event) { return ctx.event($event); })("focusout", function AmountWidgetComponent_focusout_HostBindingHandler($event) { return ctx.event($event); })("input", function AmountWidgetComponent_input_HostBindingHandler($event) { return ctx.event($event); })("invalid", function AmountWidgetComponent_invalid_HostBindingHandler($event) { return ctx.event($event); })("select", function AmountWidgetComponent_select_HostBindingHandler($event) { return ctx.event($event); });
    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 11, vars: 22, consts: [[1, "adf-label"], [4, "ngIf"], [1, "adf-amount-widget__input"], ["matPrefix", "", 1, "adf-amount-widget__prefix-spacing"], ["matInput", "", "matTooltipPosition", "above", "matTooltipShowDelay", "1000", "type", "text", 1, "adf-input", 3, "matTooltip", "id", "required", "placeholder", "value", "ngModel", "disabled", "ngModelChange"], [3, "error"], [3, "required", 4, "ngIf"], [3, "required"]], template: function AmountWidgetComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div");
        ɵngcc0.ɵɵelementStart(1, "label", 0);
        ɵngcc0.ɵɵtext(2);
        ɵngcc0.ɵɵpipe(3, "translate");
        ɵngcc0.ɵɵtemplate(4, AmountWidgetComponent_span_4_Template, 2, 0, "span", 1);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(5, "mat-form-field", 2);
        ɵngcc0.ɵɵelementStart(6, "span", 3);
        ɵngcc0.ɵɵtext(7);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(8, "input", 4);
        ɵngcc0.ɵɵlistener("ngModelChange", function AmountWidgetComponent_Template_input_ngModelChange_8_listener($event) { return ctx.field.value = $event; })("ngModelChange", function AmountWidgetComponent_Template_input_ngModelChange_8_listener() { return ctx.onFieldChanged(ctx.field); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(9, "error-widget", 5);
        ɵngcc0.ɵɵtemplate(10, AmountWidgetComponent_error_widget_10_Template, 2, 3, "error-widget", 6);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵclassMapInterpolate1("adf-amount-widget__container adf-amount-widget ", ctx.field.className, "");
        ɵngcc0.ɵɵclassProp("adf-invalid", !ctx.field.isValid)("adf-readonly", ctx.field.readOnly);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵattribute("for", ctx.field.id);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(3, 20, ctx.field.name));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isRequired());
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate1("", ctx.currency, " \u00A0");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("matTooltip", ctx.field.tooltip)("id", ctx.field.id)("required", ctx.isRequired())("placeholder", ctx.placeholder)("value", ctx.field.value)("ngModel", ctx.field.value)("disabled", ctx.field.readOnly);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("error", ctx.field.validationSummary);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isInvalidFieldRequired());
    } }, directives: [ɵngcc2.NgIf, ɵngcc3.MatFormField, ɵngcc3.MatPrefix, ɵngcc4.MatInput, ɵngcc5.DefaultValueAccessor, ɵngcc6.MatTooltip, ɵngcc5.RequiredValidator, ɵngcc5.NgControlStatus, ɵngcc5.NgModel, ɵngcc7.ErrorWidgetComponent], pipes: [ɵngcc8.TranslatePipe], encapsulation: 2 });
AmountWidgetComponent.DEFAULT_CURRENCY = '$';
AmountWidgetComponent.ctorParameters = () => [
    { type: FormService },
    { type: undefined, decorators: [{ type: Inject, args: [ADF_AMOUNT_SETTINGS,] }, { type: Optional }] }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AmountWidgetComponent, [{
        type: Component,
        args: [{
                selector: 'amount-widget',
                template: "<div class=\"adf-amount-widget__container adf-amount-widget {{field.className}}\"\n     [class.adf-invalid]=\"!field.isValid\"\n     [class.adf-readonly]=\"field.readOnly\">\n    <label class=\"adf-label\"\n           [attr.for]=\"field.id\">{{field.name | translate }}<span *ngIf=\"isRequired()\">*</span></label>\n    <mat-form-field class=\"adf-amount-widget__input\">\n        <span matPrefix class=\"adf-amount-widget__prefix-spacing\">{{ currency }} &nbsp;</span>\n        <input matInput\n               [matTooltip]=\"field.tooltip\"\n               matTooltipPosition=\"above\"\n               matTooltipShowDelay=\"1000\"\n               class=\"adf-input\"\n               type=\"text\"\n               [id]=\"field.id\"\n               [required]=\"isRequired()\"\n               [placeholder]=\"placeholder\"\n               [value]=\"field.value\"\n               [(ngModel)]=\"field.value\"\n               (ngModelChange)=\"onFieldChanged(field)\"\n               [disabled]=\"field.readOnly\">\n    </mat-form-field>\n    <error-widget [error]=\"field.validationSummary\"></error-widget>\n    <error-widget *ngIf=\"isInvalidFieldRequired()\"\n                  required=\"{{ 'FORM.FIELD.REQUIRED' | translate }}\"></error-widget>\n</div>\n",
                host: {
                    '(click)': 'event($event)',
                    '(blur)': 'event($event)',
                    '(change)': 'event($event)',
                    '(focus)': 'event($event)',
                    '(focusin)': 'event($event)',
                    '(focusout)': 'event($event)',
                    '(input)': 'event($event)',
                    '(invalid)': 'event($event)',
                    '(select)': 'event($event)'
                },
                encapsulation: ViewEncapsulation.None
            }]
    }], function () { return [{ type: ɵngcc1.FormService }, { type: undefined, decorators: [{
                type: Inject,
                args: [ADF_AMOUNT_SETTINGS]
            }, {
                type: Optional
            }] }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW1vdW50LndpZGdldC5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vaG9tZS90cmF2aXMvYnVpbGQvQWxmcmVzY28vYWxmcmVzY28tbmcyLWNvbXBvbmVudHMvbGliL2NvcmUvZm9ybS9jb21wb25lbnRzL3dpZGdldHMvYW1vdW50L2Ftb3VudC53aWRnZXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUlILE9BQU8sRUFBRSxTQUFTLEVBQVUsaUJBQWlCLEVBQUUsY0FBYyxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDdkcsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBQy9ELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQU14RCxNQUFNLENBQUMsTUFBTSxtQkFBbUIsR0FBRyxJQUFJLGNBQWMsQ0FBdUIscUJBQXFCLENBQUMsQ0FBQztBQWtCbkcsTUFBTSxPQUFPLHFCQUFzQixTQUFRLGVBQWU7QUFBRyxJQVd6RCxZQUNXLFdBQXdCLEVBR3ZCLFFBQThCO0FBQzNDLFFBQ0ssS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBQzNCLFFBTmUsZ0JBQVcsR0FBWCxXQUFXLENBQWE7QUFBQyxRQUd4QixhQUFRLEdBQVIsUUFBUSxDQUFzQjtBQUM5QyxRQWJZLG9CQUFlLEdBQUcsSUFBSSxDQUFDO0FBQ25DLFFBQ0ksYUFBUSxHQUFXLHFCQUFxQixDQUFDLGdCQUFnQixDQUFDO0FBQzlELElBWUksQ0FBQztBQUNMLElBWkksSUFBSSxXQUFXO0FBQUssUUFDaEIsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0FBQ2xFLElBQUksQ0FBQztBQUNMLElBVUksUUFBUTtBQUNaLFFBQVEsSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFO0FBQ3hCLFlBQVksSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRTtBQUNyQyxnQkFBZ0IsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQztBQUNwRCxhQUFhO0FBQ2IsWUFDWSxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFO0FBQ3JDLGdCQUFnQixJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQyxRQUFRLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyx1QkFBdUIsQ0FBQztBQUM5RixhQUFhO0FBQ2IsU0FBUztBQUNULElBQUksQ0FBQztBQUNMOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OFJBQ0E7QUE5Qlcsc0NBQWdCLEdBQVcsR0FBRyxDQUFDLEFBRnJDO0FBQUM7RUFoQkwsU0FBUyxTQUFDLHBCQWdCMEMsWUF6QjVDLFdBQVc7V0FVaEIsUUFBUSxFQUFFLGVBQWUsa0JBQ3pCLHREQVhvQiw0Q0FzQ2YsTUFBTSxTQUFDLG1CQUFtQixjQUMxQixRQUFRO0FBQ2Q7Ozs7O3doQ0E3Qm9DLGtCQUNuQyxJQUFJLEVBQUUsc0JBQ0YsU0FBUyxFQUFFLGVBQWUsc0JBQzFCLFFBQVEsRUFBRSxlQUFlLHNCQUN6QixVQUFVLEVBQUUsZUFBZSxzQkFDM0IsU0FBUyxFQUFFLGVBQWU7QUFDMUIsV0FBVyxFQUFFO0lBQWUsc0JBQzVCLFlBQVksRUFBRTtPQUFlLHNCQUM3QixTQUFTLEVBQUU7UUFBZSxzQkFDMUIsV0FBVyxFQUFFO1NBQWUsc0JBQzVCLFVBQVUsRUFBRTtVQUFlLGtCQUM5QixrQkFDRDtTQUFhLEVBQUUsaUJBQWlCLENBQUMsSUFBSSxjQUN4Qzs7Ozs7Ozs7Ozs7O2tDQWdCSTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuIC8qIHRzbGludDpkaXNhYmxlOmNvbXBvbmVudC1zZWxlY3RvciAgKi9cblxuaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIFZpZXdFbmNhcHN1bGF0aW9uLCBJbmplY3Rpb25Ub2tlbiwgSW5qZWN0LCBPcHRpb25hbCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRm9ybVNlcnZpY2UgfSBmcm9tICcuLy4uLy4uLy4uL3NlcnZpY2VzL2Zvcm0uc2VydmljZSc7XG5pbXBvcnQgeyBXaWRnZXRDb21wb25lbnQgfSBmcm9tICcuLy4uL3dpZGdldC5jb21wb25lbnQnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEFtb3VudFdpZGdldFNldHRpbmdzIHtcbiAgICBzaG93UmVhZG9ubHlQbGFjZWhvbGRlcjogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGNvbnN0IEFERl9BTU9VTlRfU0VUVElOR1MgPSBuZXcgSW5qZWN0aW9uVG9rZW48QW1vdW50V2lkZ2V0U2V0dGluZ3M+KCdhZGYtYW1vdW50LXNldHRpbmdzJyk7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnYW1vdW50LXdpZGdldCcsXG4gICAgdGVtcGxhdGVVcmw6ICcuL2Ftb3VudC53aWRnZXQuaHRtbCcsXG4gICAgaG9zdDoge1xuICAgICAgICAnKGNsaWNrKSc6ICdldmVudCgkZXZlbnQpJyxcbiAgICAgICAgJyhibHVyKSc6ICdldmVudCgkZXZlbnQpJyxcbiAgICAgICAgJyhjaGFuZ2UpJzogJ2V2ZW50KCRldmVudCknLFxuICAgICAgICAnKGZvY3VzKSc6ICdldmVudCgkZXZlbnQpJyxcbiAgICAgICAgJyhmb2N1c2luKSc6ICdldmVudCgkZXZlbnQpJyxcbiAgICAgICAgJyhmb2N1c291dCknOiAnZXZlbnQoJGV2ZW50KScsXG4gICAgICAgICcoaW5wdXQpJzogJ2V2ZW50KCRldmVudCknLFxuICAgICAgICAnKGludmFsaWQpJzogJ2V2ZW50KCRldmVudCknLFxuICAgICAgICAnKHNlbGVjdCknOiAnZXZlbnQoJGV2ZW50KSdcbiAgICB9LFxuICAgIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmVcbn0pXG5leHBvcnQgY2xhc3MgQW1vdW50V2lkZ2V0Q29tcG9uZW50IGV4dGVuZHMgV2lkZ2V0Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcblxuICAgIHN0YXRpYyBERUZBVUxUX0NVUlJFTkNZOiBzdHJpbmcgPSAnJCc7XG4gICAgcHJpdmF0ZSBzaG93UGxhY2Vob2xkZXIgPSB0cnVlO1xuXG4gICAgY3VycmVuY3k6IHN0cmluZyA9IEFtb3VudFdpZGdldENvbXBvbmVudC5ERUZBVUxUX0NVUlJFTkNZO1xuXG4gICAgZ2V0IHBsYWNlaG9sZGVyKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLnNob3dQbGFjZWhvbGRlciA/IHRoaXMuZmllbGQucGxhY2Vob2xkZXIgOiAnJztcbiAgICB9XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHVibGljIGZvcm1TZXJ2aWNlOiBGb3JtU2VydmljZSxcbiAgICAgICAgQEluamVjdChBREZfQU1PVU5UX1NFVFRJTkdTKVxuICAgICAgICBAT3B0aW9uYWwoKVxuICAgICAgICBwcml2YXRlIHNldHRpbmdzOiBBbW91bnRXaWRnZXRTZXR0aW5nc1xuICAgICkge1xuICAgICAgICBzdXBlcihmb3JtU2VydmljZSk7XG4gICAgfVxuXG4gICAgbmdPbkluaXQoKSB7XG4gICAgICAgIGlmICh0aGlzLmZpZWxkKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5maWVsZC5jdXJyZW5jeSkge1xuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVuY3kgPSB0aGlzLmZpZWxkLmN1cnJlbmN5O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodGhpcy5maWVsZC5yZWFkT25seSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2hvd1BsYWNlaG9sZGVyID0gdGhpcy5zZXR0aW5ncyAmJiB0aGlzLnNldHRpbmdzLnNob3dSZWFkb25seVBsYWNlaG9sZGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG59XG4iXX0=