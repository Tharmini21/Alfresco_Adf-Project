/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, ChangeDetectionStrategy, Input, ViewEncapsulation } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { TranslationService } from '../../services/translation.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/router';
import * as ɵngcc2 from '../../services/translation.service';
import * as ɵngcc3 from '@ngx-translate/core';

const _c0 = [[["", "adf-error-content-actions", ""]]];
const _c1 = ["[adf-error-content-actions]"];
export class ErrorContentComponent {
    constructor(route, translateService) {
        this.route = route;
        this.translateService = translateService;
        this.errorCode = ErrorContentComponent.UNKNOWN_ERROR;
    }
    ngOnInit() {
        if (this.route) {
            this.route.params.subscribe(params => {
                const code = params['id'] || this.errorCode;
                const errorHasTranslation = this.checkErrorExists(code);
                this.errorCodeTranslated = errorHasTranslation ? code : ErrorContentComponent.UNKNOWN_ERROR;
            });
        }
    }
    checkErrorExists(errorCode) {
        const errorMessage = this.translateService.instant('ERROR_CONTENT.' + errorCode);
        return errorMessage !== ('ERROR_CONTENT.' + errorCode);
    }
}
ErrorContentComponent.ɵfac = function ErrorContentComponent_Factory(t) { return new (t || ErrorContentComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ActivatedRoute), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.TranslationService)); };
ErrorContentComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ErrorContentComponent, selectors: [["adf-error-content"]], hostAttrs: [1, "adf-error-content"], inputs: { errorCode: "errorCode" }, ngContentSelectors: _c1, decls: 11, vars: 7, consts: [[1, "adf-error-content"], [1, "adf-error-content-code"], [1, "adf-error-content-shadow"], [1, "adf-error-content-title"], [1, "adf-error-content-description"]], template: function ErrorContentComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef(_c0);
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "p", 1);
        ɵngcc0.ɵɵtext(2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(3, "div", 2);
        ɵngcc0.ɵɵelementStart(4, "p", 3);
        ɵngcc0.ɵɵtext(5);
        ɵngcc0.ɵɵpipe(6, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(7, "p", 4);
        ɵngcc0.ɵɵtext(8);
        ɵngcc0.ɵɵpipe(9, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵprojection(10);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate1(" ", ctx.errorCodeTranslated, " ");
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(6, 3, "ERROR_CONTENT." + ctx.errorCodeTranslated + ".TITLE"), " ");
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(9, 5, "ERROR_CONTENT." + ctx.errorCodeTranslated + ".DESCRIPTION"), " ");
    } }, pipes: [ɵngcc3.TranslatePipe], encapsulation: 2, changeDetection: 0 });
ErrorContentComponent.UNKNOWN_ERROR = 'UNKNOWN';
ErrorContentComponent.ctorParameters = () => [
    { type: ActivatedRoute },
    { type: TranslationService }
];
ErrorContentComponent.propDecorators = {
    errorCode: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ErrorContentComponent, [{
        type: Component,
        args: [{
                selector: 'adf-error-content',
                template: "<div class=\"adf-error-content\">\n    <p class=\"adf-error-content-code\">\n        {{ errorCodeTranslated }}\n    </p>\n    <div class=\"adf-error-content-shadow\"></div>\n    <p class=\"adf-error-content-title\">\n        {{ 'ERROR_CONTENT.' + errorCodeTranslated + '.TITLE' | translate }}\n    </p>\n    <p class=\"adf-error-content-description\">\n        {{ 'ERROR_CONTENT.' + errorCodeTranslated + '.DESCRIPTION' | translate }}\n    </p>\n    <ng-content select=\"[adf-error-content-actions]\"></ng-content>\n</div>\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                host: { class: 'adf-error-content' }
            }]
    }], function () { return [{ type: ɵngcc1.ActivatedRoute }, { type: ɵngcc2.TranslationService }]; }, { errorCode: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3ItY29udGVudC5jb21wb25lbnQuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL2hvbWUvdHJhdmlzL2J1aWxkL0FsZnJlc2NvL2FsZnJlc2NvLW5nMi1jb21wb25lbnRzL2xpYi9jb3JlL3RlbXBsYXRlcy9lcnJvci1jb250ZW50L2Vycm9yLWNvbnRlbnQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFFSCxPQUFPLEVBQ0gsU0FBUyxFQUNULHVCQUF1QixFQUN2QixLQUFLLEVBQ0wsaUJBQWlCLEVBRXBCLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUNqRCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQzs7Ozs7Ozs7QUFReEUsTUFBTSxPQUFPLHFCQUFxQjtBQUFHLElBVWpDLFlBQW9CLEtBQXFCLEVBQ3JCLGdCQUFvQztBQUM1RCxRQUZ3QixVQUFLLEdBQUwsS0FBSyxDQUFnQjtBQUFDLFFBQ3RCLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBb0I7QUFBQyxRQUx6RCxjQUFTLEdBQVcscUJBQXFCLENBQUMsYUFBYSxDQUFDO0FBQzVELElBS0ksQ0FBQztBQUNMLElBQ0ksUUFBUTtBQUNaLFFBQVEsSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFO0FBQ3hCLFlBQVksSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxFQUFFO0FBQ2pELGdCQUFnQixNQUFNLElBQUksR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQztBQUM1RCxnQkFBZ0IsTUFBTSxtQkFBbUIsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDeEUsZ0JBQWdCLElBQUksQ0FBQyxtQkFBbUIsR0FBSSxtQkFBbUIsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxxQkFBcUIsQ0FBQyxhQUFhLENBQUM7QUFDN0csWUFBWSxDQUFDLENBQUMsQ0FBQztBQUNmLFNBQVM7QUFDVCxJQUFJLENBQUM7QUFDTCxJQUNJLGdCQUFnQixDQUFDLFNBQWlCO0FBQUksUUFDbEMsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsR0FBRyxTQUFTLENBQUMsQ0FBQztBQUN6RixRQUFRLE9BQU8sWUFBWSxLQUFLLENBQUMsZ0JBQWdCLEdBQUcsU0FBUyxDQUFDLENBQUM7QUFDL0QsSUFBSSxDQUFDO0FBQ0w7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O2dGQUNBO0FBM0JXLG1DQUFhLEdBQUcsU0FBUyxDQUFDLEFBRmhDO0FBQUM7RUFQTCxTQUFTLFNBQUMscEJBTzBDLFlBVDVDLGNBQWM7UUFHbkIsUUFBUSxFQUFFLGxCQUhhLFlBQ2xCLGtCQUFrQjtBQUFHO0NBRUcsa0JBQzdCLG5CQUg2QjtBQUNoQyx3QkFZSSxLQUFLO0FBQ1Q7Ozs7O3FUQVhnRCxrQkFDN0MsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU0sa0JBQy9DLGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJLGtCQUNyQyxJQUFJLEVBQUUsRUFBRSxLQUFLLEVBQUUsbUJBQW1CLEVBQUUsY0FDdkM7Ozs7Ozs7b0JBT0U7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7XG4gICAgQ29tcG9uZW50LFxuICAgIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICAgIElucHV0LFxuICAgIFZpZXdFbmNhcHN1bGF0aW9uLFxuICAgIE9uSW5pdFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFjdGl2YXRlZFJvdXRlIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IFRyYW5zbGF0aW9uU2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL3RyYW5zbGF0aW9uLnNlcnZpY2UnO1xuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdhZGYtZXJyb3ItY29udGVudCcsXG4gICAgdGVtcGxhdGVVcmw6ICcuL2Vycm9yLWNvbnRlbnQuY29tcG9uZW50Lmh0bWwnLFxuICAgIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICAgIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmUsXG4gICAgaG9zdDogeyBjbGFzczogJ2FkZi1lcnJvci1jb250ZW50JyB9XG59KVxuZXhwb3J0IGNsYXNzIEVycm9yQ29udGVudENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG5cbiAgICBzdGF0aWMgVU5LTk9XTl9FUlJPUiA9ICdVTktOT1dOJztcblxuICAgIC8qKiBFcnJvciBjb2RlIGFzc29jaWF0ZWQgd2l0aCB0aGlzIGVycm9yLiAqL1xuICAgIEBJbnB1dCgpXG4gICAgZXJyb3JDb2RlOiBzdHJpbmcgPSBFcnJvckNvbnRlbnRDb21wb25lbnQuVU5LTk9XTl9FUlJPUjtcblxuICAgIGVycm9yQ29kZVRyYW5zbGF0ZWQ6IHN0cmluZztcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgcm91dGU6IEFjdGl2YXRlZFJvdXRlLFxuICAgICAgICAgICAgICAgIHByaXZhdGUgdHJhbnNsYXRlU2VydmljZTogVHJhbnNsYXRpb25TZXJ2aWNlKSB7XG4gICAgfVxuXG4gICAgbmdPbkluaXQoKSB7XG4gICAgICAgIGlmICh0aGlzLnJvdXRlKSB7XG4gICAgICAgICAgICB0aGlzLnJvdXRlLnBhcmFtcy5zdWJzY3JpYmUocGFyYW1zID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBjb2RlID0gcGFyYW1zWydpZCddIHx8IHRoaXMuZXJyb3JDb2RlO1xuICAgICAgICAgICAgICAgIGNvbnN0IGVycm9ySGFzVHJhbnNsYXRpb24gPSB0aGlzLmNoZWNrRXJyb3JFeGlzdHMoY29kZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5lcnJvckNvZGVUcmFuc2xhdGVkID0gIGVycm9ySGFzVHJhbnNsYXRpb24gPyBjb2RlIDogRXJyb3JDb250ZW50Q29tcG9uZW50LlVOS05PV05fRVJST1I7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNoZWNrRXJyb3JFeGlzdHMoZXJyb3JDb2RlOiBzdHJpbmcgKSB7XG4gICAgICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9IHRoaXMudHJhbnNsYXRlU2VydmljZS5pbnN0YW50KCdFUlJPUl9DT05URU5ULicgKyBlcnJvckNvZGUpO1xuICAgICAgICByZXR1cm4gZXJyb3JNZXNzYWdlICE9PSAoJ0VSUk9SX0NPTlRFTlQuJyArIGVycm9yQ29kZSk7XG4gICAgfVxuXG59XG4iXX0=