/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Directive, EventEmitter, HostListener, Input, Output } from '@angular/core';
import { from, forkJoin, of } from 'rxjs';
import { AlfrescoApiService } from '../services/alfresco-api.service';
import { catchError, map } from 'rxjs/operators';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../services/alfresco-api.service';
export class NodeFavoriteDirective {
    constructor(alfrescoApiService) {
        this.alfrescoApiService = alfrescoApiService;
        this.favorites = [];
        this.selection = [];
        this.toggle = new EventEmitter();
        this.error = new EventEmitter();
    }
    onClick() {
        this.toggleFavorite();
    }
    ngOnChanges(changes) {
        if (!changes.selection.currentValue.length) {
            this.favorites = [];
            return;
        }
        this.markFavoritesNodes(changes.selection.currentValue);
    }
    toggleFavorite() {
        if (!this.favorites.length) {
            return;
        }
        const every = this.favorites.every((selected) => selected.entry.isFavorite);
        if (every) {
            const batch = this.favorites.map((selected) => {
                const id = selected.entry.nodeId || selected.entry.id;
                return from(this.alfrescoApiService.favoritesApi.removeFavoriteSite('-me-', id));
            });
            forkJoin(batch).subscribe(() => {
                this.favorites.map((selected) => selected.entry.isFavorite = false);
                this.toggle.emit();
            }, (error) => this.error.emit(error));
        }
        if (!every) {
            const notFavorite = this.favorites.filter((node) => !node.entry.isFavorite);
            const body = notFavorite.map((node) => this.createFavoriteBody(node));
            from(this.alfrescoApiService.favoritesApi.addFavorite('-me-', body))
                .subscribe(() => {
                notFavorite.map((selected) => selected.entry.isFavorite = true);
                this.toggle.emit();
            }, (error) => this.error.emit(error));
        }
    }
    markFavoritesNodes(selection) {
        if (selection.length <= this.favorites.length) {
            const newFavorites = this.reduce(this.favorites, selection);
            this.favorites = newFavorites;
        }
        const result = this.diff(selection, this.favorites);
        const batch = this.getProcessBatch(result);
        forkJoin(batch).subscribe((data) => {
            this.favorites.push(...data);
        });
    }
    hasFavorites() {
        if (this.favorites && !this.favorites.length) {
            return false;
        }
        return this.favorites.every((selected) => selected.entry.isFavorite);
    }
    getProcessBatch(selection) {
        return selection.map((selected) => this.getFavorite(selected));
    }
    getFavorite(selected) {
        const node = selected.entry;
        if (node && node.hasOwnProperty('isFavorite')) {
            return of(selected);
        }
        const { name, isFile, isFolder } = node;
        const id = node.nodeId || node.id;
        const promise = this.alfrescoApiService.favoritesApi.getFavorite('-me-', id);
        return from(promise).pipe(map(() => ({
            entry: {
                id,
                isFolder,
                isFile,
                name,
                isFavorite: true
            }
        })), catchError(() => {
            return of({
                entry: {
                    id,
                    isFolder,
                    isFile,
                    name,
                    isFavorite: false
                }
            });
        }));
    }
    createFavoriteBody(node) {
        const type = this.getNodeType(node);
        const id = node.entry.nodeId || node.entry.id;
        return {
            target: {
                [type]: {
                    guid: id
                }
            }
        };
    }
    getNodeType(node) {
        if (!node.entry.isFile && !node.entry.isFolder) {
            return 'file';
        }
        return node.entry.isFile ? 'file' : 'folder';
    }
    diff(list, patch) {
        const ids = patch.map((item) => item.entry.id);
        return list.filter((item) => ids.includes(item.entry.id) ? null : item);
    }
    reduce(patch, comparator) {
        const ids = comparator.map((item) => item.entry.id);
        return patch.filter((item) => ids.includes(item.entry.id) ? item : null);
    }
}
NodeFavoriteDirective.ɵfac = function NodeFavoriteDirective_Factory(t) { return new (t || NodeFavoriteDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.AlfrescoApiService)); };
NodeFavoriteDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: NodeFavoriteDirective, selectors: [["", "adf-node-favorite", ""]], hostBindings: function NodeFavoriteDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function NodeFavoriteDirective_click_HostBindingHandler() { return ctx.onClick(); });
    } }, inputs: { selection: ["adf-node-favorite", "selection"] }, outputs: { toggle: "toggle", error: "error" }, exportAs: ["adfFavorite"], features: [ɵngcc0.ɵɵNgOnChangesFeature] });
NodeFavoriteDirective.ctorParameters = () => [
    { type: AlfrescoApiService }
];
NodeFavoriteDirective.propDecorators = {
    selection: [{ type: Input, args: ['adf-node-favorite',] }],
    toggle: [{ type: Output }],
    error: [{ type: Output }],
    onClick: [{ type: HostListener, args: ['click',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NodeFavoriteDirective, [{
        type: Directive,
        args: [{
                selector: '[adf-node-favorite]',
                exportAs: 'adfFavorite'
            }]
    }], function () { return [{ type: ɵngcc1.AlfrescoApiService }]; }, { selection: [{
            type: Input,
            args: ['adf-node-favorite']
        }], toggle: [{
            type: Output
        }], error: [{
            type: Output
        }], onClick: [{
            type: HostListener,
            args: ['click']
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,