/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Directive, ElementRef, EventEmitter, HostListener, Input, Output } from '@angular/core';
import { forkJoin, from, of } from 'rxjs';
import { AlfrescoApiService } from '../services/alfresco-api.service';
import { TranslationService } from '../services/translation.service';
import { map, catchError, retry } from 'rxjs/operators';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../services/alfresco-api.service';
import * as ɵngcc2 from '../services/translation.service';
export class NodeDeleteDirective {
    constructor(alfrescoApiService, translation, elementRef) {
        this.alfrescoApiService = alfrescoApiService;
        this.translation = translation;
        this.elementRef = elementRef;
        this.permanent = false;
        this.delete = new EventEmitter();
    }
    onClick() {
        this.process(this.selection);
    }
    ngOnChanges() {
        if (!this.selection || (this.selection && this.selection.length === 0)) {
            this.setDisableAttribute(true);
        }
        else {
            if (!this.elementRef.nativeElement.hasAttribute('adf-check-allowable-operation')) {
                this.setDisableAttribute(false);
            }
        }
    }
    setDisableAttribute(disable) {
        this.elementRef.nativeElement.disabled = disable;
    }
    process(selection) {
        if (selection && selection.length) {
            const batch = this.getDeleteNodesBatch(selection);
            forkJoin(...batch)
                .subscribe((data) => {
                const processedItems = this.processStatus(data);
                const message = this.getMessage(processedItems);
                if (message) {
                    this.delete.emit(message);
                }
            });
        }
    }
    getDeleteNodesBatch(selection) {
        return selection.map((node) => this.deleteNode(node));
    }
    deleteNode(node) {
        const id = node.entry.nodeId || node.entry.id;
        let promise;
        if (node.entry.hasOwnProperty('archivedAt') && node.entry['archivedAt']) {
            promise = this.alfrescoApiService.nodesApi.purgeDeletedNode(id);
        }
        else {
            promise = this.alfrescoApiService.nodesApi.deleteNode(id, { permanent: this.permanent });
        }
        return from(promise).pipe(retry(3), map(() => ({
            entry: node.entry,
            status: 1
        })), catchError(() => of({
            entry: node.entry,
            status: 0
        })));
    }
    processStatus(data) {
        const deleteStatus = {
            success: [],
            failed: [],
            get someFailed() {
                return !!(this.failed.length);
            },
            get someSucceeded() {
                return !!(this.success.length);
            },
            get oneFailed() {
                return this.failed.length === 1;
            },
            get oneSucceeded() {
                return this.success.length === 1;
            },
            get allSucceeded() {
                return this.someSucceeded && !this.someFailed;
            },
            get allFailed() {
                return this.someFailed && !this.someSucceeded;
            }
        };
        return data.reduce((acc, next) => {
            if (next.status === 1) {
                acc.success.push(next);
            }
            else {
                acc.failed.push(next);
            }
            return acc;
        }, deleteStatus);
    }
    getMessage(status) {
        if (status.allFailed && !status.oneFailed) {
            return this.translation.instant('CORE.DELETE_NODE.ERROR_PLURAL', { number: status.failed.length });
        }
        if (status.allSucceeded && !status.oneSucceeded) {
            return this.translation.instant('CORE.DELETE_NODE.PLURAL', { number: status.success.length });
        }
        if (status.someFailed && status.someSucceeded && !status.oneSucceeded) {
            return this.translation.instant('CORE.DELETE_NODE.PARTIAL_PLURAL', {
                success: status.success.length,
                failed: status.failed.length
            });
        }
        if (status.someFailed && status.oneSucceeded) {
            return this.translation.instant('CORE.DELETE_NODE.PARTIAL_SINGULAR', {
                success: status.success.length,
                failed: status.failed.length
            });
        }
        if (status.oneFailed && !status.someSucceeded) {
            return this.translation.instant('CORE.DELETE_NODE.ERROR_SINGULAR', { name: status.failed[0].entry.name });
        }
        if (status.oneSucceeded && !status.someFailed) {
            return this.translation.instant('CORE.DELETE_NODE.SINGULAR', { name: status.success[0].entry.name });
        }
        return null;
    }
}
NodeDeleteDirective.ɵfac = function NodeDeleteDirective_Factory(t) { return new (t || NodeDeleteDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.AlfrescoApiService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.TranslationService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
NodeDeleteDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: NodeDeleteDirective, selectors: [["", "adf-delete", ""]], hostBindings: function NodeDeleteDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function NodeDeleteDirective_click_HostBindingHandler() { return ctx.onClick(); });
    } }, inputs: { permanent: "permanent", selection: ["adf-delete", "selection"] }, outputs: { delete: "delete" }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });
NodeDeleteDirective.ctorParameters = () => [
    { type: AlfrescoApiService },
    { type: TranslationService },
    { type: ElementRef }
];
NodeDeleteDirective.propDecorators = {
    selection: [{ type: Input, args: ['adf-delete',] }],
    permanent: [{ type: Input }],
    delete: [{ type: Output }],
    onClick: [{ type: HostListener, args: ['click',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NodeDeleteDirective, [{
        type: Directive,
        args: [{
                selector: '[adf-delete]'
            }]
    }], function () { return [{ type: ɵngcc1.AlfrescoApiService }, { type: ɵngcc2.TranslationService }, { type: ɵngcc0.ElementRef }]; }, { permanent: [{
            type: Input
        }], delete: [{
            type: Output
        }], onClick: [{
            type: HostListener,
            args: ['click']
        }], selection: [{
            type: Input,
            args: ['adf-delete']
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,