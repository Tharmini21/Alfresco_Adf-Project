/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { __awaiter } from "tslib";
import { Directive, HostListener, Input, Output, EventEmitter } from '@angular/core';
import { AlfrescoApiService } from '../services/alfresco-api.service';
export class LibraryFavoriteDirective {
    constructor(alfrescoApiService) {
        this.alfrescoApiService = alfrescoApiService;
        this.library = null;
        this.toggle = new EventEmitter();
        this.error = new EventEmitter();
        this.targetLibrary = null;
    }
    onClick() {
        const guid = this.targetLibrary.entry.guid;
        if (this.targetLibrary.isFavorite) {
            this.removeFavorite(guid);
        }
        else {
            this.addFavorite({
                target: {
                    site: {
                        guid
                    }
                }
            });
        }
    }
    ngOnChanges(changes) {
        if (!changes.library.currentValue) {
            this.targetLibrary = null;
            return;
        }
        this.targetLibrary = changes.library.currentValue;
        this.markFavoriteLibrary(changes.library.currentValue);
    }
    isFavorite() {
        return this.targetLibrary && this.targetLibrary.isFavorite;
    }
    markFavoriteLibrary(library) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.targetLibrary.isFavorite === undefined) {
                try {
                    yield this.alfrescoApiService.peopleApi.getFavoriteSite('-me-', library.entry.id);
                    this.targetLibrary.isFavorite = true;
                }
                catch (_a) {
                    this.targetLibrary.isFavorite = false;
                }
            }
            else {
                this.targetLibrary = library;
            }
        });
    }
    addFavorite(favoriteBody) {
        this.alfrescoApiService.peopleApi
            .addFavorite('-me-', favoriteBody)
            .then((libraryEntry) => {
            this.targetLibrary.isFavorite = true;
            this.toggle.emit(libraryEntry);
        })
            .catch((error) => this.error.emit(error));
    }
    removeFavorite(favoriteId) {
        this.alfrescoApiService.favoritesApi
            .removeFavoriteSite('-me-', favoriteId)
            .then((libraryBody) => {
            this.targetLibrary.isFavorite = false;
            this.toggle.emit(libraryBody);
        })
            .catch((error) => this.error.emit(error));
    }
}
LibraryFavoriteDirective.decorators = [
    { type: Directive, args: [{
                selector: '[adf-favorite-library]',
                exportAs: 'favoriteLibrary'
            },] }
];
LibraryFavoriteDirective.ctorParameters = () => [
    { type: AlfrescoApiService }
];
LibraryFavoriteDirective.propDecorators = {
    library: [{ type: Input, args: ['adf-favorite-library',] }],
    toggle: [{ type: Output }],
    error: [{ type: Output }],
    onClick: [{ type: HostListener, args: ['click',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlicmFyeS1mYXZvcml0ZS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiL2hvbWUvdHJhdmlzL2J1aWxkL0FsZnJlc2NvL2FsZnJlc2NvLW5nMi1jb21wb25lbnRzL2xpYi9jb3JlLyIsInNvdXJjZXMiOlsiZGlyZWN0aXZlcy9saWJyYXJ5LWZhdm9yaXRlLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7O0dBZUc7O0FBRUgsT0FBTyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFhLE1BQU0sRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFaEcsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFZdEUsTUFBTSxPQUFPLHdCQUF3QjtJQTJCakMsWUFBb0Isa0JBQXNDO1FBQXRDLHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBb0I7UUF6QjFELFlBQU8sR0FBa0IsSUFBSSxDQUFDO1FBRXBCLFdBQU0sR0FBRyxJQUFJLFlBQVksRUFBTyxDQUFDO1FBRWpDLFVBQUssR0FBRyxJQUFJLFlBQVksRUFBTyxDQUFDO1FBRWxDLGtCQUFhLEdBQUcsSUFBSSxDQUFDO0lBbUJnQyxDQUFDO0lBaEI5RCxPQUFPO1FBQ0gsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDO1FBRTNDLElBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQyxVQUFVLEVBQUU7WUFDL0IsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUM3QjthQUFNO1lBQ0gsSUFBSSxDQUFDLFdBQVcsQ0FBQztnQkFDYixNQUFNLEVBQUU7b0JBQ0osSUFBSSxFQUFFO3dCQUNGLElBQUk7cUJBQ1A7aUJBQ0o7YUFDSixDQUFDLENBQUM7U0FDTjtJQUNMLENBQUM7SUFJRCxXQUFXLENBQUMsT0FBTztRQUNmLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLFlBQVksRUFBRTtZQUMvQixJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQztZQUMxQixPQUFPO1NBQ1Y7UUFFRCxJQUFJLENBQUMsYUFBYSxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDO1FBQ2xELElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQzNELENBQUM7SUFFRCxVQUFVO1FBQ04sT0FBTyxJQUFJLENBQUMsYUFBYSxJQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDO0lBQy9ELENBQUM7SUFFYSxtQkFBbUIsQ0FBQyxPQUFzQjs7WUFDcEQsSUFBSSxJQUFJLENBQUMsYUFBYSxDQUFDLFVBQVUsS0FBSyxTQUFTLEVBQUU7Z0JBQzdDLElBQUk7b0JBQ0EsTUFBTSxJQUFJLENBQUMsa0JBQWtCLENBQUMsU0FBUyxDQUFDLGVBQWUsQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztvQkFDbEYsSUFBSSxDQUFDLGFBQWEsQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDO2lCQUN4QztnQkFBQyxXQUFNO29CQUNKLElBQUksQ0FBQyxhQUFhLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQztpQkFDekM7YUFDSjtpQkFBTTtnQkFDSCxJQUFJLENBQUMsYUFBYSxHQUFHLE9BQU8sQ0FBQzthQUNoQztRQUNMLENBQUM7S0FBQTtJQUVPLFdBQVcsQ0FBQyxZQUEwQjtRQUMxQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsU0FBUzthQUM1QixXQUFXLENBQUMsTUFBTSxFQUFFLFlBQVksQ0FBQzthQUNqQyxJQUFJLENBQUMsQ0FBQyxZQUEyQixFQUFFLEVBQUU7WUFDbEMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDO1lBQ3JDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQ25DLENBQUMsQ0FBQzthQUNELEtBQUssQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUNsRCxDQUFDO0lBRU8sY0FBYyxDQUFDLFVBQWtCO1FBQ3JDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxZQUFZO2FBQy9CLGtCQUFrQixDQUFDLE1BQU0sRUFBRSxVQUFVLENBQUM7YUFDdEMsSUFBSSxDQUFDLENBQUMsV0FBcUIsRUFBRSxFQUFFO1lBQzVCLElBQUksQ0FBQyxhQUFhLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQztZQUN0QyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUNsQyxDQUFDLENBQUM7YUFDRCxLQUFLLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDbEQsQ0FBQzs7O1lBOUVKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsd0JBQXdCO2dCQUNsQyxRQUFRLEVBQUUsaUJBQWlCO2FBQzlCOzs7WUFYUSxrQkFBa0I7OztzQkFhdEIsS0FBSyxTQUFDLHNCQUFzQjtxQkFHNUIsTUFBTTtvQkFFTixNQUFNO3NCQUlOLFlBQVksU0FBQyxPQUFPIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgRGlyZWN0aXZlLCBIb3N0TGlzdGVuZXIsIElucHV0LCBPbkNoYW5nZXMsIE91dHB1dCwgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTaXRlQm9keSwgRmF2b3JpdGVCb2R5LCBGYXZvcml0ZUVudHJ5LCBTaXRlIH0gZnJvbSAnQGFsZnJlc2NvL2pzLWFwaSc7XG5pbXBvcnQgeyBBbGZyZXNjb0FwaVNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9hbGZyZXNjby1hcGkuc2VydmljZSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgTGlicmFyeUVudGl0eSB7XG4gICAgZW50cnk6IFNpdGU7XG4gICAgaXNMaWJyYXJ5OiBib29sZWFuO1xuICAgIGlzRmF2b3JpdGU6IGJvb2xlYW47XG59XG5cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW2FkZi1mYXZvcml0ZS1saWJyYXJ5XScsXG4gICAgZXhwb3J0QXM6ICdmYXZvcml0ZUxpYnJhcnknXG59KVxuZXhwb3J0IGNsYXNzIExpYnJhcnlGYXZvcml0ZURpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uQ2hhbmdlcyB7XG4gICAgQElucHV0KCdhZGYtZmF2b3JpdGUtbGlicmFyeScpXG4gICAgbGlicmFyeTogTGlicmFyeUVudGl0eSA9IG51bGw7XG5cbiAgICBAT3V0cHV0KCkgdG9nZ2xlID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiBuby1vdXRwdXQtbmF0aXZlXG4gICAgQE91dHB1dCgpIGVycm9yID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG5cbiAgICBwcml2YXRlIHRhcmdldExpYnJhcnkgPSBudWxsO1xuXG4gICAgQEhvc3RMaXN0ZW5lcignY2xpY2snKVxuICAgIG9uQ2xpY2soKSB7XG4gICAgICAgIGNvbnN0IGd1aWQgPSB0aGlzLnRhcmdldExpYnJhcnkuZW50cnkuZ3VpZDtcblxuICAgICAgICBpZiAodGhpcy50YXJnZXRMaWJyYXJ5LmlzRmF2b3JpdGUpIHtcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlRmF2b3JpdGUoZ3VpZCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmFkZEZhdm9yaXRlKHtcbiAgICAgICAgICAgICAgICB0YXJnZXQ6IHtcbiAgICAgICAgICAgICAgICAgICAgc2l0ZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ3VpZFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGFsZnJlc2NvQXBpU2VydmljZTogQWxmcmVzY29BcGlTZXJ2aWNlKSB7fVxuXG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlcykge1xuICAgICAgICBpZiAoIWNoYW5nZXMubGlicmFyeS5jdXJyZW50VmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMudGFyZ2V0TGlicmFyeSA9IG51bGw7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnRhcmdldExpYnJhcnkgPSBjaGFuZ2VzLmxpYnJhcnkuY3VycmVudFZhbHVlO1xuICAgICAgICB0aGlzLm1hcmtGYXZvcml0ZUxpYnJhcnkoY2hhbmdlcy5saWJyYXJ5LmN1cnJlbnRWYWx1ZSk7XG4gICAgfVxuXG4gICAgaXNGYXZvcml0ZSgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGFyZ2V0TGlicmFyeSAmJiB0aGlzLnRhcmdldExpYnJhcnkuaXNGYXZvcml0ZTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGFzeW5jIG1hcmtGYXZvcml0ZUxpYnJhcnkobGlicmFyeTogTGlicmFyeUVudGl0eSkge1xuICAgICAgICBpZiAodGhpcy50YXJnZXRMaWJyYXJ5LmlzRmF2b3JpdGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmFsZnJlc2NvQXBpU2VydmljZS5wZW9wbGVBcGkuZ2V0RmF2b3JpdGVTaXRlKCctbWUtJywgbGlicmFyeS5lbnRyeS5pZCk7XG4gICAgICAgICAgICAgICAgdGhpcy50YXJnZXRMaWJyYXJ5LmlzRmF2b3JpdGUgPSB0cnVlO1xuICAgICAgICAgICAgfSBjYXRjaCB7XG4gICAgICAgICAgICAgICAgdGhpcy50YXJnZXRMaWJyYXJ5LmlzRmF2b3JpdGUgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMudGFyZ2V0TGlicmFyeSA9IGxpYnJhcnk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGFkZEZhdm9yaXRlKGZhdm9yaXRlQm9keTogRmF2b3JpdGVCb2R5KSB7XG4gICAgICAgIHRoaXMuYWxmcmVzY29BcGlTZXJ2aWNlLnBlb3BsZUFwaVxuICAgICAgICAgICAgLmFkZEZhdm9yaXRlKCctbWUtJywgZmF2b3JpdGVCb2R5KVxuICAgICAgICAgICAgLnRoZW4oKGxpYnJhcnlFbnRyeTogRmF2b3JpdGVFbnRyeSkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMudGFyZ2V0TGlicmFyeS5pc0Zhdm9yaXRlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLnRvZ2dsZS5lbWl0KGxpYnJhcnlFbnRyeSk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmNhdGNoKChlcnJvcikgPT4gdGhpcy5lcnJvci5lbWl0KGVycm9yKSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSByZW1vdmVGYXZvcml0ZShmYXZvcml0ZUlkOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5hbGZyZXNjb0FwaVNlcnZpY2UuZmF2b3JpdGVzQXBpXG4gICAgICAgICAgICAucmVtb3ZlRmF2b3JpdGVTaXRlKCctbWUtJywgZmF2b3JpdGVJZClcbiAgICAgICAgICAgIC50aGVuKChsaWJyYXJ5Qm9keTogU2l0ZUJvZHkpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnRhcmdldExpYnJhcnkuaXNGYXZvcml0ZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHRoaXMudG9nZ2xlLmVtaXQobGlicmFyeUJvZHkpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHRoaXMuZXJyb3IuZW1pdChlcnJvcikpO1xuICAgIH1cbn1cbiJdfQ==