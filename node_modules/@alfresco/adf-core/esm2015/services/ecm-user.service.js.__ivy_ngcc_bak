import { Injectable } from '@angular/core';
import { from } from 'rxjs';
import { map } from 'rxjs/operators';
import { ContentService } from './content.service';
import { AlfrescoApiService } from './alfresco-api.service';
import { EcmUserModel } from '../models/ecm-user.model';
import { PeopleApi } from '@alfresco/js-api';
import * as i0 from "@angular/core";
import * as i1 from "./alfresco-api.service";
import * as i2 from "./content.service";
export class EcmUserService {
    constructor(apiService, contentService) {
        this.apiService = apiService;
        this.contentService = contentService;
    }
    get peopleApi() {
        return this._peopleApi || (this._peopleApi = new PeopleApi(this.apiService.getInstance()));
    }
    getUserInfo(userName) {
        return from(this.peopleApi.getPerson(userName))
            .pipe(map((personEntry) => new EcmUserModel(personEntry.entry)));
    }
    getCurrentUserInfo() {
        return this.getUserInfo('-me-');
    }
    getUserProfileImage(avatarId) {
        return this.contentService.getContentUrl(avatarId);
    }
}
EcmUserService.ɵprov = i0.ɵɵdefineInjectable({ factory: function EcmUserService_Factory() { return new EcmUserService(i0.ɵɵinject(i1.AlfrescoApiService), i0.ɵɵinject(i2.ContentService)); }, token: EcmUserService, providedIn: "root" });
EcmUserService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
EcmUserService.ctorParameters = () => [
    { type: AlfrescoApiService },
    { type: ContentService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWNtLXVzZXIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIvaG9tZS90cmF2aXMvYnVpbGQvQWxmcmVzY28vYWxmcmVzY28tbmcyLWNvbXBvbmVudHMvbGliL2NvcmUvIiwic291cmNlcyI6WyJzZXJ2aWNlcy9lY20tdXNlci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWlCQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBYyxJQUFJLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDeEMsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3JDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNuRCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUM1RCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDeEQsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGtCQUFrQixDQUFDOzs7O0FBSzdDLE1BQU0sT0FBTyxjQUFjO0lBSXZCLFlBQW9CLFVBQThCLEVBQzlCLGNBQThCO1FBRDlCLGVBQVUsR0FBVixVQUFVLENBQW9CO1FBQzlCLG1CQUFjLEdBQWQsY0FBYyxDQUFnQjtJQUNsRCxDQUFDO0lBRUQsSUFBSSxTQUFTO1FBQ1QsT0FBTyxJQUFJLENBQUMsVUFBVSxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLFNBQVMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUMvRixDQUFDO0lBT0QsV0FBVyxDQUFDLFFBQWdCO1FBQ3hCLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDO2FBQzFDLElBQUksQ0FDRCxHQUFHLENBQUMsQ0FBQyxXQUFXLEVBQUUsRUFBRSxDQUFDLElBQUksWUFBWSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUM1RCxDQUFDO0lBQ1YsQ0FBQztJQU1ELGtCQUFrQjtRQUNkLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNwQyxDQUFDO0lBT0QsbUJBQW1CLENBQUMsUUFBZ0I7UUFDaEMsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUN2RCxDQUFDOzs7O1lBMUNKLFVBQVUsU0FBQztnQkFDUixVQUFVLEVBQUUsTUFBTTthQUNyQjs7O1lBTlEsa0JBQWtCO1lBRGxCLGNBQWMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBmcm9tIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBDb250ZW50U2VydmljZSB9IGZyb20gJy4vY29udGVudC5zZXJ2aWNlJztcbmltcG9ydCB7IEFsZnJlc2NvQXBpU2VydmljZSB9IGZyb20gJy4vYWxmcmVzY28tYXBpLnNlcnZpY2UnO1xuaW1wb3J0IHsgRWNtVXNlck1vZGVsIH0gZnJvbSAnLi4vbW9kZWxzL2VjbS11c2VyLm1vZGVsJztcbmltcG9ydCB7IFBlb3BsZUFwaSB9IGZyb20gJ0BhbGZyZXNjby9qcy1hcGknO1xuXG5ASW5qZWN0YWJsZSh7XG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIEVjbVVzZXJTZXJ2aWNlIHtcblxuICAgIHByaXZhdGUgX3Blb3BsZUFwaTogUGVvcGxlQXBpO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBhcGlTZXJ2aWNlOiBBbGZyZXNjb0FwaVNlcnZpY2UsXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSBjb250ZW50U2VydmljZTogQ29udGVudFNlcnZpY2UpIHtcbiAgICB9XG5cbiAgICBnZXQgcGVvcGxlQXBpKCk6IFBlb3BsZUFwaSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wZW9wbGVBcGkgfHwgKHRoaXMuX3Blb3BsZUFwaSA9IG5ldyBQZW9wbGVBcGkodGhpcy5hcGlTZXJ2aWNlLmdldEluc3RhbmNlKCkpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGluZm9ybWF0aW9uIGFib3V0IGEgdXNlciBpZGVudGlmaWVkIGJ5IHRoZWlyIHVzZXJuYW1lLlxuICAgICAqIEBwYXJhbSB1c2VyTmFtZSBUYXJnZXQgdXNlcm5hbWVcbiAgICAgKiBAcmV0dXJucyBVc2VyIGluZm9ybWF0aW9uXG4gICAgICovXG4gICAgZ2V0VXNlckluZm8odXNlck5hbWU6IHN0cmluZyk6IE9ic2VydmFibGU8RWNtVXNlck1vZGVsPiB7XG4gICAgICAgIHJldHVybiBmcm9tKHRoaXMucGVvcGxlQXBpLmdldFBlcnNvbih1c2VyTmFtZSkpXG4gICAgICAgICAgICAucGlwZShcbiAgICAgICAgICAgICAgICBtYXAoKHBlcnNvbkVudHJ5KSA9PiBuZXcgRWNtVXNlck1vZGVsKHBlcnNvbkVudHJ5LmVudHJ5KSlcbiAgICAgICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBpbmZvcm1hdGlvbiBhYm91dCB0aGUgdXNlciB3aG8gaXMgY3VycmVudGx5IGxvZ2dlZC1pbi5cbiAgICAgKiBAcmV0dXJucyBVc2VyIGluZm9ybWF0aW9uIGFzIGZvciBnZXRVc2VySW5mb1xuICAgICAqL1xuICAgIGdldEN1cnJlbnRVc2VySW5mbygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0VXNlckluZm8oJy1tZS0nKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgcHJvZmlsZSBpbWFnZSBhcyBhIFVSTC5cbiAgICAgKiBAcGFyYW0gYXZhdGFySWQgVGFyZ2V0IGF2YXRhclxuICAgICAqIEByZXR1cm5zIEltYWdlIFVSTFxuICAgICAqL1xuICAgIGdldFVzZXJQcm9maWxlSW1hZ2UoYXZhdGFySWQ6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnRlbnRTZXJ2aWNlLmdldENvbnRlbnRVcmwoYXZhdGFySWQpO1xuICAgIH1cbn1cbiJdfQ==