import { __awaiter } from "tslib";
import { Injectable } from '@angular/core';
import { JwtHelperService } from './jwt-helper.service';
import { Router } from '@angular/router';
import { MatDialog } from '@angular/material/dialog';
import { ContentGroups, PeopleContentService } from './people-content.service';
import * as i0 from "@angular/core";
import * as i1 from "./jwt-helper.service";
import * as i2 from "@angular/router";
import * as i3 from "@angular/material/dialog";
import * as i4 from "./people-content.service";
export class AuthGuardSsoRoleService {
    constructor(jwtHelperService, router, dialog, peopleContentService) {
        this.jwtHelperService = jwtHelperService;
        this.router = router;
        this.dialog = dialog;
        this.peopleContentService = peopleContentService;
    }
    canActivate(route) {
        return __awaiter(this, void 0, void 0, function* () {
            let hasRole;
            let hasRealmRole = false;
            let hasClientRole = true;
            if (route.data) {
                if (route.data['roles']) {
                    const rolesToCheck = route.data['roles'];
                    const isContentAdmin = rolesToCheck.includes(ContentGroups.ALFRESCO_ADMINISTRATORS) ? yield this.peopleContentService.isContentAdmin() : false;
                    hasRealmRole = this.jwtHelperService.hasRealmRoles(rolesToCheck) || isContentAdmin;
                }
                if (route.data['clientRoles']) {
                    const clientRoleName = route.params[route.data['clientRoles']];
                    const rolesToCheck = route.data['roles'];
                    hasClientRole = this.jwtHelperService.hasRealmRolesForClientRole(clientRoleName, rolesToCheck);
                }
            }
            hasRole = hasRealmRole && hasClientRole;
            if (!hasRole && route.data && route.data['redirectUrl']) {
                this.router.navigate(['/' + route.data['redirectUrl']]);
            }
            if (!hasRole) {
                this.dialog.closeAll();
            }
            return hasRole;
        });
    }
}
AuthGuardSsoRoleService.ɵprov = i0.ɵɵdefineInjectable({ factory: function AuthGuardSsoRoleService_Factory() { return new AuthGuardSsoRoleService(i0.ɵɵinject(i1.JwtHelperService), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.MatDialog), i0.ɵɵinject(i4.PeopleContentService)); }, token: AuthGuardSsoRoleService, providedIn: "root" });
AuthGuardSsoRoleService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
AuthGuardSsoRoleService.ctorParameters = () => [
    { type: JwtHelperService },
    { type: Router },
    { type: MatDialog },
    { type: PeopleContentService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aC1ndWFyZC1zc28tcm9sZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Ii9ob21lL3RyYXZpcy9idWlsZC9BbGZyZXNjby9hbGZyZXNjby1uZzItY29tcG9uZW50cy9saWIvY29yZS8iLCJzb3VyY2VzIjpbInNlcnZpY2VzL2F1dGgtZ3VhcmQtc3NvLXJvbGUuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBaUJBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDeEQsT0FBTyxFQUF1QyxNQUFNLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUM5RSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDckQsT0FBTyxFQUFFLGFBQWEsRUFBRSxvQkFBb0IsRUFBRSxNQUFNLDBCQUEwQixDQUFDOzs7Ozs7QUFLL0UsTUFBTSxPQUFPLHVCQUF1QjtJQUNoQyxZQUFvQixnQkFBa0MsRUFDbEMsTUFBYyxFQUNkLE1BQWlCLEVBQ2pCLG9CQUEwQztRQUgxQyxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO1FBQ2xDLFdBQU0sR0FBTixNQUFNLENBQVE7UUFDZCxXQUFNLEdBQU4sTUFBTSxDQUFXO1FBQ2pCLHlCQUFvQixHQUFwQixvQkFBb0IsQ0FBc0I7SUFDOUQsQ0FBQztJQUVLLFdBQVcsQ0FBQyxLQUE2Qjs7WUFDM0MsSUFBSSxPQUFPLENBQUM7WUFDWixJQUFJLFlBQVksR0FBRyxLQUFLLENBQUM7WUFDekIsSUFBSSxhQUFhLEdBQUcsSUFBSSxDQUFDO1lBRXpCLElBQUksS0FBSyxDQUFDLElBQUksRUFBRTtnQkFDWixJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUU7b0JBQ3JCLE1BQU0sWUFBWSxHQUFhLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7b0JBQ25ELE1BQU0sY0FBYyxHQUFHLFlBQVksQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLHVCQUF1QixDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sSUFBSSxDQUFDLG9CQUFvQixDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7b0JBQy9JLFlBQVksR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQyxJQUFJLGNBQWMsQ0FBQztpQkFDdEY7Z0JBRUQsSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxFQUFFO29CQUMzQixNQUFNLGNBQWMsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQztvQkFDL0QsTUFBTSxZQUFZLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztvQkFDekMsYUFBYSxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQywwQkFBMEIsQ0FBQyxjQUFjLEVBQUUsWUFBWSxDQUFDLENBQUM7aUJBQ2xHO2FBQ0o7WUFFRCxPQUFPLEdBQUcsWUFBWSxJQUFJLGFBQWEsQ0FBQztZQUV4QyxJQUFJLENBQUMsT0FBTyxJQUFJLEtBQUssQ0FBQyxJQUFJLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsRUFBRTtnQkFDckQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxHQUFHLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDM0Q7WUFFRCxJQUFJLENBQUMsT0FBTyxFQUFFO2dCQUNWLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUM7YUFDMUI7WUFFRCxPQUFPLE9BQU8sQ0FBQztRQUNuQixDQUFDO0tBQUE7Ozs7WUF4Q0osVUFBVSxTQUFDO2dCQUNSLFVBQVUsRUFBRSxNQUFNO2FBQ3JCOzs7WUFQUSxnQkFBZ0I7WUFDcUIsTUFBTTtZQUMzQyxTQUFTO1lBQ00sb0JBQW9CIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSnd0SGVscGVyU2VydmljZSB9IGZyb20gJy4vand0LWhlbHBlci5zZXJ2aWNlJztcbmltcG9ydCB7IEFjdGl2YXRlZFJvdXRlU25hcHNob3QsIENhbkFjdGl2YXRlLCBSb3V0ZXIgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgTWF0RGlhbG9nIH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwvZGlhbG9nJztcbmltcG9ydCB7IENvbnRlbnRHcm91cHMsIFBlb3BsZUNvbnRlbnRTZXJ2aWNlIH0gZnJvbSAnLi9wZW9wbGUtY29udGVudC5zZXJ2aWNlJztcblxuQEluamVjdGFibGUoe1xuICAgIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBBdXRoR3VhcmRTc29Sb2xlU2VydmljZSBpbXBsZW1lbnRzIENhbkFjdGl2YXRlIHtcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGp3dEhlbHBlclNlcnZpY2U6IEp3dEhlbHBlclNlcnZpY2UsXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSByb3V0ZXI6IFJvdXRlcixcbiAgICAgICAgICAgICAgICBwcml2YXRlIGRpYWxvZzogTWF0RGlhbG9nLFxuICAgICAgICAgICAgICAgIHByaXZhdGUgcGVvcGxlQ29udGVudFNlcnZpY2U6IFBlb3BsZUNvbnRlbnRTZXJ2aWNlKSB7XG4gICAgfVxuXG4gICAgYXN5bmMgY2FuQWN0aXZhdGUocm91dGU6IEFjdGl2YXRlZFJvdXRlU25hcHNob3QpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICAgICAgbGV0IGhhc1JvbGU7XG4gICAgICAgIGxldCBoYXNSZWFsbVJvbGUgPSBmYWxzZTtcbiAgICAgICAgbGV0IGhhc0NsaWVudFJvbGUgPSB0cnVlO1xuXG4gICAgICAgIGlmIChyb3V0ZS5kYXRhKSB7XG4gICAgICAgICAgICBpZiAocm91dGUuZGF0YVsncm9sZXMnXSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJvbGVzVG9DaGVjazogc3RyaW5nW10gPSByb3V0ZS5kYXRhWydyb2xlcyddO1xuICAgICAgICAgICAgICAgIGNvbnN0IGlzQ29udGVudEFkbWluID0gcm9sZXNUb0NoZWNrLmluY2x1ZGVzKENvbnRlbnRHcm91cHMuQUxGUkVTQ09fQURNSU5JU1RSQVRPUlMpID8gYXdhaXQgdGhpcy5wZW9wbGVDb250ZW50U2VydmljZS5pc0NvbnRlbnRBZG1pbigpIDogZmFsc2U7XG4gICAgICAgICAgICAgICAgaGFzUmVhbG1Sb2xlID0gdGhpcy5qd3RIZWxwZXJTZXJ2aWNlLmhhc1JlYWxtUm9sZXMocm9sZXNUb0NoZWNrKSB8fCBpc0NvbnRlbnRBZG1pbjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHJvdXRlLmRhdGFbJ2NsaWVudFJvbGVzJ10pIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjbGllbnRSb2xlTmFtZSA9IHJvdXRlLnBhcmFtc1tyb3V0ZS5kYXRhWydjbGllbnRSb2xlcyddXTtcbiAgICAgICAgICAgICAgICBjb25zdCByb2xlc1RvQ2hlY2sgPSByb3V0ZS5kYXRhWydyb2xlcyddO1xuICAgICAgICAgICAgICAgIGhhc0NsaWVudFJvbGUgPSB0aGlzLmp3dEhlbHBlclNlcnZpY2UuaGFzUmVhbG1Sb2xlc0ZvckNsaWVudFJvbGUoY2xpZW50Um9sZU5hbWUsIHJvbGVzVG9DaGVjayk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBoYXNSb2xlID0gaGFzUmVhbG1Sb2xlICYmIGhhc0NsaWVudFJvbGU7XG5cbiAgICAgICAgaWYgKCFoYXNSb2xlICYmIHJvdXRlLmRhdGEgJiYgcm91dGUuZGF0YVsncmVkaXJlY3RVcmwnXSkge1xuICAgICAgICAgICAgdGhpcy5yb3V0ZXIubmF2aWdhdGUoWycvJyArIHJvdXRlLmRhdGFbJ3JlZGlyZWN0VXJsJ11dKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghaGFzUm9sZSkge1xuICAgICAgICAgICAgdGhpcy5kaWFsb2cuY2xvc2VBbGwoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBoYXNSb2xlO1xuICAgIH1cbn1cbiJdfQ==