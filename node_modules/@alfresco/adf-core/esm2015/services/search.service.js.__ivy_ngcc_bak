import { Injectable } from '@angular/core';
import { Subject, from, throwError } from 'rxjs';
import { AlfrescoApiService } from './alfresco-api.service';
import { SearchConfigurationService } from './search-configuration.service';
import * as i0 from "@angular/core";
import * as i1 from "./alfresco-api.service";
import * as i2 from "./search-configuration.service";
export class SearchService {
    constructor(apiService, searchConfigurationService) {
        this.apiService = apiService;
        this.searchConfigurationService = searchConfigurationService;
        this.dataLoaded = new Subject();
    }
    getNodeQueryResults(term, options) {
        const promise = this.apiService.getInstance().core.queriesApi.findNodes(term, options);
        promise.then((nodePaging) => {
            this.dataLoaded.next(nodePaging);
        }).catch((err) => this.handleError(err));
        return from(promise);
    }
    search(searchTerm, maxResults, skipCount) {
        const searchQuery = Object.assign(this.searchConfigurationService.generateQueryBody(searchTerm, maxResults, skipCount));
        const promise = this.apiService.getInstance().search.searchApi.search(searchQuery);
        promise.then((nodePaging) => {
            this.dataLoaded.next(nodePaging);
        }).catch((err) => this.handleError(err));
        return from(promise);
    }
    searchByQueryBody(queryBody) {
        const promise = this.apiService.getInstance().search.searchApi.search(queryBody);
        promise.then((nodePaging) => {
            this.dataLoaded.next(nodePaging);
        }).catch((err) => this.handleError(err));
        return from(promise);
    }
    handleError(error) {
        return throwError(error || 'Server error');
    }
}
SearchService.ɵprov = i0.ɵɵdefineInjectable({ factory: function SearchService_Factory() { return new SearchService(i0.ɵɵinject(i1.AlfrescoApiService), i0.ɵɵinject(i2.SearchConfigurationService)); }, token: SearchService, providedIn: "root" });
SearchService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
SearchService.ctorParameters = () => [
    { type: AlfrescoApiService },
    { type: SearchConfigurationService }
];
//# sourceMappingURL=data:application/json;base64,