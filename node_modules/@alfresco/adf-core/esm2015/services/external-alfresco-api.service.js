import { Injectable } from '@angular/core';
import { AlfrescoApiCompatibility } from '@alfresco/js-api';
import { ReplaySubject, Subject } from 'rxjs';
import * as i0 from "@angular/core";
import * as ɵngcc0 from '@angular/core';
export class ExternalAlfrescoApiService {
    constructor() {
        this.nodeUpdated = new Subject();
        this.alfrescoApiInitialized = new ReplaySubject(1);
    }
    getInstance() {
        return this.alfrescoApi;
    }
    get contentApi() {
        return this.getInstance().content;
    }
    get nodesApi() {
        return this.getInstance().nodes;
    }
    init(ecmHost, contextRoot) {
        const domainPrefix = this.createPrefixFromHost(ecmHost);
        const config = {
            provider: 'ECM',
            hostEcm: ecmHost,
            authType: 'BASIC',
            contextRoot: contextRoot,
            domainPrefix
        };
        this.initAlfrescoApi(config);
        this.alfrescoApiInitialized.next(true);
    }
    initAlfrescoApi(config) {
        if (this.alfrescoApi) {
            this.alfrescoApi.configureJsApi(config);
        }
        else {
            this.alfrescoApi = new AlfrescoApiCompatibility(config);
        }
    }
    createPrefixFromHost(url) {
        const match = url.match(/:\/\/(www[0-9]?\.)?(.[^/:]+)/i);
        let result = null;
        if (match != null && match.length > 2 && typeof match[2] === 'string' && match[2].length > 0) {
            result = match[2];
        }
        return result;
    }
}
ExternalAlfrescoApiService.ɵfac = function ExternalAlfrescoApiService_Factory(t) { return new (t || ExternalAlfrescoApiService)(); };
ExternalAlfrescoApiService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ExternalAlfrescoApiService_Factory() { return new ExternalAlfrescoApiService(); }, token: ExternalAlfrescoApiService, providedIn: "root" });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExternalAlfrescoApiService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return []; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXh0ZXJuYWwtYWxmcmVzY28tYXBpLnNlcnZpY2UuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL2hvbWUvdHJhdmlzL2J1aWxkL0FsZnJlc2NvL2FsZnJlc2NvLW5nMi1jb21wb25lbnRzL2xpYi9jb3JlL3NlcnZpY2VzL2V4dGVybmFsLWFsZnJlc2NvLWFwaS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWlCQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFDSCx3QkFBd0IsRUFJM0IsTUFBTSxrQkFBa0IsQ0FBQztBQUMxQixPQUFPLEVBQUUsYUFBYSxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUM5Qzs7QUFJQSxNQUFNLE9BQU8sMEJBQTBCO0FBQ3ZDLElBSkE7QUFDRSxRQU9FLGdCQUFXLEdBQUcsSUFBSSxPQUFPLEVBQVEsQ0FBQztBQUN0QyxRQUNJLDJCQUFzQixHQUEyQixJQUFJLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMxRSxLQThDQztBQUNELElBNUNJLFdBQVc7QUFBSyxRQUNaLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQztBQUNoQyxJQUFJLENBQUM7QUFDTCxJQUNJLElBQUksVUFBVTtBQUFLLFFBQ2YsT0FBTyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUMsT0FBTyxDQUFDO0FBQzFDLElBQUksQ0FBQztBQUNMLElBQ0ksSUFBSSxRQUFRO0FBQUssUUFDYixPQUFPLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQyxLQUFLLENBQUM7QUFDeEMsSUFBSSxDQUFDO0FBQ0wsSUFDSSxJQUFJLENBQUMsT0FBZSxFQUFFLFdBQW1CO0FBQzdDLFFBQ1EsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLG9CQUFvQixDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ2hFLFFBQ1EsTUFBTSxNQUFNLEdBQUc7QUFDdkIsWUFBWSxRQUFRLEVBQUUsS0FBSztBQUMzQixZQUFZLE9BQU8sRUFBRSxPQUFPO0FBQzVCLFlBQVksUUFBUSxFQUFFLE9BQU87QUFDN0IsWUFBWSxXQUFXLEVBQUUsV0FBVztBQUNwQyxZQUFZLFlBQVk7QUFDeEIsU0FBUyxDQUFDO0FBQ1YsUUFBUSxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ3JDLFFBQVEsSUFBSSxDQUFDLHNCQUFzQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUMvQyxJQUFJLENBQUM7QUFDTCxJQUNjLGVBQWUsQ0FBQyxNQUFNO0FBQ3BDLFFBQVEsSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFO0FBQzlCLFlBQVksSUFBSSxDQUFDLFdBQVcsQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDcEQsU0FBUztBQUFDLGFBQUs7QUFDZixZQUFZLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSx3QkFBd0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUNwRSxTQUFTO0FBQ1QsSUFBSSxDQUFDO0FBQ0wsSUFDWSxvQkFBb0IsQ0FBQyxHQUFXO0FBQUksUUFDeEMsTUFBTSxLQUFLLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQywrQkFBK0IsQ0FBQyxDQUFDO0FBQ2pFLFFBQVEsSUFBSSxNQUFNLEdBQUcsSUFBSSxDQUFDO0FBQzFCLFFBQVEsSUFBSSxLQUFLLElBQUksSUFBSSxJQUFJLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVEsSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtBQUN0RyxZQUFZLE1BQU0sR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDOUIsU0FBUztBQUNULFFBQVEsT0FBTyxNQUFNLENBQUM7QUFDdEIsSUFBSSxDQUFDO0FBQ0w7cUlBQUM7QUFDRDtzREExREMsVUFBVSxTQUFDO01BQ1IsVUFBVSxFQUFFLE1BQU07WUFDckI7OztnREFDSTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtcbiAgICBBbGZyZXNjb0FwaUNvbXBhdGliaWxpdHksXG4gICAgQ29udGVudEFwaSxcbiAgICBDb3JlLFxuICAgIE5vZGVcbn0gZnJvbSAnQGFsZnJlc2NvL2pzLWFwaSc7XG5pbXBvcnQgeyBSZXBsYXlTdWJqZWN0LCBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5cbkBJbmplY3RhYmxlKHtcbiAgICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgRXh0ZXJuYWxBbGZyZXNjb0FwaVNlcnZpY2Uge1xuXG4gICAgLyoqXG4gICAgICogUHVibGlzaC9zdWJzY3JpYmUgdG8gZXZlbnRzIHJlbGF0ZWQgdG8gbm9kZSB1cGRhdGVzLlxuICAgICAqL1xuICAgIG5vZGVVcGRhdGVkID0gbmV3IFN1YmplY3Q8Tm9kZT4oKTtcblxuICAgIGFsZnJlc2NvQXBpSW5pdGlhbGl6ZWQ6IFJlcGxheVN1YmplY3Q8Ym9vbGVhbj4gPSBuZXcgUmVwbGF5U3ViamVjdCgxKTtcblxuICAgIHByb3RlY3RlZCBhbGZyZXNjb0FwaTogQWxmcmVzY29BcGlDb21wYXRpYmlsaXR5O1xuXG4gICAgZ2V0SW5zdGFuY2UoKTogQWxmcmVzY29BcGlDb21wYXRpYmlsaXR5IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWxmcmVzY29BcGk7XG4gICAgfVxuXG4gICAgZ2V0IGNvbnRlbnRBcGkoKTogQ29udGVudEFwaSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldEluc3RhbmNlKCkuY29udGVudDtcbiAgICB9XG5cbiAgICBnZXQgbm9kZXNBcGkoKTogQ29yZS5Ob2Rlc0FwaSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldEluc3RhbmNlKCkubm9kZXM7XG4gICAgfVxuXG4gICAgaW5pdChlY21Ib3N0OiBzdHJpbmcsIGNvbnRleHRSb290OiBzdHJpbmcpIHtcblxuICAgICAgICBjb25zdCBkb21haW5QcmVmaXggPSB0aGlzLmNyZWF0ZVByZWZpeEZyb21Ib3N0KGVjbUhvc3QpO1xuXG4gICAgICAgIGNvbnN0IGNvbmZpZyA9IHtcbiAgICAgICAgICAgIHByb3ZpZGVyOiAnRUNNJyxcbiAgICAgICAgICAgIGhvc3RFY206IGVjbUhvc3QsXG4gICAgICAgICAgICBhdXRoVHlwZTogJ0JBU0lDJyxcbiAgICAgICAgICAgIGNvbnRleHRSb290OiBjb250ZXh0Um9vdCxcbiAgICAgICAgICAgIGRvbWFpblByZWZpeFxuICAgICAgICB9O1xuICAgICAgICB0aGlzLmluaXRBbGZyZXNjb0FwaShjb25maWcpO1xuICAgICAgICB0aGlzLmFsZnJlc2NvQXBpSW5pdGlhbGl6ZWQubmV4dCh0cnVlKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgaW5pdEFsZnJlc2NvQXBpKGNvbmZpZykge1xuICAgICAgICBpZiAodGhpcy5hbGZyZXNjb0FwaSkge1xuICAgICAgICAgICAgdGhpcy5hbGZyZXNjb0FwaS5jb25maWd1cmVKc0FwaShjb25maWcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5hbGZyZXNjb0FwaSA9IG5ldyBBbGZyZXNjb0FwaUNvbXBhdGliaWxpdHkoY29uZmlnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgY3JlYXRlUHJlZml4RnJvbUhvc3QodXJsOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgICBjb25zdCBtYXRjaCA9IHVybC5tYXRjaCgvOlxcL1xcLyh3d3dbMC05XT9cXC4pPyguW14vOl0rKS9pKTtcbiAgICAgICAgbGV0IHJlc3VsdCA9IG51bGw7XG4gICAgICAgIGlmIChtYXRjaCAhPSBudWxsICYmIG1hdGNoLmxlbmd0aCA+IDIgJiYgdHlwZW9mIG1hdGNoWzJdID09PSAnc3RyaW5nJyAmJiBtYXRjaFsyXS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICByZXN1bHQgPSBtYXRjaFsyXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cbiJdfQ==