import { Injectable } from '@angular/core';
import { from, throwError } from 'rxjs';
import { AlfrescoApiService } from './alfresco-api.service';
import { UserPreferencesService } from './user-preferences.service';
import { catchError, map } from 'rxjs/operators';
import { NodeMetadata } from '../models/node-metadata.model';
import * as i0 from "@angular/core";
import * as i1 from "./alfresco-api.service";
import * as i2 from "./user-preferences.service";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './alfresco-api.service';
import * as ɵngcc2 from './user-preferences.service';
export class NodesApiService {
    constructor(api, preferences) {
        this.api = api;
        this.preferences = preferences;
    }
    get nodesApi() {
        return this.api.getInstance().core.nodesApi;
    }
    getEntryFromEntity(entity) {
        return entity.entry;
    }
    getNode(nodeId, options = {}) {
        const defaults = {
            include: ['path', 'properties', 'allowableOperations', 'permissions']
        };
        const queryOptions = Object.assign(defaults, options);
        return from(this.nodesApi.getNode(nodeId, queryOptions)).pipe(map(this.getEntryFromEntity), catchError((err) => throwError(err)));
    }
    getNodeChildren(nodeId, options = {}) {
        const defaults = {
            maxItems: this.preferences.paginationSize,
            skipCount: 0,
            include: ['path', 'properties', 'allowableOperations', 'permissions']
        };
        const queryOptions = Object.assign(defaults, options);
        return from(this.nodesApi.getNodeChildren(nodeId, queryOptions)).pipe(catchError((err) => throwError(err)));
    }
    createNode(parentNodeId, nodeBody, options = {}) {
        return from(this.nodesApi.addNode(parentNodeId, nodeBody, options)).pipe(map(this.getEntryFromEntity), catchError((err) => throwError(err)));
    }
    createFolder(parentNodeId, nodeBody, options = {}) {
        const body = Object.assign({ nodeType: 'cm:folder' }, nodeBody);
        return this.createNode(parentNodeId, body, options);
    }
    updateNode(nodeId, nodeBody, options = {}) {
        const defaults = {
            include: ['path', 'properties', 'allowableOperations', 'permissions', 'definition']
        };
        const queryOptions = Object.assign(defaults, options);
        return from(this.nodesApi.updateNode(nodeId, nodeBody, queryOptions)).pipe(map(this.getEntryFromEntity), catchError((err) => throwError(err)));
    }
    deleteNode(nodeId, options = {}) {
        return from(this.nodesApi.deleteNode(nodeId, options)).pipe(catchError((err) => throwError(err)));
    }
    restoreNode(nodeId) {
        return from(this.nodesApi.restoreNode(nodeId)).pipe(map(this.getEntryFromEntity), catchError((err) => throwError(err)));
    }
    getNodeMetadata(nodeId) {
        return from(this.nodesApi.getNode(nodeId))
            .pipe(map(this.cleanMetadataFromSemicolon));
    }
    createNodeMetadata(nodeType, nameSpace, data, path, name) {
        const properties = {};
        for (const key in data) {
            if (data[key]) {
                properties[nameSpace + ':' + key] = data[key];
            }
        }
        return this.createNodeInsideRoot(name || this.generateUuid(), nodeType, properties, path);
    }
    createNodeInsideRoot(name, nodeType, properties, path) {
        const body = {
            name: name,
            nodeType: nodeType,
            properties: properties,
            relativePath: path
        };
        return from(this.nodesApi.addNode('-root-', body, {}));
    }
    generateUuid() {
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
            const r = Math.random() * 16 | 0, v = c === 'x' ? r : (r & 0x3 | 0x8);
            return v.toString(16);
        });
    }
    cleanMetadataFromSemicolon(nodeEntry) {
        const metadata = {};
        if (nodeEntry && nodeEntry.entry.properties) {
            for (const key in nodeEntry.entry.properties) {
                if (key) {
                    if (key.indexOf(':') !== -1) {
                        metadata[key.split(':')[1]] = nodeEntry.entry.properties[key];
                    }
                    else {
                        metadata[key] = nodeEntry.entry.properties[key];
                    }
                }
            }
        }
        return new NodeMetadata(metadata, nodeEntry.entry.nodeType);
    }
}
NodesApiService.ɵfac = function NodesApiService_Factory(t) { return new (t || NodesApiService)(ɵngcc0.ɵɵinject(ɵngcc1.AlfrescoApiService), ɵngcc0.ɵɵinject(ɵngcc2.UserPreferencesService)); };
NodesApiService.ɵprov = i0.ɵɵdefineInjectable({ factory: function NodesApiService_Factory() { return new NodesApiService(i0.ɵɵinject(i1.AlfrescoApiService), i0.ɵɵinject(i2.UserPreferencesService)); }, token: NodesApiService, providedIn: "root" });
NodesApiService.ctorParameters = () => [
    { type: AlfrescoApiService },
    { type: UserPreferencesService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NodesApiService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.AlfrescoApiService }, { type: ɵngcc2.UserPreferencesService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,