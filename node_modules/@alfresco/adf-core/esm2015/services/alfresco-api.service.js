import { __awaiter } from "tslib";
import { Injectable } from '@angular/core';
import { GroupsApi, AlfrescoApiCompatibility, AlfrescoApiConfig, AspectsApi, TypesApi } from '@alfresco/js-api';
import { AppConfigService, AppConfigValues } from '../app-config/app-config.service';
import { Subject, ReplaySubject } from 'rxjs';
import { StorageService } from './storage.service';
import * as i0 from "@angular/core";
import * as i1 from "../app-config/app-config.service";
import * as i2 from "./storage.service";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../app-config/app-config.service';
import * as ɵngcc2 from './storage.service';
export class AlfrescoApiService {
    constructor(appConfig, storageService) {
        this.appConfig = appConfig;
        this.storageService = storageService;
        this.nodeUpdated = new Subject();
        this.alfrescoApiInitialized = new ReplaySubject(1);
        this.excludedErrorUrl = ['api/enterprise/system/properties'];
    }
    getInstance() {
        return this.alfrescoApi;
    }
    get taskApi() {
        return this.getInstance().activiti.taskApi;
    }
    get contentApi() {
        return this.getInstance().content;
    }
    get nodesApi() {
        return this.getInstance().nodes;
    }
    get renditionsApi() {
        return this.getInstance().core.renditionsApi;
    }
    get sharedLinksApi() {
        return this.getInstance().core.sharedlinksApi;
    }
    get sitesApi() {
        return this.getInstance().core.sitesApi;
    }
    get favoritesApi() {
        return this.getInstance().core.favoritesApi;
    }
    get peopleApi() {
        return this.getInstance().core.peopleApi;
    }
    get searchApi() {
        return this.getInstance().search.searchApi;
    }
    get versionsApi() {
        return this.getInstance().core.versionsApi;
    }
    get classesApi() {
        return this.getInstance().core.classesApi;
    }
    get groupsApi() {
        return new GroupsApi(this.getInstance());
    }
    get aspectsApi() {
        return new AspectsApi(this.getInstance());
    }
    get typesApi() {
        return new TypesApi(this.getInstance());
    }
    load() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.appConfig.load().then(() => {
                this.storageService.prefix = this.appConfig.get(AppConfigValues.STORAGE_PREFIX, '');
                this.initAlfrescoApi();
                this.alfrescoApiInitialized.next(true);
            });
        });
    }
    reset() {
        this.initAlfrescoApi();
    }
    initAlfrescoApi() {
        const oauth = Object.assign({}, this.appConfig.get(AppConfigValues.OAUTHCONFIG, null));
        if (oauth) {
            oauth.redirectUri = window.location.origin + (oauth.redirectUri || '/');
            oauth.redirectUriLogout = window.location.origin + (oauth.redirectUriLogout || '/');
        }
        const config = new AlfrescoApiConfig({
            provider: this.appConfig.get(AppConfigValues.PROVIDERS),
            hostEcm: this.appConfig.get(AppConfigValues.ECMHOST),
            hostBpm: this.appConfig.get(AppConfigValues.BPMHOST),
            authType: this.appConfig.get(AppConfigValues.AUTHTYPE, 'BASIC'),
            contextRootBpm: this.appConfig.get(AppConfigValues.CONTEXTROOTBPM),
            contextRoot: this.appConfig.get(AppConfigValues.CONTEXTROOTECM),
            disableCsrf: this.appConfig.get(AppConfigValues.DISABLECSRF),
            withCredentials: this.appConfig.get(AppConfigValues.AUTH_WITH_CREDENTIALS, false),
            domainPrefix: this.appConfig.get(AppConfigValues.STORAGE_PREFIX),
            oauth2: oauth
        });
        if (this.alfrescoApi && this.isDifferentConfig(this.lastConfig, config)) {
            this.lastConfig = config;
            this.alfrescoApi.configureJsApi(config);
        }
        else {
            this.lastConfig = config;
            this.alfrescoApi = new AlfrescoApiCompatibility(config);
        }
    }
    isDifferentConfig(lastConfig, newConfig) {
        return JSON.stringify(lastConfig) !== JSON.stringify(newConfig);
    }
    isExcludedErrorListener(currentFullPath) {
        const formattedPath = currentFullPath.replace(this.lastConfig.hostBpm + '/' + this.lastConfig.contextRootBpm, '');
        return this.excludedErrorUrl.includes(formattedPath);
    }
}
AlfrescoApiService.ɵfac = function AlfrescoApiService_Factory(t) { return new (t || AlfrescoApiService)(ɵngcc0.ɵɵinject(ɵngcc1.AppConfigService), ɵngcc0.ɵɵinject(ɵngcc2.StorageService)); };
AlfrescoApiService.ɵprov = i0.ɵɵdefineInjectable({ factory: function AlfrescoApiService_Factory() { return new AlfrescoApiService(i0.ɵɵinject(i1.AppConfigService), i0.ɵɵinject(i2.StorageService)); }, token: AlfrescoApiService, providedIn: "root" });
AlfrescoApiService.ctorParameters = () => [
    { type: AppConfigService },
    { type: StorageService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AlfrescoApiService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.AppConfigService }, { type: ɵngcc2.StorageService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,