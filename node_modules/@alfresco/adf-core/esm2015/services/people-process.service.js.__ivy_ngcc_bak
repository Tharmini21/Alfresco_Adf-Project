import { Injectable } from '@angular/core';
import { from, throwError } from 'rxjs';
import { AlfrescoApiService } from './alfresco-api.service';
import { LogService } from './log.service';
import { catchError, map } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "./alfresco-api.service";
import * as i2 from "./log.service";
export class PeopleProcessService {
    constructor(alfrescoJsApi, logService) {
        this.alfrescoJsApi = alfrescoJsApi;
        this.logService = logService;
    }
    getWorkflowUsers(taskId, searchWord) {
        const option = { excludeTaskId: taskId, filter: searchWord };
        return from(this.getWorkflowUserApi(option))
            .pipe(map((response) => response.data || []), catchError((err) => this.handleError(err)));
    }
    getUserImage(user) {
        return this.getUserProfileImageApi(user.id.toString());
    }
    involveUserWithTask(taskId, idToInvolve) {
        const node = { userId: idToInvolve };
        return from(this.involveUserToTaskApi(taskId, node))
            .pipe(catchError((err) => this.handleError(err)));
    }
    removeInvolvedUser(taskId, idToRemove) {
        const node = { userId: idToRemove };
        return from(this.removeInvolvedUserFromTaskApi(taskId, node))
            .pipe(catchError((err) => this.handleError(err)));
    }
    getWorkflowUserApi(options) {
        return this.alfrescoJsApi.getInstance().activiti.usersWorkflowApi.getUsers(options);
    }
    involveUserToTaskApi(taskId, node) {
        return this.alfrescoJsApi.getInstance().activiti.taskActionsApi.involveUser(taskId, node);
    }
    removeInvolvedUserFromTaskApi(taskId, node) {
        return this.alfrescoJsApi.getInstance().activiti.taskActionsApi.removeInvolvedUser(taskId, node);
    }
    getUserProfileImageApi(userId) {
        return this.alfrescoJsApi.getInstance().activiti.userApi.getUserProfilePictureUrl(userId);
    }
    handleError(error) {
        this.logService.error(error);
        return throwError(error || 'Server error');
    }
}
PeopleProcessService.ɵprov = i0.ɵɵdefineInjectable({ factory: function PeopleProcessService_Factory() { return new PeopleProcessService(i0.ɵɵinject(i1.AlfrescoApiService), i0.ɵɵinject(i2.LogService)); }, token: PeopleProcessService, providedIn: "root" });
PeopleProcessService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
PeopleProcessService.ctorParameters = () => [
    { type: AlfrescoApiService },
    { type: LogService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVvcGxlLXByb2Nlc3Muc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIvaG9tZS90cmF2aXMvYnVpbGQvQWxmcmVzY28vYWxmcmVzY28tbmcyLWNvbXBvbmVudHMvbGliL2NvcmUvIiwic291cmNlcyI6WyJzZXJ2aWNlcy9wZW9wbGUtcHJvY2Vzcy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWlCQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBYyxJQUFJLEVBQUUsVUFBVSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBRXBELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQzVELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFVBQVUsRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7OztBQUtqRCxNQUFNLE9BQU8sb0JBQW9CO0lBRTdCLFlBQW9CLGFBQWlDLEVBQ2pDLFVBQXNCO1FBRHRCLGtCQUFhLEdBQWIsYUFBYSxDQUFvQjtRQUNqQyxlQUFVLEdBQVYsVUFBVSxDQUFZO0lBQzFDLENBQUM7SUFRRCxnQkFBZ0IsQ0FBQyxNQUFlLEVBQUUsVUFBbUI7UUFDakQsTUFBTSxNQUFNLEdBQUcsRUFBRSxhQUFhLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsQ0FBQztRQUM3RCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsTUFBTSxDQUFDLENBQUM7YUFDdkMsSUFBSSxDQUNELEdBQUcsQ0FBQyxDQUFDLFFBQWEsRUFBRSxFQUFFLENBQXNCLFFBQVEsQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDLEVBQ2hFLFVBQVUsQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUM3QyxDQUFDO0lBQ1YsQ0FBQztJQU9ELFlBQVksQ0FBQyxJQUFzQjtRQUMvQixPQUFPLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFDM0QsQ0FBQztJQVFELG1CQUFtQixDQUFDLE1BQWMsRUFBRSxXQUFtQjtRQUNuRCxNQUFNLElBQUksR0FBRyxFQUFDLE1BQU0sRUFBRSxXQUFXLEVBQUMsQ0FBQztRQUNuQyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsb0JBQW9CLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO2FBQy9DLElBQUksQ0FDRCxVQUFVLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FDN0MsQ0FBQztJQUNWLENBQUM7SUFRRCxrQkFBa0IsQ0FBQyxNQUFjLEVBQUUsVUFBa0I7UUFDakQsTUFBTSxJQUFJLEdBQUcsRUFBQyxNQUFNLEVBQUUsVUFBVSxFQUFDLENBQUM7UUFDbEMsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLDZCQUE2QixDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQzthQUN4RCxJQUFJLENBQ0QsVUFBVSxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQzdDLENBQUM7SUFDVixDQUFDO0lBRU8sa0JBQWtCLENBQUMsT0FBWTtRQUNuQyxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsV0FBVyxFQUFFLENBQUMsUUFBUSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUN4RixDQUFDO0lBRU8sb0JBQW9CLENBQUMsTUFBYyxFQUFFLElBQVM7UUFDbEQsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLFdBQVcsRUFBRSxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztJQUM5RixDQUFDO0lBRU8sNkJBQTZCLENBQUMsTUFBYyxFQUFFLElBQVM7UUFDM0QsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLFdBQVcsRUFBRSxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsa0JBQWtCLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ3JHLENBQUM7SUFFTyxzQkFBc0IsQ0FBQyxNQUFjO1FBQ3pDLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLHdCQUF3QixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzlGLENBQUM7SUFNTyxXQUFXLENBQUMsS0FBVTtRQUMxQixJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM3QixPQUFPLFVBQVUsQ0FBQyxLQUFLLElBQUksY0FBYyxDQUFDLENBQUM7SUFDL0MsQ0FBQzs7OztZQXBGSixVQUFVLFNBQUM7Z0JBQ1IsVUFBVSxFQUFFLE1BQU07YUFDckI7OztZQU5RLGtCQUFrQjtZQUNsQixVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgZnJvbSwgdGhyb3dFcnJvciB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgVXNlclByb2Nlc3NNb2RlbCB9IGZyb20gJy4uL21vZGVscy91c2VyLXByb2Nlc3MubW9kZWwnO1xuaW1wb3J0IHsgQWxmcmVzY29BcGlTZXJ2aWNlIH0gZnJvbSAnLi9hbGZyZXNjby1hcGkuc2VydmljZSc7XG5pbXBvcnQgeyBMb2dTZXJ2aWNlIH0gZnJvbSAnLi9sb2cuc2VydmljZSc7XG5pbXBvcnQgeyBjYXRjaEVycm9yLCBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbkBJbmplY3RhYmxlKHtcbiAgICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgUGVvcGxlUHJvY2Vzc1NlcnZpY2Uge1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBhbGZyZXNjb0pzQXBpOiBBbGZyZXNjb0FwaVNlcnZpY2UsXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSBsb2dTZXJ2aWNlOiBMb2dTZXJ2aWNlKSB7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBpbmZvcm1hdGlvbiBhYm91dCB1c2VycyBhY3Jvc3MgYWxsIHRhc2tzLlxuICAgICAqIEBwYXJhbSB0YXNrSWQgSUQgb2YgdGhlIHRhc2tcbiAgICAgKiBAcGFyYW0gc2VhcmNoV29yZCBGaWx0ZXIgdGV4dCB0byBzZWFyY2ggZm9yXG4gICAgICogQHJldHVybnMgQXJyYXkgb2YgdXNlciBpbmZvcm1hdGlvbiBvYmplY3RzXG4gICAgICovXG4gICAgZ2V0V29ya2Zsb3dVc2Vycyh0YXNrSWQ/OiBzdHJpbmcsIHNlYXJjaFdvcmQ/OiBzdHJpbmcpOiBPYnNlcnZhYmxlPFVzZXJQcm9jZXNzTW9kZWxbXT4ge1xuICAgICAgICBjb25zdCBvcHRpb24gPSB7IGV4Y2x1ZGVUYXNrSWQ6IHRhc2tJZCwgZmlsdGVyOiBzZWFyY2hXb3JkIH07XG4gICAgICAgIHJldHVybiBmcm9tKHRoaXMuZ2V0V29ya2Zsb3dVc2VyQXBpKG9wdGlvbikpXG4gICAgICAgICAgICAucGlwZShcbiAgICAgICAgICAgICAgICBtYXAoKHJlc3BvbnNlOiBhbnkpID0+IDxVc2VyUHJvY2Vzc01vZGVsW10+IHJlc3BvbnNlLmRhdGEgfHwgW10pLFxuICAgICAgICAgICAgICAgIGNhdGNoRXJyb3IoKGVycikgPT4gdGhpcy5oYW5kbGVFcnJvcihlcnIpKVxuICAgICAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBwcm9maWxlIHBpY3R1cmUgVVJMIGZvciB0aGUgc3BlY2lmaWVkIHVzZXIuXG4gICAgICogQHBhcmFtIHVzZXIgVGhlIHRhcmdldCB1c2VyXG4gICAgICogQHJldHVybnMgUHJvZmlsZSBwaWN0dXJlIFVSTFxuICAgICAqL1xuICAgIGdldFVzZXJJbWFnZSh1c2VyOiBVc2VyUHJvY2Vzc01vZGVsKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0VXNlclByb2ZpbGVJbWFnZUFwaSh1c2VyLmlkLnRvU3RyaW5nKCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgYSB1c2VyIHRvIGJlIGludm9sdmVkIHdpdGggYSB0YXNrLlxuICAgICAqIEBwYXJhbSB0YXNrSWQgSUQgb2YgdGhlIHRhcmdldCB0YXNrXG4gICAgICogQHBhcmFtIGlkVG9JbnZvbHZlIElEIG9mIHRoZSB1c2VyIHRvIGludm9sdmVcbiAgICAgKiBAcmV0dXJucyBFbXB0eSByZXNwb25zZSB3aGVuIHRoZSB1cGRhdGUgY29tcGxldGVzXG4gICAgICovXG4gICAgaW52b2x2ZVVzZXJXaXRoVGFzayh0YXNrSWQ6IHN0cmluZywgaWRUb0ludm9sdmU6IHN0cmluZyk6IE9ic2VydmFibGU8VXNlclByb2Nlc3NNb2RlbFtdPiB7XG4gICAgICAgIGNvbnN0IG5vZGUgPSB7dXNlcklkOiBpZFRvSW52b2x2ZX07XG4gICAgICAgIHJldHVybiBmcm9tKHRoaXMuaW52b2x2ZVVzZXJUb1Rhc2tBcGkodGFza0lkLCBub2RlKSlcbiAgICAgICAgICAgIC5waXBlKFxuICAgICAgICAgICAgICAgIGNhdGNoRXJyb3IoKGVycikgPT4gdGhpcy5oYW5kbGVFcnJvcihlcnIpKVxuICAgICAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGEgdXNlciB3aG8gaXMgY3VycmVudGx5IGludm9sdmVkIHdpdGggYSB0YXNrLlxuICAgICAqIEBwYXJhbSB0YXNrSWQgSUQgb2YgdGhlIHRhcmdldCB0YXNrXG4gICAgICogQHBhcmFtIGlkVG9SZW1vdmUgSUQgb2YgdGhlIHVzZXIgdG8gcmVtb3ZlXG4gICAgICogQHJldHVybnMgRW1wdHkgcmVzcG9uc2Ugd2hlbiB0aGUgdXBkYXRlIGNvbXBsZXRlc1xuICAgICAqL1xuICAgIHJlbW92ZUludm9sdmVkVXNlcih0YXNrSWQ6IHN0cmluZywgaWRUb1JlbW92ZTogc3RyaW5nKTogT2JzZXJ2YWJsZTxVc2VyUHJvY2Vzc01vZGVsW10+IHtcbiAgICAgICAgY29uc3Qgbm9kZSA9IHt1c2VySWQ6IGlkVG9SZW1vdmV9O1xuICAgICAgICByZXR1cm4gZnJvbSh0aGlzLnJlbW92ZUludm9sdmVkVXNlckZyb21UYXNrQXBpKHRhc2tJZCwgbm9kZSkpXG4gICAgICAgICAgICAucGlwZShcbiAgICAgICAgICAgICAgICBjYXRjaEVycm9yKChlcnIpID0+IHRoaXMuaGFuZGxlRXJyb3IoZXJyKSlcbiAgICAgICAgICAgICk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXRXb3JrZmxvd1VzZXJBcGkob3B0aW9uczogYW55KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFsZnJlc2NvSnNBcGkuZ2V0SW5zdGFuY2UoKS5hY3Rpdml0aS51c2Vyc1dvcmtmbG93QXBpLmdldFVzZXJzKG9wdGlvbnMpO1xuICAgIH1cblxuICAgIHByaXZhdGUgaW52b2x2ZVVzZXJUb1Rhc2tBcGkodGFza0lkOiBzdHJpbmcsIG5vZGU6IGFueSkge1xuICAgICAgICByZXR1cm4gdGhpcy5hbGZyZXNjb0pzQXBpLmdldEluc3RhbmNlKCkuYWN0aXZpdGkudGFza0FjdGlvbnNBcGkuaW52b2x2ZVVzZXIodGFza0lkLCBub2RlKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHJlbW92ZUludm9sdmVkVXNlckZyb21UYXNrQXBpKHRhc2tJZDogc3RyaW5nLCBub2RlOiBhbnkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWxmcmVzY29Kc0FwaS5nZXRJbnN0YW5jZSgpLmFjdGl2aXRpLnRhc2tBY3Rpb25zQXBpLnJlbW92ZUludm9sdmVkVXNlcih0YXNrSWQsIG5vZGUpO1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0VXNlclByb2ZpbGVJbWFnZUFwaSh1c2VySWQ6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLmFsZnJlc2NvSnNBcGkuZ2V0SW5zdGFuY2UoKS5hY3Rpdml0aS51c2VyQXBpLmdldFVzZXJQcm9maWxlUGljdHVyZVVybCh1c2VySWQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRocm93IHRoZSBlcnJvclxuICAgICAqIEBwYXJhbSBlcnJvclxuICAgICAqL1xuICAgIHByaXZhdGUgaGFuZGxlRXJyb3IoZXJyb3I6IGFueSkge1xuICAgICAgICB0aGlzLmxvZ1NlcnZpY2UuZXJyb3IoZXJyb3IpO1xuICAgICAgICByZXR1cm4gdGhyb3dFcnJvcihlcnJvciB8fCAnU2VydmVyIGVycm9yJyk7XG4gICAgfVxufVxuIl19