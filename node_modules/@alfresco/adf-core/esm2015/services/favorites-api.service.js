import { Injectable } from '@angular/core';
import { from, of } from 'rxjs';
import { AlfrescoApiService } from './alfresco-api.service';
import { UserPreferencesService } from './user-preferences.service';
import { catchError } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "./alfresco-api.service";
import * as i2 from "./user-preferences.service";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './alfresco-api.service';
import * as ɵngcc2 from './user-preferences.service';
export class FavoritesApiService {
    constructor(apiService, preferences) {
        this.apiService = apiService;
        this.preferences = preferences;
    }
    static remapEntry({ entry }) {
        entry.properties = {
            'cm:title': entry.title,
            'cm:description': entry.description
        };
        return { entry };
    }
    remapFavoritesData(data = {}) {
        const list = (data.list || {});
        const pagination = (list.pagination || {});
        const entries = this
            .remapFavoriteEntries(list.entries || []);
        return {
            list: { entries, pagination }
        };
    }
    remapFavoriteEntries(entries) {
        return entries
            .map(({ entry: { target } }) => ({
            entry: target.file || target.folder
        }))
            .filter(({ entry }) => (!!entry))
            .map(FavoritesApiService.remapEntry);
    }
    get favoritesApi() {
        return this.apiService.getInstance().core.favoritesApi;
    }
    getFavorites(personId, options) {
        const defaultOptions = {
            maxItems: this.preferences.paginationSize,
            skipCount: 0,
            where: '(EXISTS(target/file) OR EXISTS(target/folder))',
            include: ['properties', 'allowableOperations']
        };
        const queryOptions = Object.assign(defaultOptions, options);
        const promise = this.favoritesApi
            .getFavorites(personId, queryOptions)
            .then(this.remapFavoritesData);
        return from(promise).pipe(catchError((err) => of(err)));
    }
}
FavoritesApiService.ɵfac = function FavoritesApiService_Factory(t) { return new (t || FavoritesApiService)(ɵngcc0.ɵɵinject(ɵngcc1.AlfrescoApiService), ɵngcc0.ɵɵinject(ɵngcc2.UserPreferencesService)); };
FavoritesApiService.ɵprov = i0.ɵɵdefineInjectable({ factory: function FavoritesApiService_Factory() { return new FavoritesApiService(i0.ɵɵinject(i1.AlfrescoApiService), i0.ɵɵinject(i2.UserPreferencesService)); }, token: FavoritesApiService, providedIn: "root" });
FavoritesApiService.ctorParameters = () => [
    { type: AlfrescoApiService },
    { type: UserPreferencesService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FavoritesApiService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.AlfrescoApiService }, { type: ɵngcc2.UserPreferencesService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmF2b3JpdGVzLWFwaS5zZXJ2aWNlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9ob21lL3RyYXZpcy9idWlsZC9BbGZyZXNjby9hbGZyZXNjby1uZzItY29tcG9uZW50cy9saWIvY29yZS9zZXJ2aWNlcy9mYXZvcml0ZXMtYXBpLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBaUJBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFjLElBQUksRUFBRSxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDNUMsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDNUQsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDcEUsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzVDO0FBRXNCO0FBSWhCOzs7O0FBRk4sTUFBTSxPQUFPLG1CQUFtQjtBQUNoQyxJQThCSSxZQUNZLFVBQThCLEVBQzlCLFdBQW1DO0FBQ2hELFFBRmEsZUFBVSxHQUFWLFVBQVUsQ0FBb0I7QUFBQyxRQUMvQixnQkFBVyxHQUFYLFdBQVcsQ0FBd0I7QUFDbkQsSUFBTyxDQUFDO0FBQ1IsSUFqQ0ksTUFBTSxDQUFDLFVBQVUsQ0FBQyxFQUFFLEtBQUssRUFBTztBQUFJLFFBQ2hDLEtBQUssQ0FBQyxVQUFVLEdBQUc7QUFDM0IsWUFBWSxVQUFVLEVBQUUsS0FBSyxDQUFDLEtBQUs7QUFDbkMsWUFBWSxnQkFBZ0IsRUFBRSxLQUFLLENBQUMsV0FBVztBQUMvQyxTQUFTLENBQUM7QUFDVixRQUNRLE9BQU8sRUFBRSxLQUFLLEVBQUUsQ0FBQztBQUN6QixJQUFJLENBQUM7QUFDTCxJQUNJLGtCQUFrQixDQUFDLE9BQVksRUFBRTtBQUFJLFFBQ2pDLE1BQU0sSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxFQUFFLENBQUMsQ0FBQztBQUN2QyxRQUFRLE1BQU0sVUFBVSxHQUFHLENBQUMsSUFBSSxDQUFDLFVBQVUsSUFBSSxFQUFFLENBQUMsQ0FBQztBQUNuRCxRQUFRLE1BQU0sT0FBTyxHQUFVLElBQUk7QUFDbkMsYUFBYSxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsT0FBTyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0FBQ3RELFFBQ1EsT0FBb0I7QUFDNUIsWUFBWSxJQUFJLEVBQUUsRUFBRSxPQUFPLEVBQUUsVUFBVSxFQUFFO0FBQ3pDLFNBQVMsQ0FBQztBQUNWLElBQUksQ0FBQztBQUNMLElBQ0ksb0JBQW9CLENBQUMsT0FBYztBQUN2QyxRQUFRLE9BQU8sT0FBTztBQUN0QixhQUFhLEdBQUcsQ0FBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLEVBQUUsTUFBTSxFQUFFLEVBQU0sRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNqRCxZQUFnQixLQUFLLEVBQUUsTUFBTSxDQUFDLElBQUksSUFBSSxNQUFNLENBQUMsTUFBTTtBQUNuRCxTQUFhLENBQUMsQ0FBQztBQUNmLGFBQWEsTUFBTSxDQUFDLENBQUMsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDN0MsYUFBYSxHQUFHLENBQUMsbUJBQW1CLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDakQsSUFBSSxDQUFDO0FBQ0wsSUFNSSxJQUFZLFlBQVk7QUFDNUIsUUFBTyxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsV0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQztBQUM5RCxJQUFJLENBQUM7QUFDTCxJQU9JLFlBQVksQ0FBQyxRQUFnQixFQUFFLE9BQWE7QUFBSSxRQUM1QyxNQUFNLGNBQWMsR0FBRztBQUMvQixZQUFZLFFBQVEsRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLGNBQWM7QUFDckQsWUFBWSxTQUFTLEVBQUUsQ0FBQztBQUN4QixZQUFZLEtBQUssRUFBRSxnREFBZ0Q7QUFDbkUsWUFBWSxPQUFPLEVBQUUsQ0FBRSxZQUFZLEVBQUUscUJBQXFCLENBQUU7QUFDNUQsU0FBUyxDQUFDO0FBQ1YsUUFBUSxNQUFNLFlBQVksR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLGNBQWMsRUFBRSxPQUFPLENBQUMsQ0FBQztBQUNwRSxRQUFRLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxZQUFZO0FBQ3pDLGFBQWEsWUFBWSxDQUFDLFFBQVEsRUFBRSxZQUFZLENBQUM7QUFDakQsYUFBYSxJQUFJLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLENBQUM7QUFDM0MsUUFDUSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQ3JCLFVBQVUsQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQy9CLENBQUM7QUFDVixJQUFJLENBQUM7QUFDTDswTUFBQztBQUNELHVRQS9ESztBQUFDO0VBSEwsVUFBVSxTQUFDLHJCQUtHLFlBVE4sa0JBQWtCO0tBS3ZCLFVBQVUsRUFBRSxNQUFNLHZCQUxTLFlBQ3RCLHNCQUFzQjtBQUs5QixBQUxpQzs7Ozs7OzRIQUFFO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOb2RlUGFnaW5nIH0gZnJvbSAnQGFsZnJlc2NvL2pzLWFwaSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBmcm9tLCBvZiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgQWxmcmVzY29BcGlTZXJ2aWNlIH0gZnJvbSAnLi9hbGZyZXNjby1hcGkuc2VydmljZSc7XG5pbXBvcnQgeyBVc2VyUHJlZmVyZW5jZXNTZXJ2aWNlIH0gZnJvbSAnLi91c2VyLXByZWZlcmVuY2VzLnNlcnZpY2UnO1xuaW1wb3J0IHsgY2F0Y2hFcnJvciB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuQEluamVjdGFibGUoe1xuICAgIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBGYXZvcml0ZXNBcGlTZXJ2aWNlIHtcblxuICAgIHN0YXRpYyByZW1hcEVudHJ5KHsgZW50cnkgfTogYW55KTogYW55IHtcbiAgICAgICAgZW50cnkucHJvcGVydGllcyA9IHtcbiAgICAgICAgICAgICdjbTp0aXRsZSc6IGVudHJ5LnRpdGxlLFxuICAgICAgICAgICAgJ2NtOmRlc2NyaXB0aW9uJzogZW50cnkuZGVzY3JpcHRpb25cbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4geyBlbnRyeSB9O1xuICAgIH1cblxuICAgIHJlbWFwRmF2b3JpdGVzRGF0YShkYXRhOiBhbnkgPSB7fSk6IE5vZGVQYWdpbmcge1xuICAgICAgICBjb25zdCBsaXN0ID0gKGRhdGEubGlzdCB8fCB7fSk7XG4gICAgICAgIGNvbnN0IHBhZ2luYXRpb24gPSAobGlzdC5wYWdpbmF0aW9uIHx8IHt9KTtcbiAgICAgICAgY29uc3QgZW50cmllczogYW55W10gPSB0aGlzXG4gICAgICAgICAgICAucmVtYXBGYXZvcml0ZUVudHJpZXMobGlzdC5lbnRyaWVzIHx8IFtdKTtcblxuICAgICAgICByZXR1cm4gPE5vZGVQYWdpbmc+IHtcbiAgICAgICAgICAgIGxpc3Q6IHsgZW50cmllcywgcGFnaW5hdGlvbiB9XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcmVtYXBGYXZvcml0ZUVudHJpZXMoZW50cmllczogYW55W10pIHtcbiAgICAgICAgcmV0dXJuIGVudHJpZXNcbiAgICAgICAgICAgIC5tYXAoKHsgZW50cnk6IHsgdGFyZ2V0IH19OiBhbnkpID0+ICh7XG4gICAgICAgICAgICAgICAgZW50cnk6IHRhcmdldC5maWxlIHx8IHRhcmdldC5mb2xkZXJcbiAgICAgICAgICAgIH0pKVxuICAgICAgICAgICAgLmZpbHRlcigoeyBlbnRyeSB9KSA9PiAoISFlbnRyeSkpXG4gICAgICAgICAgICAubWFwKEZhdm9yaXRlc0FwaVNlcnZpY2UucmVtYXBFbnRyeSk7XG4gICAgfVxuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHByaXZhdGUgYXBpU2VydmljZTogQWxmcmVzY29BcGlTZXJ2aWNlLFxuICAgICAgICBwcml2YXRlIHByZWZlcmVuY2VzOiBVc2VyUHJlZmVyZW5jZXNTZXJ2aWNlXG4gICAgKSB7fVxuXG4gICAgcHJpdmF0ZSBnZXQgZmF2b3JpdGVzQXBpKCkge1xuICAgICAgIHJldHVybiB0aGlzLmFwaVNlcnZpY2UuZ2V0SW5zdGFuY2UoKS5jb3JlLmZhdm9yaXRlc0FwaTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBmYXZvcml0ZXMgZm9yIGEgdXNlci5cbiAgICAgKiBAcGFyYW0gcGVyc29uSWQgSUQgb2YgdGhlIHVzZXJcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBPcHRpb25zIHN1cHBvcnRlZCBieSBKUy1BUElcbiAgICAgKiBAcmV0dXJucyBMaXN0IG9mIGZhdm9yaXRlc1xuICAgICAqL1xuICAgIGdldEZhdm9yaXRlcyhwZXJzb25JZDogc3RyaW5nLCBvcHRpb25zPzogYW55KTogT2JzZXJ2YWJsZTxOb2RlUGFnaW5nPiB7XG4gICAgICAgIGNvbnN0IGRlZmF1bHRPcHRpb25zID0ge1xuICAgICAgICAgICAgbWF4SXRlbXM6IHRoaXMucHJlZmVyZW5jZXMucGFnaW5hdGlvblNpemUsXG4gICAgICAgICAgICBza2lwQ291bnQ6IDAsXG4gICAgICAgICAgICB3aGVyZTogJyhFWElTVFModGFyZ2V0L2ZpbGUpIE9SIEVYSVNUUyh0YXJnZXQvZm9sZGVyKSknLFxuICAgICAgICAgICAgaW5jbHVkZTogWyAncHJvcGVydGllcycsICdhbGxvd2FibGVPcGVyYXRpb25zJyBdXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHF1ZXJ5T3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oZGVmYXVsdE9wdGlvbnMsIG9wdGlvbnMpO1xuICAgICAgICBjb25zdCBwcm9taXNlID0gdGhpcy5mYXZvcml0ZXNBcGlcbiAgICAgICAgICAgIC5nZXRGYXZvcml0ZXMocGVyc29uSWQsIHF1ZXJ5T3B0aW9ucylcbiAgICAgICAgICAgIC50aGVuKHRoaXMucmVtYXBGYXZvcml0ZXNEYXRhKTtcblxuICAgICAgICByZXR1cm4gZnJvbShwcm9taXNlKS5waXBlKFxuICAgICAgICAgICAgY2F0Y2hFcnJvcigoZXJyKSA9PiBvZihlcnIpKVxuICAgICAgICApO1xuICAgIH1cbn1cbiJdfQ==