import { Injectable } from '@angular/core';
import { from, throwError, Subject } from 'rxjs';
import { BpmProductVersionModel, EcmProductVersionModel } from '../models/product-version.model';
import { AlfrescoApiService } from './alfresco-api.service';
import { catchError, map, switchMap, filter, take } from 'rxjs/operators';
import { AuthenticationService } from './authentication.service';
import * as i0 from "@angular/core";
import * as i1 from "./alfresco-api.service";
import * as i2 from "./authentication.service";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './alfresco-api.service';
import * as ɵngcc2 from './authentication.service';
export class DiscoveryApiService {
    constructor(apiService, authenticationService) {
        this.apiService = apiService;
        this.authenticationService = authenticationService;
        this.ecmProductInfo$ = new Subject();
        this.authenticationService.onLogin
            .pipe(filter(() => { var _a; return (_a = this.apiService.getInstance()) === null || _a === void 0 ? void 0 : _a.isEcmLoggedIn(); }), take(1), switchMap(() => this.getEcmProductInfo()))
            .subscribe((info) => this.ecmProductInfo$.next(info));
    }
    getEcmProductInfo() {
        return from(this.apiService.getInstance().discovery.discoveryApi.getRepositoryInformation())
            .pipe(map((res) => new EcmProductVersionModel(res)), catchError((err) => throwError(err)));
    }
    getBpmProductInfo() {
        return from(this.apiService.getInstance().activiti.aboutApi.getAppVersion())
            .pipe(map((res) => new BpmProductVersionModel(res)), catchError((err) => throwError(err)));
    }
    get systemPropertiesApi() {
        return this.apiService.getInstance().activiti.systemPropertiesApi;
    }
    getBPMSystemProperties() {
        return from(this.systemPropertiesApi.getProperties())
            .pipe(map((res) => {
            if ('string' === typeof (res)) {
                throw new Error('Not valid response');
            }
            return res;
        }), catchError((err) => throwError(err.error)));
    }
}
DiscoveryApiService.ɵfac = function DiscoveryApiService_Factory(t) { return new (t || DiscoveryApiService)(ɵngcc0.ɵɵinject(ɵngcc1.AlfrescoApiService), ɵngcc0.ɵɵinject(ɵngcc2.AuthenticationService)); };
DiscoveryApiService.ɵprov = i0.ɵɵdefineInjectable({ factory: function DiscoveryApiService_Factory() { return new DiscoveryApiService(i0.ɵɵinject(i1.AlfrescoApiService), i0.ɵɵinject(i2.AuthenticationService)); }, token: DiscoveryApiService, providedIn: "root" });
DiscoveryApiService.ctorParameters = () => [
    { type: AlfrescoApiService },
    { type: AuthenticationService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DiscoveryApiService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.AlfrescoApiService }, { type: ɵngcc2.AuthenticationService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlzY292ZXJ5LWFwaS5zZXJ2aWNlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9ob21lL3RyYXZpcy9idWlsZC9BbGZyZXNjby9hbGZyZXNjby1uZzItY29tcG9uZW50cy9saWIvY29yZS9zZXJ2aWNlcy9kaXNjb3ZlcnktYXBpLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBaUJBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLElBQUksRUFBYyxVQUFVLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQzdELE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxzQkFBc0IsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQ2pHLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQzVELE9BQU8sRUFBRSxVQUFVLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFMUUsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDakU7QUFFc0I7QUFJaEI7Ozs7QUFGTixNQUFNLE9BQU8sbUJBQW1CO0FBQ2hDLElBTUksWUFDWSxVQUE4QixFQUM5QixxQkFBNEM7QUFDNUQsUUFGZ0IsZUFBVSxHQUFWLFVBQVUsQ0FBb0I7QUFBQyxRQUMvQiwwQkFBcUIsR0FBckIscUJBQXFCLENBQXVCO0FBQUMsUUFKekQsb0JBQWUsR0FBRyxJQUFJLE9BQU8sRUFBMEIsQ0FBQztBQUM1RCxRQUtRLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxPQUFPO0FBQzFDLGFBQWEsSUFBSSxDQUNELE1BQU0sQ0FBQyxHQUFHLEVBQUUsd0JBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxXQUFXLEVBQUUsMENBQUUsYUFBYSxLQUFFLENBQUMsRUFDNUQsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUNQLFNBQVMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxDQUM1QztBQUNiLGFBQWEsU0FBUyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ2xFLElBQUksQ0FBQztBQUNMLElBS1csaUJBQWlCO0FBQUssUUFDekIsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLHdCQUF3QixFQUFFLENBQUM7QUFDcEcsYUFBYSxJQUFJLENBQ0QsR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxJQUFJLHNCQUFzQixDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQzdDLFVBQVUsQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQ3ZDLENBQUM7QUFDZCxJQUFJLENBQUM7QUFDTCxJQUtXLGlCQUFpQjtBQUFLLFFBQ3pCLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsV0FBVyxFQUFFLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxhQUFhLEVBQUUsQ0FBQztBQUNwRixhQUFhLElBQUksQ0FDRCxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLElBQUksc0JBQXNCLENBQUMsR0FBRyxDQUFDLENBQUMsRUFDN0MsVUFBVSxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FDdkMsQ0FBQztBQUNkLElBQUksQ0FBQztBQUNMLElBQ0ksSUFBWSxtQkFBbUI7QUFBSyxRQUNoQyxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsV0FBVyxFQUFFLENBQUMsUUFBUSxDQUFDLG1CQUFtQixDQUFDO0FBQzFFLElBQUksQ0FBQztBQUNMLElBQ1csc0JBQXNCO0FBQUssUUFDOUIsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLGFBQWEsRUFBRSxDQUFDO0FBQzdELGFBQWEsSUFBSSxDQUNELEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFO0FBQzVCLFlBQW9CLElBQUksUUFBUSxLQUFLLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRTtBQUNuRCxnQkFBd0IsTUFBTSxJQUFJLEtBQUssQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO0FBQzlELGFBQXFCO0FBQ3JCLFlBQW9CLE9BQU8sR0FBRyxDQUFDO0FBQy9CLFFBQWdCLENBQUMsQ0FBQyxFQUNGLFVBQVUsQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUM3QyxDQUFDO0FBQ2QsSUFBSSxDQUFDO0FBQ0w7eU1BQUM7QUFDRCxzUUE3REs7QUFBQztFQUhMLFVBQVUsU0FBQyxyQkFNTCxZQVhFLGtCQUFrQjtLQU12QixVQUFVLEVBQUUsTUFBTSx2QkFOUyxZQUd0QixxQkFBcUI7Q0FJN0IsREFKZ0M7Ozs7OzsySEFBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgZnJvbSwgT2JzZXJ2YWJsZSwgdGhyb3dFcnJvciwgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgQnBtUHJvZHVjdFZlcnNpb25Nb2RlbCwgRWNtUHJvZHVjdFZlcnNpb25Nb2RlbCB9IGZyb20gJy4uL21vZGVscy9wcm9kdWN0LXZlcnNpb24ubW9kZWwnO1xuaW1wb3J0IHsgQWxmcmVzY29BcGlTZXJ2aWNlIH0gZnJvbSAnLi9hbGZyZXNjby1hcGkuc2VydmljZSc7XG5pbXBvcnQgeyBjYXRjaEVycm9yLCBtYXAsIHN3aXRjaE1hcCwgZmlsdGVyLCB0YWtlIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgQWN0aXZpdGksIFN5c3RlbVByb3BlcnRpZXNSZXByZXNlbnRhdGlvbiB9IGZyb20gJ0BhbGZyZXNjby9qcy1hcGknO1xuaW1wb3J0IHsgQXV0aGVudGljYXRpb25TZXJ2aWNlIH0gZnJvbSAnLi9hdXRoZW50aWNhdGlvbi5zZXJ2aWNlJztcblxuQEluamVjdGFibGUoe1xuICAgIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBEaXNjb3ZlcnlBcGlTZXJ2aWNlIHtcblxuICAgIC8qKlxuICAgICAqIEdldHMgcHJvZHVjdCBpbmZvcm1hdGlvbiBmb3IgQ29udGVudCBTZXJ2aWNlcy5cbiAgICAgKi9cbiAgICBlY21Qcm9kdWN0SW5mbyQgPSBuZXcgU3ViamVjdDxFY21Qcm9kdWN0VmVyc2lvbk1vZGVsPigpO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHByaXZhdGUgYXBpU2VydmljZTogQWxmcmVzY29BcGlTZXJ2aWNlLFxuICAgICAgICBwcml2YXRlIGF1dGhlbnRpY2F0aW9uU2VydmljZTogQXV0aGVudGljYXRpb25TZXJ2aWNlKSB7XG5cbiAgICAgICAgdGhpcy5hdXRoZW50aWNhdGlvblNlcnZpY2Uub25Mb2dpblxuICAgICAgICAgICAgLnBpcGUoXG4gICAgICAgICAgICAgICAgZmlsdGVyKCgpID0+IHRoaXMuYXBpU2VydmljZS5nZXRJbnN0YW5jZSgpPy5pc0VjbUxvZ2dlZEluKCkpLFxuICAgICAgICAgICAgICAgIHRha2UoMSksXG4gICAgICAgICAgICAgICAgc3dpdGNoTWFwKCgpID0+IHRoaXMuZ2V0RWNtUHJvZHVjdEluZm8oKSlcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgIC5zdWJzY3JpYmUoKGluZm8pID0+IHRoaXMuZWNtUHJvZHVjdEluZm8kLm5leHQoaW5mbykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgcHJvZHVjdCBpbmZvcm1hdGlvbiBmb3IgQ29udGVudCBTZXJ2aWNlcy5cbiAgICAgKiBAcmV0dXJucyBQcm9kdWN0VmVyc2lvbk1vZGVsIGNvbnRhaW5pbmcgcHJvZHVjdCBkZXRhaWxzXG4gICAgICovXG4gICAgcHVibGljIGdldEVjbVByb2R1Y3RJbmZvKCk6IE9ic2VydmFibGU8RWNtUHJvZHVjdFZlcnNpb25Nb2RlbD4ge1xuICAgICAgICByZXR1cm4gZnJvbSh0aGlzLmFwaVNlcnZpY2UuZ2V0SW5zdGFuY2UoKS5kaXNjb3ZlcnkuZGlzY292ZXJ5QXBpLmdldFJlcG9zaXRvcnlJbmZvcm1hdGlvbigpKVxuICAgICAgICAgICAgLnBpcGUoXG4gICAgICAgICAgICAgICAgbWFwKChyZXMpID0+IG5ldyBFY21Qcm9kdWN0VmVyc2lvbk1vZGVsKHJlcykpLFxuICAgICAgICAgICAgICAgIGNhdGNoRXJyb3IoKGVycikgPT4gdGhyb3dFcnJvcihlcnIpKVxuICAgICAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHByb2R1Y3QgaW5mb3JtYXRpb24gZm9yIFByb2Nlc3MgU2VydmljZXMuXG4gICAgICogQHJldHVybnMgUHJvZHVjdFZlcnNpb25Nb2RlbCBjb250YWluaW5nIHByb2R1Y3QgZGV0YWlsc1xuICAgICAqL1xuICAgIHB1YmxpYyBnZXRCcG1Qcm9kdWN0SW5mbygpOiBPYnNlcnZhYmxlPEJwbVByb2R1Y3RWZXJzaW9uTW9kZWw+IHtcbiAgICAgICAgcmV0dXJuIGZyb20odGhpcy5hcGlTZXJ2aWNlLmdldEluc3RhbmNlKCkuYWN0aXZpdGkuYWJvdXRBcGkuZ2V0QXBwVmVyc2lvbigpKVxuICAgICAgICAgICAgLnBpcGUoXG4gICAgICAgICAgICAgICAgbWFwKChyZXMpID0+IG5ldyBCcG1Qcm9kdWN0VmVyc2lvbk1vZGVsKHJlcykpLFxuICAgICAgICAgICAgICAgIGNhdGNoRXJyb3IoKGVycikgPT4gdGhyb3dFcnJvcihlcnIpKVxuICAgICAgICAgICAgKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldCBzeXN0ZW1Qcm9wZXJ0aWVzQXBpKCk6IEFjdGl2aXRpLlN5c3RlbVByb3BlcnRpZXNBcGkge1xuICAgICAgICByZXR1cm4gdGhpcy5hcGlTZXJ2aWNlLmdldEluc3RhbmNlKCkuYWN0aXZpdGkuc3lzdGVtUHJvcGVydGllc0FwaTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0QlBNU3lzdGVtUHJvcGVydGllcygpOiBPYnNlcnZhYmxlPFN5c3RlbVByb3BlcnRpZXNSZXByZXNlbnRhdGlvbj4ge1xuICAgICAgICByZXR1cm4gZnJvbSh0aGlzLnN5c3RlbVByb3BlcnRpZXNBcGkuZ2V0UHJvcGVydGllcygpKVxuICAgICAgICAgICAgLnBpcGUoXG4gICAgICAgICAgICAgICAgbWFwKChyZXMpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCdzdHJpbmcnID09PSB0eXBlb2YgKHJlcykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTm90IHZhbGlkIHJlc3BvbnNlJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICBjYXRjaEVycm9yKChlcnIpID0+IHRocm93RXJyb3IoZXJyLmVycm9yKSlcbiAgICAgICAgICAgICk7XG4gICAgfVxufVxuIl19