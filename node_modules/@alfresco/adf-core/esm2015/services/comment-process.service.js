import { Injectable } from '@angular/core';
import { from, throwError } from 'rxjs';
import { CommentModel } from '../models/comment.model';
import { UserProcessModel } from '../models/user-process.model';
import { AlfrescoApiService } from './alfresco-api.service';
import { LogService } from './log.service';
import { map, catchError } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "./alfresco-api.service";
import * as i2 from "./log.service";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './alfresco-api.service';
import * as ɵngcc2 from './log.service';
export class CommentProcessService {
    constructor(apiService, logService) {
        this.apiService = apiService;
        this.logService = logService;
    }
    addTaskComment(taskId, message) {
        return from(this.apiService.getInstance().activiti.taskApi.addTaskComment({ message: message }, taskId))
            .pipe(map((response) => {
            return new CommentModel({
                id: response.id,
                message: response.message,
                created: response.created,
                createdBy: response.createdBy
            });
        }), catchError((err) => this.handleError(err)));
    }
    getTaskComments(taskId) {
        return from(this.apiService.getInstance().activiti.taskApi.getTaskComments(taskId))
            .pipe(map((response) => {
            const comments = [];
            response.data.forEach((comment) => {
                const user = new UserProcessModel(comment.createdBy);
                comments.push(new CommentModel({
                    id: comment.id,
                    message: comment.message,
                    created: comment.created,
                    createdBy: user
                }));
            });
            return comments;
        }), catchError((err) => this.handleError(err)));
    }
    getProcessInstanceComments(processInstanceId) {
        return from(this.apiService.getInstance().activiti.commentsApi.getProcessInstanceComments(processInstanceId))
            .pipe(map((response) => {
            const comments = [];
            response.data.forEach((comment) => {
                const user = new UserProcessModel(comment.createdBy);
                comments.push(new CommentModel({
                    id: comment.id,
                    message: comment.message,
                    created: comment.created,
                    createdBy: user
                }));
            });
            return comments;
        }), catchError((err) => this.handleError(err)));
    }
    addProcessInstanceComment(processInstanceId, message) {
        return from(this.apiService.getInstance().activiti.commentsApi.addProcessInstanceComment({ message: message }, processInstanceId)).pipe(map((response) => {
            return new CommentModel({
                id: response.id,
                message: response.message,
                created: response.created,
                createdBy: response.createdBy
            });
        }), catchError((err) => this.handleError(err)));
    }
    handleError(error) {
        this.logService.error(error);
        return throwError(error || 'Server error');
    }
}
CommentProcessService.ɵfac = function CommentProcessService_Factory(t) { return new (t || CommentProcessService)(ɵngcc0.ɵɵinject(ɵngcc1.AlfrescoApiService), ɵngcc0.ɵɵinject(ɵngcc2.LogService)); };
CommentProcessService.ɵprov = i0.ɵɵdefineInjectable({ factory: function CommentProcessService_Factory() { return new CommentProcessService(i0.ɵɵinject(i1.AlfrescoApiService), i0.ɵɵinject(i2.LogService)); }, token: CommentProcessService, providedIn: "root" });
CommentProcessService.ctorParameters = () => [
    { type: AlfrescoApiService },
    { type: LogService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CommentProcessService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.AlfrescoApiService }, { type: ɵngcc2.LogService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,