import { Injectable } from '@angular/core';
import { from, throwError } from 'rxjs';
import { AlfrescoApiService } from './alfresco-api.service';
import { SitesApi } from '@alfresco/js-api';
import { catchError } from 'rxjs/operators';
import { LogService } from './log.service';
import * as i0 from "@angular/core";
import * as i1 from "./alfresco-api.service";
import * as i2 from "./log.service";
export class SitesService {
    constructor(apiService, logService) {
        this.apiService = apiService;
        this.logService = logService;
        this.sitesApi = new SitesApi(apiService.getInstance());
    }
    createSite(siteBody) {
        return from(this.sitesApi.createSite(siteBody))
            .pipe(catchError((err) => this.handleError(err)));
    }
    getSites(opts = {}) {
        const defaultOptions = {
            skipCount: 0,
            include: ['properties']
        };
        const queryOptions = Object.assign({}, defaultOptions, opts);
        return from(this.sitesApi.listSites(queryOptions))
            .pipe(catchError((err) => this.handleError(err)));
    }
    getSite(siteId, opts) {
        return from(this.sitesApi.getSite(siteId, opts))
            .pipe(catchError((err) => this.handleError(err)));
    }
    deleteSite(siteId, permanentFlag = true) {
        const options = {};
        options.permanent = permanentFlag;
        return from(this.sitesApi.deleteSite(siteId, options))
            .pipe(catchError((err) => this.handleError(err)));
    }
    getSiteContent(siteId) {
        return this.getSite(siteId, { relations: ['containers'] });
    }
    getSiteMembers(siteId) {
        return this.getSite(siteId, { relations: ['members'] });
    }
    listSiteMemberships(siteId, opts) {
        return from(this.sitesApi.listSiteMemberships(siteId, opts));
    }
    getEcmCurrentLoggedUserName() {
        return this.apiService.getInstance().getEcmUsername();
    }
    getSiteNameFromNodePath(node) {
        let siteName = '';
        if (node.path && node.path.elements) {
            const foundNode = node.path
                .elements.find((pathNode) => pathNode.nodeType === 'st:site' &&
                pathNode.name !== 'Sites');
            siteName = foundNode ? foundNode.name : '';
        }
        return siteName.toLocaleLowerCase();
    }
    getSiteMembershipRequests(opts) {
        return from(this.sitesApi.getSiteMembershipRequests(opts))
            .pipe(catchError((err) => this.handleError(err)));
    }
    createSiteMembership(siteId, siteMembershipBodyCreate, opts) {
        return from(this.sitesApi.createSiteMembership(siteId, siteMembershipBodyCreate, opts))
            .pipe(catchError((err) => this.handleError(err)));
    }
    updateSiteMembership(siteId, personId, siteMembershipBodyUpdate, opts) {
        return from(this.sitesApi.updateSiteMembership(siteId, personId, siteMembershipBodyUpdate, opts))
            .pipe(catchError((err) => this.handleError(err)));
    }
    deleteSiteMembership(siteId, personId) {
        return from(this.sitesApi.deleteSiteMembership(siteId, personId))
            .pipe(catchError((err) => this.handleError(err)));
    }
    approveSiteMembershipRequest(siteId, inviteeId, opts) {
        return from(this.sitesApi.approveSiteMembershipRequest(siteId, inviteeId, opts))
            .pipe(catchError((err) => this.handleError(err)));
    }
    rejectSiteMembershipRequest(siteId, inviteeId, opts) {
        return from(this.sitesApi.rejectSiteMembershipRequest(siteId, inviteeId, opts))
            .pipe(catchError((err) => this.handleError(err)));
    }
    listSiteGroups(siteId, opts) {
        return from(this.sitesApi.listSiteGroups(siteId, opts))
            .pipe(catchError((err) => this.handleError(err)));
    }
    createSiteGroupMembership(siteId, siteMembershipBodyCreate) {
        return from(this.sitesApi.createSiteGroupMembership(siteId, siteMembershipBodyCreate))
            .pipe(catchError((err) => this.handleError(err)));
    }
    getSiteGroupMembership(siteId, groupId) {
        return from(this.sitesApi.getSiteGroupMembership(siteId, groupId))
            .pipe(catchError((err) => this.handleError(err)));
    }
    updateSiteGroupMembership(siteId, groupId, siteMembershipBodyUpdate) {
        return from(this.sitesApi.updateSiteGroupMembership(siteId, groupId, siteMembershipBodyUpdate))
            .pipe(catchError((err) => this.handleError(err)));
    }
    deleteSiteGroupMembership(siteId, groupId) {
        return from(this.sitesApi.deleteSiteGroupMembership(siteId, groupId))
            .pipe(catchError((err) => this.handleError(err)));
    }
    handleError(error) {
        this.logService.error(error);
        return throwError(error || 'Server error');
    }
}
SitesService.ɵprov = i0.ɵɵdefineInjectable({ factory: function SitesService_Factory() { return new SitesService(i0.ɵɵinject(i1.AlfrescoApiService), i0.ɵɵinject(i2.LogService)); }, token: SitesService, providedIn: "root" });
SitesService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
SitesService.ctorParameters = () => [
    { type: AlfrescoApiService },
    { type: LogService }
];
//# sourceMappingURL=data:application/json;base64,