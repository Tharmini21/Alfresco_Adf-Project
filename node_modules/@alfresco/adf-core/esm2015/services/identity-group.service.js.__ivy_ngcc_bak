import { Injectable } from '@angular/core';
import { of } from 'rxjs';
import { map, switchMap } from 'rxjs/operators';
import { AppConfigService } from '../app-config/app-config.service';
import { OAuth2Service } from './oauth2.service';
import * as i0 from "@angular/core";
import * as i1 from "./oauth2.service";
import * as i2 from "../app-config/app-config.service";
export class IdentityGroupService {
    constructor(oAuth2Service, appConfigService) {
        this.oAuth2Service = oAuth2Service;
        this.appConfigService = appConfigService;
    }
    get identityHost() {
        return `${this.appConfigService.get('identityHost')}`;
    }
    getGroups() {
        const url = `${this.identityHost}/groups`;
        return this.oAuth2Service.get({ url });
    }
    getAvailableRoles(groupId) {
        const url = `${this.identityHost}/groups/${groupId}/role-mappings/realm/available`;
        return this.oAuth2Service.get({ url });
    }
    getAssignedRoles(groupId) {
        const url = `${this.identityHost}/groups/${groupId}/role-mappings/realm`;
        return this.oAuth2Service.get({ url });
    }
    assignRoles(groupId, roles) {
        const url = `${this.identityHost}/groups/${groupId}/role-mappings/realm`;
        const bodyParam = JSON.stringify(roles);
        return this.oAuth2Service.post({ url, bodyParam });
    }
    removeRoles(groupId, roles) {
        const url = `${this.identityHost}/groups/${groupId}/role-mappings/realm`;
        const bodyParam = JSON.stringify(roles);
        return this.oAuth2Service.delete({ url, bodyParam });
    }
    getEffectiveRoles(groupId) {
        const url = `${this.identityHost}/groups/${groupId}/role-mappings/realm/composite`;
        return this.oAuth2Service.get({ url });
    }
    queryGroups(requestQuery) {
        const url = `${this.identityHost}/groups`;
        const queryParams = { first: requestQuery.first || 0, max: requestQuery.max || 5 };
        return this.getTotalGroupsCount().pipe(switchMap((totalCount) => this.oAuth2Service.get({ url, queryParams }).pipe(map((response) => {
            return {
                entries: response,
                pagination: {
                    skipCount: requestQuery.first,
                    maxItems: requestQuery.max,
                    count: totalCount.count,
                    hasMoreItems: false,
                    totalItems: totalCount.count
                }
            };
        }))));
    }
    getTotalGroupsCount() {
        const url = `${this.identityHost}/groups/count`;
        return this.oAuth2Service.get({ url });
    }
    createGroup(newGroup) {
        const url = `${this.identityHost}/groups`;
        const bodyParam = newGroup;
        return this.oAuth2Service.post({ url, bodyParam });
    }
    updateGroup(groupId, updatedGroup) {
        const url = `${this.identityHost}/groups/${groupId}`;
        const bodyParam = JSON.stringify(updatedGroup);
        return this.oAuth2Service.put({ url, bodyParam });
    }
    deleteGroup(groupId) {
        const url = `${this.identityHost}/groups/${groupId}`;
        return this.oAuth2Service.delete({ url });
    }
    findGroupsByName(searchParams) {
        if (searchParams.name === '') {
            return of([]);
        }
        const url = `${this.identityHost}/groups`;
        const queryParams = { search: searchParams.name };
        return this.oAuth2Service.get({ url, queryParams });
    }
    getGroupRoles(groupId) {
        const url = this.buildRolesUrl(groupId);
        return this.oAuth2Service.get({ url });
    }
    checkGroupHasRole(groupId, roleNames) {
        return this.getGroupRoles(groupId).pipe(map((groupRoles) => {
            let hasRole = false;
            if (groupRoles && groupRoles.length > 0) {
                roleNames.forEach((roleName) => {
                    const role = groupRoles.find(({ name }) => roleName === name);
                    if (role) {
                        hasRole = true;
                        return;
                    }
                });
            }
            return hasRole;
        }));
    }
    getClientIdByApplicationName(applicationName) {
        const url = `${this.identityHost}/clients`;
        const queryParams = { clientId: applicationName };
        return this.oAuth2Service.get({ url, queryParams }).pipe(map((response) => response && response.length > 0 ? response[0].id : ''));
    }
    getClientRoles(groupId, clientId) {
        const url = `${this.identityHost}/groups/${groupId}/role-mappings/clients/${clientId}`;
        return this.oAuth2Service.get({ url });
    }
    checkGroupHasClientApp(groupId, clientId) {
        return this.getClientRoles(groupId, clientId).pipe(map((response) => response && response.length > 0));
    }
    checkGroupHasAnyClientAppRole(groupId, clientId, roleNames) {
        return this.getClientRoles(groupId, clientId).pipe(map((clientRoles) => {
            let hasRole = false;
            if (clientRoles.length > 0) {
                roleNames.forEach((roleName) => {
                    const role = clientRoles.find(({ name }) => name === roleName);
                    if (role) {
                        hasRole = true;
                        return;
                    }
                });
            }
            return hasRole;
        }));
    }
    buildRolesUrl(groupId) {
        return `${this.identityHost}/groups/${groupId}/role-mappings/realm/composite`;
    }
}
IdentityGroupService.ɵprov = i0.ɵɵdefineInjectable({ factory: function IdentityGroupService_Factory() { return new IdentityGroupService(i0.ɵɵinject(i1.OAuth2Service), i0.ɵɵinject(i2.AppConfigService)); }, token: IdentityGroupService, providedIn: "root" });
IdentityGroupService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
IdentityGroupService.ctorParameters = () => [
    { type: OAuth2Service },
    { type: AppConfigService }
];
//# sourceMappingURL=data:application/json;base64,