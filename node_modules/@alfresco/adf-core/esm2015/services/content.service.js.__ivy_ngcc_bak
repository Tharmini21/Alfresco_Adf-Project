import { Injectable } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { Subject, from, throwError } from 'rxjs';
import { AlfrescoApiService } from './alfresco-api.service';
import { AuthenticationService } from './authentication.service';
import { LogService } from './log.service';
import { catchError } from 'rxjs/operators';
import { PermissionsEnum } from '../models/permissions.enum';
import { AllowableOperationsEnum } from '../models/allowable-operations.enum';
import { DownloadService } from './download.service';
import { ThumbnailService } from './thumbnail.service';
import * as i0 from "@angular/core";
import * as i1 from "./authentication.service";
import * as i2 from "./alfresco-api.service";
import * as i3 from "./log.service";
import * as i4 from "@angular/platform-browser";
import * as i5 from "./download.service";
import * as i6 from "./thumbnail.service";
export class ContentService {
    constructor(authService, apiService, logService, sanitizer, downloadService, thumbnailService) {
        this.authService = authService;
        this.apiService = apiService;
        this.logService = logService;
        this.sanitizer = sanitizer;
        this.downloadService = downloadService;
        this.thumbnailService = thumbnailService;
        this.folderCreated = new Subject();
        this.folderCreate = new Subject();
        this.folderEdit = new Subject();
    }
    downloadBlob(blob, fileName) {
        this.downloadService.downloadBlob(blob, fileName);
    }
    downloadData(data, fileName) {
        this.downloadService.downloadData(data, fileName);
    }
    downloadJSON(json, fileName) {
        this.downloadService.downloadJSON(json, fileName);
    }
    createTrustedUrl(blob) {
        const url = window.URL.createObjectURL(blob);
        return this.sanitizer.bypassSecurityTrustUrl(url);
    }
    get contentApi() {
        return this.apiService.getInstance().content;
    }
    getDocumentThumbnailUrl(node, attachment, ticket) {
        return this.thumbnailService.getDocumentThumbnailUrl(node, attachment, ticket);
    }
    getContentUrl(node, attachment, ticket) {
        if (node) {
            let nodeId;
            if (typeof node === 'string') {
                nodeId = node;
            }
            else if (node.entry) {
                nodeId = node.entry.id;
            }
            return this.contentApi.getContentUrl(nodeId, attachment, ticket);
        }
        return null;
    }
    getNodeContent(nodeId) {
        return from(this.apiService.getInstance().core.nodesApi.getFileContent(nodeId))
            .pipe(catchError((err) => this.handleError(err)));
    }
    getNode(nodeId, opts) {
        return from(this.apiService.getInstance().nodes.getNode(nodeId, opts));
    }
    hasPermissions(node, permission, userId) {
        var _a, _b;
        let hasPermissions = false;
        userId = userId !== null && userId !== void 0 ? userId : this.authService.getEcmUsername();
        const permissions = [...(((_a = node.permissions) === null || _a === void 0 ? void 0 : _a.locallySet) || []), ...(((_b = node.permissions) === null || _b === void 0 ? void 0 : _b.inherited) || [])]
            .filter((currentPermission) => currentPermission.authorityId === userId);
        if (permissions.length) {
            if (permission && permission.startsWith('!')) {
                hasPermissions = permissions.find((currentPermission) => currentPermission.name === permission.replace('!', '')) ? false : true;
            }
            else {
                hasPermissions = permissions.find((currentPermission) => currentPermission.name === permission) ? true : false;
            }
        }
        else {
            if (permission === PermissionsEnum.CONSUMER) {
                hasPermissions = true;
            }
            else if (permission === PermissionsEnum.NOT_CONSUMER) {
                hasPermissions = false;
            }
            else if (permission && permission.startsWith('!')) {
                hasPermissions = true;
            }
        }
        return hasPermissions;
    }
    hasAllowableOperations(node, allowableOperation) {
        let hasAllowableOperations = false;
        if (node && node.allowableOperations) {
            if (allowableOperation && allowableOperation.startsWith('!')) {
                hasAllowableOperations = node.allowableOperations.find((currentOperation) => currentOperation === allowableOperation.replace('!', '')) ? false : true;
            }
            else {
                hasAllowableOperations = node.allowableOperations.find((currentOperation) => currentOperation === allowableOperation) ? true : false;
            }
        }
        else {
            if (allowableOperation && allowableOperation.startsWith('!')) {
                hasAllowableOperations = true;
            }
        }
        if (allowableOperation === AllowableOperationsEnum.COPY) {
            hasAllowableOperations = true;
        }
        if (allowableOperation === AllowableOperationsEnum.LOCK) {
            hasAllowableOperations = node.isFile;
            if (node.isLocked && node.allowableOperations) {
                hasAllowableOperations = !!~node.allowableOperations.indexOf('updatePermissions');
            }
        }
        return hasAllowableOperations;
    }
    handleError(error) {
        this.logService.error(error);
        return throwError(error || 'Server error');
    }
}
ContentService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ContentService_Factory() { return new ContentService(i0.ɵɵinject(i1.AuthenticationService), i0.ɵɵinject(i2.AlfrescoApiService), i0.ɵɵinject(i3.LogService), i0.ɵɵinject(i4.DomSanitizer), i0.ɵɵinject(i5.DownloadService), i0.ɵɵinject(i6.ThumbnailService)); }, token: ContentService, providedIn: "root" });
ContentService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
ContentService.ctorParameters = () => [
    { type: AuthenticationService },
    { type: AlfrescoApiService },
    { type: LogService },
    { type: DomSanitizer },
    { type: DownloadService },
    { type: ThumbnailService }
];
//# sourceMappingURL=data:application/json;base64,