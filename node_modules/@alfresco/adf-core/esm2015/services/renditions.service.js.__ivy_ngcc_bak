import { Injectable } from '@angular/core';
import { Observable, from, interval, empty } from 'rxjs';
import { AlfrescoApiService } from './alfresco-api.service';
import { concatMap, switchMap, takeWhile, map } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "./alfresco-api.service";
export class RenditionsService {
    constructor(apiService) {
        this.apiService = apiService;
    }
    getAvailableRenditionForNode(nodeId) {
        return from(this.apiService.renditionsApi.getRenditions(nodeId)).pipe(map((availableRenditions) => {
            const renditionsAvailable = availableRenditions.list.entries.filter((rendition) => (rendition.entry.id === 'pdf' || rendition.entry.id === 'imgpreview'));
            const existingRendition = renditionsAvailable.find((rend) => rend.entry.status === 'CREATED');
            return existingRendition ? existingRendition : renditionsAvailable[0];
        }));
    }
    generateRenditionForNode(nodeId) {
        return this.getAvailableRenditionForNode(nodeId).pipe(map((rendition) => {
            if (rendition.entry.status !== 'CREATED') {
                return from(this.apiService.renditionsApi.createRendition(nodeId, { id: rendition.entry.id }));
            }
            else {
                return empty();
            }
        }));
    }
    isRenditionAvailable(nodeId, encoding) {
        return new Observable((observer) => {
            this.getRendition(nodeId, encoding).subscribe((res) => {
                let isAvailable = true;
                if (res.entry.status.toString() === 'NOT_CREATED') {
                    isAvailable = false;
                }
                observer.next(isAvailable);
                observer.complete();
            }, () => {
                observer.next(false);
                observer.complete();
            });
        });
    }
    isConversionPossible(nodeId, encoding) {
        return new Observable((observer) => {
            this.getRendition(nodeId, encoding).subscribe(() => {
                observer.next(true);
                observer.complete();
            }, () => {
                observer.next(false);
                observer.complete();
            });
        });
    }
    getRenditionUrl(nodeId, encoding) {
        return this.apiService.contentApi.getRenditionUrl(nodeId, encoding);
    }
    getRendition(nodeId, encoding) {
        return from(this.apiService.renditionsApi.getRendition(nodeId, encoding));
    }
    getRenditionsListByNodeId(nodeId) {
        return from(this.apiService.renditionsApi.getRenditions(nodeId));
    }
    createRendition(nodeId, encoding) {
        return from(this.apiService.renditionsApi.createRendition(nodeId, { id: encoding }));
    }
    convert(nodeId, encoding, pollingInterval = 1000, retries = 5) {
        return this.createRendition(nodeId, encoding)
            .pipe(concatMap(() => this.pollRendition(nodeId, encoding, pollingInterval, retries)));
    }
    pollRendition(nodeId, encoding, intervalSize = 1000, retries = 5) {
        let attempts = 0;
        return interval(intervalSize)
            .pipe(switchMap(() => this.getRendition(nodeId, encoding)), takeWhile((renditionEntry) => {
            attempts += 1;
            if (attempts > retries) {
                return false;
            }
            return (renditionEntry.entry.status.toString() !== 'CREATED');
        }));
    }
}
RenditionsService.ɵprov = i0.ɵɵdefineInjectable({ factory: function RenditionsService_Factory() { return new RenditionsService(i0.ɵɵinject(i1.AlfrescoApiService)); }, token: RenditionsService, providedIn: "root" });
RenditionsService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
RenditionsService.ctorParameters = () => [
    { type: AlfrescoApiService }
];
//# sourceMappingURL=data:application/json;base64,