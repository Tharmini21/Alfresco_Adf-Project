import { __awaiter } from "tslib";
import { Injectable } from '@angular/core';
import { Router } from '@angular/router';
import { AuthenticationService } from './authentication.service';
import { AppConfigService } from '../app-config/app-config.service';
import { AuthGuardBase } from './auth-guard-base';
import { JwtHelperService } from './jwt-helper.service';
import { MatDialog } from '@angular/material/dialog';
import { StorageService } from './storage.service';
import * as i0 from "@angular/core";
import * as i1 from "./jwt-helper.service";
import * as i2 from "./authentication.service";
import * as i3 from "@angular/router";
import * as i4 from "../app-config/app-config.service";
import * as i5 from "@angular/material/dialog";
import * as i6 from "./storage.service";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './jwt-helper.service';
import * as ɵngcc2 from './authentication.service';
import * as ɵngcc3 from '@angular/router';
import * as ɵngcc4 from '../app-config/app-config.service';
import * as ɵngcc5 from '@angular/material/dialog';
import * as ɵngcc6 from './storage.service';
export class AuthGuard extends AuthGuardBase {
    constructor(jwtHelperService, authenticationService, router, appConfigService, dialog, storageService) {
        super(authenticationService, router, appConfigService, dialog, storageService);
        this.jwtHelperService = jwtHelperService;
        this.ticketChangeBind = this.ticketChange.bind(this);
        window.addEventListener('storage', this.ticketChangeBind);
    }
    ticketChange(event) {
        if (event.key.includes('ticket-ECM') && event.newValue !== event.oldValue) {
            this.ticketChangeRedirect(event);
        }
        if (event.key.includes('ticket-BPM') && event.newValue !== event.oldValue) {
            this.ticketChangeRedirect(event);
        }
        if (event.key.endsWith(JwtHelperService.USER_ACCESS_TOKEN) &&
            this.jwtHelperService.getValueFromToken(event.newValue, JwtHelperService.USER_PREFERRED_USERNAME) !==
                this.jwtHelperService.getValueFromToken(event.oldValue, JwtHelperService.USER_PREFERRED_USERNAME)) {
            this.ticketChangeRedirect(event);
        }
    }
    ticketChangeRedirect(event) {
        if (!event.newValue) {
            this.navigate(this.router.url);
        }
        else {
            window.location.reload();
        }
    }
    checkLogin(_, redirectUrl) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.authenticationService.isLoggedIn() || this.withCredentials) {
                return true;
            }
            return this.redirectToUrl(redirectUrl);
        });
    }
}
AuthGuard.ɵfac = function AuthGuard_Factory(t) { return new (t || AuthGuard)(ɵngcc0.ɵɵinject(ɵngcc1.JwtHelperService), ɵngcc0.ɵɵinject(ɵngcc2.AuthenticationService), ɵngcc0.ɵɵinject(ɵngcc3.Router), ɵngcc0.ɵɵinject(ɵngcc4.AppConfigService), ɵngcc0.ɵɵinject(ɵngcc5.MatDialog), ɵngcc0.ɵɵinject(ɵngcc6.StorageService)); };
AuthGuard.ɵprov = i0.ɵɵdefineInjectable({ factory: function AuthGuard_Factory() { return new AuthGuard(i0.ɵɵinject(i1.JwtHelperService), i0.ɵɵinject(i2.AuthenticationService), i0.ɵɵinject(i3.Router), i0.ɵɵinject(i4.AppConfigService), i0.ɵɵinject(i5.MatDialog), i0.ɵɵinject(i6.StorageService)); }, token: AuthGuard, providedIn: "root" });
AuthGuard.ctorParameters = () => [
    { type: JwtHelperService },
    { type: AuthenticationService },
    { type: Router },
    { type: AppConfigService },
    { type: MatDialog },
    { type: StorageService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AuthGuard, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.JwtHelperService }, { type: ɵngcc2.AuthenticationService }, { type: ɵngcc3.Router }, { type: ɵngcc4.AppConfigService }, { type: ɵngcc5.MatDialog }, { type: ɵngcc6.StorageService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aC1ndWFyZC5zZXJ2aWNlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9ob21lL3RyYXZpcy9idWlsZC9BbGZyZXNjby9hbGZyZXNjby1uZzItY29tcG9uZW50cy9saWIvY29yZS9zZXJ2aWNlcy9hdXRoLWd1YXJkLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQWlCQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBMEIsTUFBTSxFQUFXLE1BQU0saUJBQWlCLENBQUM7QUFDMUUsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDakUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFDcEUsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ3hELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUNyRCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDbkQ7QUFFc0I7QUFFa0I7QUFJNUI7QUFBdUM7QUFDSjtBQUU5Qzs7Ozs7Ozs7QUFQRCxNQUFNLE9BQU8sU0FBVSxTQUFRLGFBQWE7QUFDNUMsSUFHSSxZQUFvQixnQkFBa0MsRUFDMUMscUJBQTRDLEVBQzVDLE1BQWMsRUFDZCxnQkFBa0MsRUFDbEMsTUFBaUIsRUFDakIsY0FBOEI7QUFDOUMsUUFBUSxLQUFLLENBQUMscUJBQXFCLEVBQUUsTUFBTSxFQUFFLGdCQUFnQixFQUFFLE1BQU0sRUFBRSxjQUFjLENBQUMsQ0FBQztBQUN2RixRQVB3QixxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO0FBQUMsUUFPbkQsSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzdELFFBQ1EsTUFBTSxDQUFDLGdCQUFnQixDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztBQUNsRSxJQUFJLENBQUM7QUFDTCxJQUNJLFlBQVksQ0FBQyxLQUFtQjtBQUNwQyxRQUFRLElBQUksS0FBSyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLElBQUksS0FBSyxDQUFDLFFBQVEsS0FBSyxLQUFLLENBQUMsUUFBUSxFQUFFO0FBQ25GLFlBQVksSUFBSSxDQUFDLG9CQUFvQixDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQzdDLFNBQVM7QUFDVCxRQUNRLElBQUksS0FBSyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLElBQUksS0FBSyxDQUFDLFFBQVEsS0FBSyxLQUFLLENBQUMsUUFBUSxFQUFFO0FBQ25GLFlBQVksSUFBSSxDQUFDLG9CQUFvQixDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQzdDLFNBQVM7QUFDVCxRQUNRLElBQUksS0FBSyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsZ0JBQWdCLENBQUMsaUJBQWlCLENBQUM7QUFDbEUsWUFBWSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsaUJBQWlCLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxnQkFBZ0IsQ0FBQyx1QkFBdUIsQ0FBQztBQUM3RyxnQkFBWSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsaUJBQWlCLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxnQkFBZ0IsQ0FBQyx1QkFBdUIsQ0FBQyxFQUFFO0FBQy9HLFlBQVksSUFBSSxDQUFDLG9CQUFvQixDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQzdDLFNBQVM7QUFDVCxJQUFJLENBQUM7QUFDTCxJQUNZLG9CQUFvQixDQUFDLEtBQW1CO0FBQ3BELFFBQVEsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUU7QUFDN0IsWUFBWSxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDM0MsU0FBUztBQUFDLGFBQUs7QUFDZixZQUFZLE1BQU0sQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFLENBQUM7QUFDckMsU0FBUztBQUNULElBQUksQ0FBQztBQUNMLElBQ1UsVUFBVSxDQUFDLENBQXlCLEVBQUUsV0FBbUI7QUFBSTtBQUNyQyxZQUExQixJQUFJLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxVQUFVLEVBQUUsSUFBSSxJQUFJLENBQUMsZUFBZSxFQUFFO0FBQzdFLGdCQUFZLE9BQU8sSUFBSSxDQUFDO0FBQ3hCLGFBQVM7QUFDVCxZQUFRLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUMvQyxRQUFJLENBQUM7QUFFTCxLQUZLO0FBQ0w7OFRBQUM7QUFDRCxpVkEvQ0s7QUFBQztFQUhMLFVBQVUsU0FBQyxyQkFHNkIsWUFQaEMsZ0JBQWdCO09BS3JCLFVBQVUsRUFBRSxNQUFNLHpCQUxPLFlBSHBCLHFCQUFxQjtFQVM3QixGQVRpQyxZQURELE1BQU07QUFBSSxZQUVsQyxnQkFBZ0I7QUFBSSxZQUdwQixTQUFTO0FBQUksWUFDYixjQUFjO0FBQUc7Ozs7OztrUEFBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQWN0aXZhdGVkUm91dGVTbmFwc2hvdCwgUm91dGVyLCBVcmxUcmVlIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IEF1dGhlbnRpY2F0aW9uU2VydmljZSB9IGZyb20gJy4vYXV0aGVudGljYXRpb24uc2VydmljZSc7XG5pbXBvcnQgeyBBcHBDb25maWdTZXJ2aWNlIH0gZnJvbSAnLi4vYXBwLWNvbmZpZy9hcHAtY29uZmlnLnNlcnZpY2UnO1xuaW1wb3J0IHsgQXV0aEd1YXJkQmFzZSB9IGZyb20gJy4vYXV0aC1ndWFyZC1iYXNlJztcbmltcG9ydCB7IEp3dEhlbHBlclNlcnZpY2UgfSBmcm9tICcuL2p3dC1oZWxwZXIuc2VydmljZSc7XG5pbXBvcnQgeyBNYXREaWFsb2cgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9kaWFsb2cnO1xuaW1wb3J0IHsgU3RvcmFnZVNlcnZpY2UgfSBmcm9tICcuL3N0b3JhZ2Uuc2VydmljZSc7XG5cbkBJbmplY3RhYmxlKHtcbiAgICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgQXV0aEd1YXJkIGV4dGVuZHMgQXV0aEd1YXJkQmFzZSB7XG5cbiAgICB0aWNrZXRDaGFuZ2VCaW5kOiBhbnk7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGp3dEhlbHBlclNlcnZpY2U6IEp3dEhlbHBlclNlcnZpY2UsXG4gICAgICAgICAgICAgICAgYXV0aGVudGljYXRpb25TZXJ2aWNlOiBBdXRoZW50aWNhdGlvblNlcnZpY2UsXG4gICAgICAgICAgICAgICAgcm91dGVyOiBSb3V0ZXIsXG4gICAgICAgICAgICAgICAgYXBwQ29uZmlnU2VydmljZTogQXBwQ29uZmlnU2VydmljZSxcbiAgICAgICAgICAgICAgICBkaWFsb2c6IE1hdERpYWxvZyxcbiAgICAgICAgICAgICAgICBzdG9yYWdlU2VydmljZTogU3RvcmFnZVNlcnZpY2UpIHtcbiAgICAgICAgc3VwZXIoYXV0aGVudGljYXRpb25TZXJ2aWNlLCByb3V0ZXIsIGFwcENvbmZpZ1NlcnZpY2UsIGRpYWxvZywgc3RvcmFnZVNlcnZpY2UpO1xuICAgICAgICB0aGlzLnRpY2tldENoYW5nZUJpbmQgPSB0aGlzLnRpY2tldENoYW5nZS5iaW5kKHRoaXMpO1xuXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdzdG9yYWdlJywgdGhpcy50aWNrZXRDaGFuZ2VCaW5kKTtcbiAgICB9XG5cbiAgICB0aWNrZXRDaGFuZ2UoZXZlbnQ6IFN0b3JhZ2VFdmVudCkge1xuICAgICAgICBpZiAoZXZlbnQua2V5LmluY2x1ZGVzKCd0aWNrZXQtRUNNJykgJiYgZXZlbnQubmV3VmFsdWUgIT09IGV2ZW50Lm9sZFZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLnRpY2tldENoYW5nZVJlZGlyZWN0KGV2ZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChldmVudC5rZXkuaW5jbHVkZXMoJ3RpY2tldC1CUE0nKSAmJiBldmVudC5uZXdWYWx1ZSAhPT0gZXZlbnQub2xkVmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMudGlja2V0Q2hhbmdlUmVkaXJlY3QoZXZlbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGV2ZW50LmtleS5lbmRzV2l0aChKd3RIZWxwZXJTZXJ2aWNlLlVTRVJfQUNDRVNTX1RPS0VOKSAmJlxuICAgICAgICAgICAgdGhpcy5qd3RIZWxwZXJTZXJ2aWNlLmdldFZhbHVlRnJvbVRva2VuKGV2ZW50Lm5ld1ZhbHVlLCBKd3RIZWxwZXJTZXJ2aWNlLlVTRVJfUFJFRkVSUkVEX1VTRVJOQU1FKSAhPT1cbiAgICAgICAgICAgIHRoaXMuand0SGVscGVyU2VydmljZS5nZXRWYWx1ZUZyb21Ub2tlbihldmVudC5vbGRWYWx1ZSwgSnd0SGVscGVyU2VydmljZS5VU0VSX1BSRUZFUlJFRF9VU0VSTkFNRSkpIHtcbiAgICAgICAgICAgIHRoaXMudGlja2V0Q2hhbmdlUmVkaXJlY3QoZXZlbnQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSB0aWNrZXRDaGFuZ2VSZWRpcmVjdChldmVudDogU3RvcmFnZUV2ZW50KSB7XG4gICAgICAgIGlmICghZXZlbnQubmV3VmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMubmF2aWdhdGUodGhpcy5yb3V0ZXIudXJsKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFzeW5jIGNoZWNrTG9naW4oXzogQWN0aXZhdGVkUm91dGVTbmFwc2hvdCwgcmVkaXJlY3RVcmw6IHN0cmluZyk6IFByb21pc2U8Ym9vbGVhbiB8IFVybFRyZWU+IHtcbiAgICAgICAgaWYgKHRoaXMuYXV0aGVudGljYXRpb25TZXJ2aWNlLmlzTG9nZ2VkSW4oKSB8fCB0aGlzLndpdGhDcmVkZW50aWFscykge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMucmVkaXJlY3RUb1VybChyZWRpcmVjdFVybCk7XG4gICAgfVxufVxuIl19