/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, ContentChild, Input, Output, ViewChild, EventEmitter, ViewEncapsulation } from '@angular/core';
import { MediaMatcher } from '@angular/cdk/layout';
import { UserPreferencesService } from '../../../services/user-preferences.service';
import { SidenavLayoutContentDirective } from '../../directives/sidenav-layout-content.directive';
import { SidenavLayoutHeaderDirective } from '../../directives/sidenav-layout-header.directive';
import { SidenavLayoutNavigationDirective } from '../../directives/sidenav-layout-navigation.directive';
import { BehaviorSubject, Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
export class SidenavLayoutComponent {
    constructor(mediaMatcher, userPreferencesService) {
        this.mediaMatcher = mediaMatcher;
        this.userPreferencesService = userPreferencesService;
        this.dir = 'ltr';
        this.position = 'start';
        this.hideSidenav = false;
        this.expandedSidenav = true;
        this.expanded = new EventEmitter();
        this.templateContext = {
            toggleMenu: () => { },
            isMenuMinimized: () => this.isMenuMinimized
        };
        this.onDestroy$ = new Subject();
        this.onMediaQueryChange = this.onMediaQueryChange.bind(this);
    }
    ngOnInit() {
        const initialMenuState = !this.expandedSidenav;
        this.menuOpenStateSubject = new BehaviorSubject(initialMenuState);
        this.menuOpenState$ = this.menuOpenStateSubject.asObservable();
        const stepOver = this.stepOver || SidenavLayoutComponent.STEP_OVER;
        this.isMenuMinimized = initialMenuState;
        this.mediaQueryList = this.mediaMatcher.matchMedia(`(max-width: ${stepOver}px)`);
        this.mediaQueryList.addListener(this.onMediaQueryChange);
        this.userPreferencesService
            .select('textOrientation')
            .pipe(takeUntil(this.onDestroy$))
            .subscribe((direction) => {
            this.dir = direction;
        });
    }
    ngAfterViewInit() {
        this.templateContext.toggleMenu = this.toggleMenu.bind(this);
    }
    ngOnDestroy() {
        this.mediaQueryList.removeListener(this.onMediaQueryChange);
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
    toggleMenu() {
        if (!this.mediaQueryList.matches) {
            this.isMenuMinimized = !this.isMenuMinimized;
        }
        else {
            this.isMenuMinimized = false;
        }
        this.container.toggleMenu();
        this.expanded.emit(!this.isMenuMinimized);
    }
    get isMenuMinimized() {
        return this._isMenuMinimized;
    }
    set isMenuMinimized(menuState) {
        this._isMenuMinimized = menuState;
        this.menuOpenStateSubject.next(!menuState);
    }
    get isHeaderInside() {
        return this.mediaQueryList.matches;
    }
    get headerTemplate() {
        return this.headerDirective && this.headerDirective.template || this.emptyTemplate;
    }
    get navigationTemplate() {
        return this.navigationDirective && this.navigationDirective.template || this.emptyTemplate;
    }
    get contentTemplate() {
        return this.contentDirective && this.contentDirective.template || this.emptyTemplate;
    }
    onMediaQueryChange() {
        this.isMenuMinimized = false;
        this.expanded.emit(!this.isMenuMinimized);
    }
}
SidenavLayoutComponent.STEP_OVER = 600;
SidenavLayoutComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-sidenav-layout',
                template: "<div class=\"adf-sidenav-layout-full-space\">\n    <ng-container *ngIf=\"!isHeaderInside\">\n        <ng-container class=\"adf-sidenav-layout-outer-header\"\n                      *ngTemplateOutlet=\"headerTemplate; context:templateContext\"></ng-container>\n    </ng-container>\n\n    <adf-layout-container #container\n                          [direction]=\"dir\"\n                          [position]=\"position\"\n                          [sidenavMin]=\"sidenavMin\"\n                          [sidenavMax]=\"sidenavMax\"\n                          [mediaQueryList]=\"mediaQueryList\"\n                          [hideSidenav]=\"hideSidenav\"\n                          [expandedSidenav]=\"expandedSidenav\"\n                          data-automation-id=\"adf-layout-container\"\n                          class=\"adf-layout__content\">\n\n        <ng-container app-layout-navigation\n                      *ngTemplateOutlet=\"navigationTemplate; context:templateContext\"></ng-container>\n\n        <ng-container app-layout-content>\n            <ng-container *ngIf=\"isHeaderInside\">\n                <ng-container *ngTemplateOutlet=\"headerTemplate; context:templateContext\"></ng-container>\n            </ng-container>\n            <ng-container *ngTemplateOutlet=\"contentTemplate; context:templateContext\"></ng-container>\n        </ng-container>\n    </adf-layout-container>\n\n    <ng-template #emptyTemplate></ng-template>\n</div>\n",
                encapsulation: ViewEncapsulation.None,
                host: { class: 'adf-sidenav-layout' }
            },] }
];
SidenavLayoutComponent.ctorParameters = () => [
    { type: MediaMatcher },
    { type: UserPreferencesService }
];
SidenavLayoutComponent.propDecorators = {
    position: [{ type: Input }],
    sidenavMin: [{ type: Input }],
    sidenavMax: [{ type: Input }],
    stepOver: [{ type: Input }],
    hideSidenav: [{ type: Input }],
    expandedSidenav: [{ type: Input }],
    expanded: [{ type: Output }],
    headerDirective: [{ type: ContentChild, args: [SidenavLayoutHeaderDirective,] }],
    navigationDirective: [{ type: ContentChild, args: [SidenavLayoutNavigationDirective,] }],
    contentDirective: [{ type: ContentChild, args: [SidenavLayoutContentDirective,] }],
    container: [{ type: ViewChild, args: ['container', { static: true },] }],
    emptyTemplate: [{ type: ViewChild, args: ['emptyTemplate', { static: true },] }]
};
//# sourceMappingURL=data:application/json;base64,