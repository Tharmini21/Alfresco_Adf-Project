/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { ViewEncapsulation, Component, Input, ViewChild, ElementRef, Output, EventEmitter } from '@angular/core';
import { Subject, Observable } from 'rxjs';
import { debounceTime, takeUntil, filter } from 'rxjs/operators';
import { searchAnimation } from './animations';
import { UserPreferencesService } from '../services/user-preferences.service';
import { SearchTextStateEnum } from '../models/search-text-input.model';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../services/user-preferences.service';
import * as ɵngcc2 from '@angular/common';
import * as ɵngcc3 from '@angular/material/form-field';
import * as ɵngcc4 from '@angular/material/input';
import * as ɵngcc5 from '@angular/forms';
import * as ɵngcc6 from './search-trigger.directive';
import * as ɵngcc7 from '@angular/material/button';
import * as ɵngcc8 from '@angular/material/icon';
import * as ɵngcc9 from '@ngx-translate/core';

const _c0 = ["searchInput"];
function SearchTextInputComponent_button_2_Template(rf, ctx) { if (rf & 1) {
    const _r3 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 5);
    ɵngcc0.ɵɵlistener("click", function SearchTextInputComponent_button_2_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r2 = ɵngcc0.ɵɵnextContext(); return ctx_r2.toggleSearchBar(); })("keyup.enter", function SearchTextInputComponent_button_2_Template_button_keyup_enter_0_listener() { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r4 = ɵngcc0.ɵɵnextContext(); return ctx_r4.toggleSearchBar(); });
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵelementStart(2, "mat-icon");
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵtext(4, "search");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵproperty("title", ɵngcc0.ɵɵpipeBind1(1, 2, "SEARCH.BUTTON.TOOLTIP"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵattribute("aria-label", ɵngcc0.ɵɵpipeBind1(3, 4, "SEARCH.BUTTON.ARIA-LABEL"));
} }
export class SearchTextInputComponent {
    constructor(userPreferencesService) {
        this.userPreferencesService = userPreferencesService;
        this.autocomplete = false;
        this.expandable = true;
        this.inputType = 'text';
        this.liveSearchEnabled = true;
        this.searchAutocomplete = false;
        this.searchTerm = '';
        this.debounceTime = 0;
        this.collapseOnSubmit = true;
        this.defaultState = SearchTextStateEnum.collapsed;
        this.searchChange = new EventEmitter();
        this.submit = new EventEmitter();
        this.selectResult = new EventEmitter();
        this.reset = new EventEmitter();
        this.animationStates = {
            ltr: {
                active: { value: 'active', params: { 'margin-left': 13 } },
                inactive: { value: 'inactive', params: { 'transform': 'translateX(82%)' } }
            },
            rtl: {
                active: { value: 'active', params: { 'margin-right': 13 } },
                inactive: { value: 'inactive', params: { 'transform': 'translateX(-82%)' } }
            }
        };
        this.dir = 'ltr';
        this.onDestroy$ = new Subject();
        this.toggleSearch = new Subject();
        this.valueChange = new Subject();
        this.toggleSearch
            .pipe(debounceTime(200), takeUntil(this.onDestroy$))
            .subscribe(() => {
            if (this.expandable) {
                this.subscriptAnimationState = this.toggleAnimation();
                if (this.subscriptAnimationState.value === 'inactive') {
                    this.searchTerm = '';
                    this.reset.emit(true);
                    if (document.activeElement.id === this.searchInput.nativeElement.id) {
                        this.searchInput.nativeElement.blur();
                    }
                }
            }
        });
    }
    ngOnInit() {
        this.userPreferencesService
            .select('textOrientation')
            .pipe(takeUntil(this.onDestroy$))
            .subscribe((direction) => {
            this.dir = direction;
            this.subscriptAnimationState = this.getDefaultState(this.dir);
        });
        this.subscriptAnimationState = this.getDefaultState(this.dir);
        this.setValueChangeHandler();
        this.setupFocusEventHandlers();
    }
    applySearchFocus(animationDoneEvent) {
        if (animationDoneEvent.toState === 'active' && this.defaultState !== SearchTextStateEnum.expanded) {
            this.searchInput.nativeElement.focus();
        }
    }
    getAutoComplete() {
        return this.autocomplete ? 'on' : 'off';
    }
    toggleAnimation() {
        if (this.dir === 'ltr') {
            return this.subscriptAnimationState.value === 'inactive' ?
                { value: 'active', params: { 'margin-left': 13 } } :
                { value: 'inactive', params: { 'transform': 'translateX(82%)' } };
        }
        else {
            return this.subscriptAnimationState.value === 'inactive' ?
                { value: 'active', params: { 'margin-right': 13 } } :
                { value: 'inactive', params: { 'transform': 'translateX(-82%)' } };
        }
    }
    getDefaultState(dir) {
        if (this.dir) {
            return this.getAnimationState(dir);
        }
        return this.animationStates.ltr.inactive;
    }
    getAnimationState(dir) {
        if (this.expandable && this.defaultState === SearchTextStateEnum.expanded) {
            return this.animationStates[dir].active;
        }
        else if (this.expandable) {
            return this.animationStates[dir].inactive;
        }
        else {
            return { value: 'no-animation' };
        }
    }
    setupFocusEventHandlers() {
        if (this.focusListener) {
            const focusEvents = this.focusListener
                .pipe(debounceTime(50), filter(($event) => {
                return this.isSearchBarActive() && ($event.type === 'blur' || $event.type === 'focusout' || $event.type === 'focus');
            }), takeUntil(this.onDestroy$));
            this.focusSubscription = focusEvents.subscribe((event) => {
                if (event.type === 'focus') {
                    this.searchInput.nativeElement.focus();
                }
                else {
                    this.toggleSearchBar();
                }
            });
        }
    }
    setValueChangeHandler() {
        this.valueChange.pipe(debounceTime(this.debounceTime), takeUntil(this.onDestroy$)).subscribe((value) => {
            this.searchChange.emit(value);
        });
    }
    selectFirstResult($event) {
        this.selectResult.emit($event);
    }
    onBlur($event) {
        if (!$event.relatedTarget && this.defaultState === SearchTextStateEnum.collapsed) {
            this.searchTerm = '';
            this.subscriptAnimationState = this.animationStates[this.dir].inactive;
        }
    }
    inputChange($event) {
        this.valueChange.next($event);
    }
    toggleSearchBar() {
        if (this.toggleSearch) {
            this.toggleSearch.next();
        }
    }
    searchSubmit(event) {
        this.submit.emit(event);
        if (this.collapseOnSubmit) {
            this.toggleSearchBar();
        }
    }
    activateToolbar() {
        if (!this.isSearchBarActive()) {
            this.toggleSearchBar();
        }
        return false;
    }
    isSearchBarActive() {
        return this.subscriptAnimationState.value === 'active' && this.liveSearchEnabled;
    }
    ngOnDestroy() {
        if (this.toggleSearch) {
            this.toggleSearch.complete();
            this.toggleSearch = null;
        }
        if (this.focusSubscription) {
            this.focusSubscription.unsubscribe();
            this.focusSubscription = null;
            this.focusListener = null;
        }
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
}
SearchTextInputComponent.ɵfac = function SearchTextInputComponent_Factory(t) { return new (t || SearchTextInputComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.UserPreferencesService)); };
SearchTextInputComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: SearchTextInputComponent, selectors: [["adf-search-text-input"]], viewQuery: function SearchTextInputComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵstaticViewQuery(_c0, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.searchInput = _t.first);
    } }, hostAttrs: [1, "adf-search-text-input"], inputs: { autocomplete: "autocomplete", expandable: "expandable", inputType: "inputType", liveSearchEnabled: "liveSearchEnabled", searchAutocomplete: "searchAutocomplete", searchTerm: "searchTerm", debounceTime: "debounceTime", collapseOnSubmit: "collapseOnSubmit", defaultState: "defaultState", focusListener: "focusListener" }, outputs: { searchChange: "searchChange", submit: "submit", selectResult: "selectResult", reset: "reset" }, decls: 7, vars: 10, consts: [[1, "adf-search-container"], ["mat-icon-button", "", "id", "adf-search-button", "class", "adf-search-button", 3, "title", "click", "keyup.enter", 4, "ngIf"], [1, "adf-input-form-field-divider"], ["matInput", "", "id", "adf-control-input", 3, "autocomplete", "ngModel", "searchAutocomplete", "ngModelChange", "focus", "blur", "keyup.escape", "keyup.arrowdown", "keyup.enter"], ["searchInput", ""], ["mat-icon-button", "", "id", "adf-search-button", 1, "adf-search-button", 3, "title", "click", "keyup.enter"]], template: function SearchTextInputComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div");
        ɵngcc0.ɵɵlistener("@transitionMessages.done", function SearchTextInputComponent_Template_div_animation_transitionMessages_done_1_listener($event) { return ctx.applySearchFocus($event); });
        ɵngcc0.ɵɵtemplate(2, SearchTextInputComponent_button_2_Template, 5, 6, "button", 1);
        ɵngcc0.ɵɵelementStart(3, "mat-form-field", 2);
        ɵngcc0.ɵɵelementStart(4, "input", 3, 4);
        ɵngcc0.ɵɵlistener("ngModelChange", function SearchTextInputComponent_Template_input_ngModelChange_4_listener($event) { return ctx.searchTerm = $event; })("focus", function SearchTextInputComponent_Template_input_focus_4_listener() { return ctx.activateToolbar(); })("blur", function SearchTextInputComponent_Template_input_blur_4_listener($event) { return ctx.onBlur($event); })("keyup.escape", function SearchTextInputComponent_Template_input_keyup_escape_4_listener() { return ctx.toggleSearchBar(); })("keyup.arrowdown", function SearchTextInputComponent_Template_input_keyup_arrowdown_4_listener($event) { return ctx.selectFirstResult($event); })("ngModelChange", function SearchTextInputComponent_Template_input_ngModelChange_4_listener($event) { return ctx.inputChange($event); })("keyup.enter", function SearchTextInputComponent_Template_input_keyup_enter_4_listener($event) { return ctx.searchSubmit($event); });
        ɵngcc0.ɵɵpipe(6, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("state", ctx.subscriptAnimationState.value);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("@transitionMessages", ctx.subscriptAnimationState);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.expandable);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("autocomplete", ctx.getAutoComplete())("ngModel", ctx.searchTerm)("searchAutocomplete", ctx.searchAutocomplete ? ctx.searchAutocomplete : null);
        ɵngcc0.ɵɵattribute("aria-label", ɵngcc0.ɵɵpipeBind1(6, 8, "SEARCH.INPUT.ARIA-LABEL"))("type", ctx.inputType);
    } }, directives: [ɵngcc2.NgIf, ɵngcc3.MatFormField, ɵngcc4.MatInput, ɵngcc5.DefaultValueAccessor, ɵngcc6.SearchTriggerDirective, ɵngcc5.NgControlStatus, ɵngcc5.NgModel, ɵngcc7.MatButton, ɵngcc8.MatIcon], pipes: [ɵngcc9.TranslatePipe], encapsulation: 2, data: { animation: [searchAnimation] } });
SearchTextInputComponent.ctorParameters = () => [
    { type: UserPreferencesService }
];
SearchTextInputComponent.propDecorators = {
    autocomplete: [{ type: Input }],
    expandable: [{ type: Input }],
    inputType: [{ type: Input }],
    liveSearchEnabled: [{ type: Input }],
    searchAutocomplete: [{ type: Input }],
    searchTerm: [{ type: Input }],
    debounceTime: [{ type: Input }],
    focusListener: [{ type: Input }],
    collapseOnSubmit: [{ type: Input }],
    defaultState: [{ type: Input }],
    searchChange: [{ type: Output }],
    submit: [{ type: Output }],
    selectResult: [{ type: Output }],
    reset: [{ type: Output }],
    searchInput: [{ type: ViewChild, args: ['searchInput', { static: true },] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SearchTextInputComponent, [{
        type: Component,
        args: [{
                selector: 'adf-search-text-input',
                template: "<div class=\"adf-search-container\" [attr.state]=\"subscriptAnimationState.value\">\n    <div [@transitionMessages]=\"subscriptAnimationState\"\n         (@transitionMessages.done)=\"applySearchFocus($event)\">\n        <button mat-icon-button\n                *ngIf=\"expandable\"\n                id=\"adf-search-button\"\n                class=\"adf-search-button\"\n                [title]=\"'SEARCH.BUTTON.TOOLTIP' | translate\"\n                (click)=\"toggleSearchBar()\"\n                (keyup.enter)=\"toggleSearchBar()\">\n            <mat-icon [attr.aria-label]=\"'SEARCH.BUTTON.ARIA-LABEL' | translate\">search</mat-icon>\n        </button>\n        <mat-form-field class=\"adf-input-form-field-divider\">\n            <input matInput\n                   #searchInput\n                   [attr.aria-label]=\"'SEARCH.INPUT.ARIA-LABEL' | translate\"\n                   [attr.type]=\"inputType\"\n                   [autocomplete]=\"getAutoComplete()\"\n                   id=\"adf-control-input\"\n                   [(ngModel)]=\"searchTerm\"\n                   (focus)=\"activateToolbar()\"\n                   (blur)=\"onBlur($event)\"\n                   (keyup.escape)=\"toggleSearchBar()\"\n                   (keyup.arrowdown)=\"selectFirstResult($event)\"\n                   (ngModelChange)=\"inputChange($event)\"\n                   [searchAutocomplete]=\"searchAutocomplete ? searchAutocomplete : null\"\n                   (keyup.enter)=\"searchSubmit($event)\">\n        </mat-form-field>\n    </div>\n</div> ",
                animations: [searchAnimation],
                encapsulation: ViewEncapsulation.None,
                host: {
                    'class': 'adf-search-text-input'
                }
            }]
    }], function () { return [{ type: ɵngcc1.UserPreferencesService }]; }, { autocomplete: [{
            type: Input
        }], expandable: [{
            type: Input
        }], inputType: [{
            type: Input
        }], liveSearchEnabled: [{
            type: Input
        }], searchAutocomplete: [{
            type: Input
        }], searchTerm: [{
            type: Input
        }], debounceTime: [{
            type: Input
        }], collapseOnSubmit: [{
            type: Input
        }], defaultState: [{
            type: Input
        }], searchChange: [{
            type: Output
        }], submit: [{
            type: Output
        }], selectResult: [{
            type: Output
        }], reset: [{
            type: Output
        }], focusListener: [{
            type: Input
        }], searchInput: [{
            type: ViewChild,
            args: ['searchInput', { static: true }]
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,