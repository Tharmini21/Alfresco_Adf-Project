/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { CommentProcessService } from '../services/comment-process.service';
import { CommentContentService } from '../services/comment-content.service';
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { Observable } from 'rxjs';
import { share } from 'rxjs/operators';
export class CommentsComponent {
    constructor(commentProcessService, commentContentService) {
        this.commentProcessService = commentProcessService;
        this.commentContentService = commentContentService;
        this.readOnly = false;
        this.error = new EventEmitter();
        this.comments = [];
        this.beingAdded = false;
        this.comment$ = new Observable((observer) => this.commentObserver = observer)
            .pipe(share());
        this.comment$.subscribe((comment) => {
            this.comments.push(comment);
        });
    }
    ngOnChanges(changes) {
        this.taskId = null;
        this.nodeId = null;
        this.taskId = changes['taskId'] ? changes['taskId'].currentValue : null;
        this.nodeId = changes['nodeId'] ? changes['nodeId'].currentValue : null;
        if (this.taskId || this.nodeId) {
            this.getComments();
        }
        else {
            this.resetComments();
        }
    }
    getComments() {
        this.resetComments();
        if (this.isATask()) {
            this.commentProcessService.getTaskComments(this.taskId).subscribe((comments) => {
                if (comments && comments instanceof Array) {
                    comments = comments.sort((comment1, comment2) => {
                        const date1 = new Date(comment1.created);
                        const date2 = new Date(comment2.created);
                        return date1 > date2 ? -1 : date1 < date2 ? 1 : 0;
                    });
                    comments.forEach((currentComment) => {
                        this.commentObserver.next(currentComment);
                    });
                }
            }, (err) => {
                this.error.emit(err);
            });
        }
        if (this.isANode()) {
            this.commentContentService.getNodeComments(this.nodeId).subscribe((comments) => {
                if (comments && comments instanceof Array) {
                    comments = comments.sort((comment1, comment2) => {
                        const date1 = new Date(comment1.created);
                        const date2 = new Date(comment2.created);
                        return date1 > date2 ? -1 : date1 < date2 ? 1 : 0;
                    });
                    comments.forEach((comment) => {
                        this.commentObserver.next(comment);
                    });
                }
            }, (err) => {
                this.error.emit(err);
            });
        }
    }
    resetComments() {
        this.comments = [];
    }
    add() {
        if (this.message && this.message.trim() && !this.beingAdded) {
            const comment = this.sanitize(this.message);
            this.beingAdded = true;
            if (this.isATask()) {
                this.commentProcessService.addTaskComment(this.taskId, comment)
                    .subscribe((res) => {
                    this.comments.unshift(res);
                    this.message = '';
                    this.beingAdded = false;
                }, (err) => {
                    this.error.emit(err);
                    this.beingAdded = false;
                });
            }
            if (this.isANode()) {
                this.commentContentService.addNodeComment(this.nodeId, comment)
                    .subscribe((res) => {
                    this.comments.unshift(res);
                    this.message = '';
                    this.beingAdded = false;
                }, (err) => {
                    this.error.emit(err);
                    this.beingAdded = false;
                });
            }
        }
    }
    clear(event) {
        event.stopPropagation();
        this.message = '';
    }
    isReadOnly() {
        return this.readOnly;
    }
    isATask() {
        return !!this.taskId;
    }
    isANode() {
        return !!this.nodeId;
    }
    sanitize(input) {
        return input.replace(/<[^>]+>/g, '')
            .replace(/^\s+|\s+$|\s+(?=\s)/g, '')
            .replace(/\r?\n/g, '<br/>');
    }
}
CommentsComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-comments',
                template: "<div class=\"adf-comments-container\">\n    <div id=\"comment-header\" class=\"adf-comments-header\" role=\"heading\">\n        {{'COMMENTS.HEADER' | translate: { count: comments?.length} }}\n    </div>\n    <div class=\"adf-comments-input-container\" *ngIf=\"!isReadOnly()\">\n            <mat-form-field class=\"adf-full-width\">\n                <textarea (keydown.escape)=\"clear($event)\" matInput id=\"comment-input\" placeholder=\"{{'COMMENTS.ADD' | translate}}\" [(ngModel)]=\"message\"></textarea>\n            </mat-form-field>\n\n            <div class=\"adf-comments-input-actions\">\n                <button mat-button\n                    class=\"adf-comments-input-add\"\n                    data-automation-id=\"comments-input-add\"\n                    color=\"primary\"\n                    (click)=\"add()\"\n                    [disabled]=\"!message\">\n                    {{ 'COMMENTS.ADD' | translate }}\n                </button>\n            </div>\n    </div>\n\n    <div *ngIf=\"comments.length > 0\">\n        <adf-comment-list [comments]=\"comments\">\n        </adf-comment-list>\n    </div>\n</div>"
            },] }
];
CommentsComponent.ctorParameters = () => [
    { type: CommentProcessService },
    { type: CommentContentService }
];
CommentsComponent.propDecorators = {
    taskId: [{ type: Input }],
    nodeId: [{ type: Input }],
    readOnly: [{ type: Input }],
    error: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,