/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, Inject, ViewEncapsulation } from '@angular/core';
import { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';
import { LogService } from '../../services/log.service';
import { DownloadZipService } from '../../services/download-zip.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/material/dialog';
import * as ɵngcc2 from '../../services/log.service';
import * as ɵngcc3 from '../../services/download-zip.service';
import * as ɵngcc4 from '@angular/material/progress-bar';
import * as ɵngcc5 from '@angular/material/button';
import * as ɵngcc6 from '@ngx-translate/core';
export class DownloadZipDialogComponent {
    constructor(dialogRef, data, logService, downloadZipService) {
        this.dialogRef = dialogRef;
        this.data = data;
        this.logService = logService;
        this.downloadZipService = downloadZipService;
        this.cancelled = false;
    }
    ngOnInit() {
        if (this.data && this.data.nodeIds && this.data.nodeIds.length > 0) {
            if (!this.cancelled) {
                this.downloadZip(this.data.nodeIds);
            }
            else {
                this.logService.log('Cancelled');
            }
        }
    }
    cancelDownload() {
        this.cancelled = true;
        this.downloadZipService.cancelDownload(this.downloadId);
        this.dialogRef.close(false);
    }
    downloadZip(nodeIds) {
        if (nodeIds && nodeIds.length > 0) {
            this.downloadZipService.createDownload({ nodeIds }).subscribe((data) => {
                if (data && data.entry && data.entry.id) {
                    const url = this.downloadZipService.getContentUrl(data.entry.id, true);
                    this.downloadZipService.getNode(data.entry.id).subscribe((downloadNode) => {
                        this.logService.log(downloadNode);
                        const fileName = downloadNode.entry.name;
                        this.downloadId = data.entry.id;
                        this.waitAndDownload(data.entry.id, url, fileName);
                    });
                }
            });
        }
    }
    waitAndDownload(downloadId, url, fileName) {
        if (this.cancelled) {
            return;
        }
        this.downloadZipService.getDownload(downloadId).subscribe((downloadEntry) => {
            if (downloadEntry.entry) {
                if (downloadEntry.entry.status === 'DONE') {
                    this.download(url, fileName);
                }
                else {
                    setTimeout(() => {
                        this.waitAndDownload(downloadId, url, fileName);
                    }, 1000);
                }
            }
        });
    }
    download(url, fileName) {
        if (url && fileName) {
            const link = document.createElement('a');
            link.style.display = 'none';
            link.download = fileName;
            link.href = url;
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        }
        this.dialogRef.close(true);
    }
}
DownloadZipDialogComponent.ɵfac = function DownloadZipDialogComponent_Factory(t) { return new (t || DownloadZipDialogComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.MatDialogRef), ɵngcc0.ɵɵdirectiveInject(MAT_DIALOG_DATA), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.LogService), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.DownloadZipService)); };
DownloadZipDialogComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DownloadZipDialogComponent, selectors: [["adf-download-zip-dialog"]], hostAttrs: [1, "adf-download-zip-dialog"], decls: 9, vars: 6, consts: [["matDialogTitle", ""], ["mat-dialog-content", ""], ["color", "primary", "mode", "indeterminate"], ["align", "end"], ["mat-button", "", "color", "primary", "id", "cancel-button", 3, "click"]], template: function DownloadZipDialogComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "h1", 0);
        ɵngcc0.ɵɵtext(1);
        ɵngcc0.ɵɵpipe(2, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(3, "div", 1);
        ɵngcc0.ɵɵelement(4, "mat-progress-bar", 2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(5, "mat-dialog-actions", 3);
        ɵngcc0.ɵɵelementStart(6, "button", 4);
        ɵngcc0.ɵɵlistener("click", function DownloadZipDialogComponent_Template_button_click_6_listener() { return ctx.cancelDownload(); });
        ɵngcc0.ɵɵtext(7);
        ɵngcc0.ɵɵpipe(8, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(2, 2, "CORE.DIALOG.DOWNLOAD_ZIP.TITLE"));
        ɵngcc0.ɵɵadvance(6);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(8, 4, "CORE.DIALOG.DOWNLOAD_ZIP.ACTIONS.CANCEL"), " ");
    } }, directives: [ɵngcc1.MatDialogTitle, ɵngcc1.MatDialogContent, ɵngcc4.MatProgressBar, ɵngcc1.MatDialogActions, ɵngcc5.MatButton], pipes: [ɵngcc6.TranslatePipe], styles: [".adf-download-zip-dialog .mat-dialog-actions .mat-button-wrapper{text-transform:uppercase}"], encapsulation: 2 });
DownloadZipDialogComponent.ctorParameters = () => [
    { type: MatDialogRef },
    { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_DATA,] }] },
    { type: LogService },
    { type: DownloadZipService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DownloadZipDialogComponent, [{
        type: Component,
        args: [{
                selector: 'adf-download-zip-dialog',
                template: "<h1 matDialogTitle>{{ 'CORE.DIALOG.DOWNLOAD_ZIP.TITLE' | translate }}</h1>\n<div mat-dialog-content>\n    <mat-progress-bar color=\"primary\" mode=\"indeterminate\"></mat-progress-bar>\n</div>\n<mat-dialog-actions align=\"end\">\n    <button mat-button color=\"primary\" id=\"cancel-button\" (click)=\"cancelDownload()\">\n        {{ 'CORE.DIALOG.DOWNLOAD_ZIP.ACTIONS.CANCEL' | translate }}\n    </button>\n</mat-dialog-actions>\n",
                host: { 'class': 'adf-download-zip-dialog' },
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-download-zip-dialog .mat-dialog-actions .mat-button-wrapper{text-transform:uppercase}"]
            }]
    }], function () { return [{ type: ɵngcc1.MatDialogRef }, { type: undefined, decorators: [{
                type: Inject,
                args: [MAT_DIALOG_DATA]
            }] }, { type: ɵngcc2.LogService }, { type: ɵngcc3.DownloadZipService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG93bmxvYWQtemlwLmRpYWxvZy5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vaG9tZS90cmF2aXMvYnVpbGQvQWxmcmVzY28vYWxmcmVzY28tbmcyLWNvbXBvbmVudHMvbGliL2NvcmUvZGlhbG9ncy9kb3dubG9hZC16aXAvZG93bmxvYWQtemlwLmRpYWxvZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBRUgsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQVUsaUJBQWlCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDN0UsT0FBTyxFQUFFLGVBQWUsRUFBRSxZQUFZLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUV6RSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDeEQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0scUNBQXFDLENBQUM7Ozs7Ozs7O0FBU3pFLE1BQU0sT0FBTywwQkFBMEI7QUFBRyxJQU10QyxZQUFvQixTQUFtRCxFQUVwRCxJQUFTLEVBQ1IsVUFBc0IsRUFDdEIsa0JBQXNDO0FBQzlELFFBTHdCLGNBQVMsR0FBVCxTQUFTLENBQTBDO0FBQUMsUUFFckQsU0FBSSxHQUFKLElBQUksQ0FBSztBQUFDLFFBQ1QsZUFBVSxHQUFWLFVBQVUsQ0FBWTtBQUFDLFFBQ3ZCLHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBb0I7QUFBQyxRQVAzRCxjQUFTLEdBQUcsS0FBSyxDQUFDO0FBQ3RCLElBT0ksQ0FBQztBQUNMLElBQ0ksUUFBUTtBQUNaLFFBQVEsSUFBSSxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7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USxDQUFDLENBQUMsQ0FBQztBQUNYLElBQUksQ0FBQztBQUNMLElBQ0ksUUFBUSxDQUFDLEdBQVcsRUFBRSxRQUFnQjtBQUMxQyxRQUFRLElBQUksR0FBRyxJQUFJLFFBQVEsRUFBRTtBQUM3QixZQUFZLE1BQU0sSUFBSSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDckQsWUFDWSxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7QUFDeEMsWUFBWSxJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztBQUNyQyxZQUFZLElBQUksQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDO0FBQzVCLFlBQ1ksUUFBUSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDNUMsWUFBWSxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7QUFDekIsWUFBWSxRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUM1QyxTQUFTO0FBQ1QsUUFBUSxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNuQyxJQUFJLENBQUM7QUFDTDtzREF0RkMsU0FBUyxTQUFDLGtCQUNQLFFBQVEsRUFBRSx5QkFBeUIsa0JBQ25DO3lRQUF5QyxrQkFFekMsSUFBSSxFQUFFLEVBQUUsT0FBTyxFQUFFLHlCQUF5QixFQUFFLGtCQUM1QyxhQUFhLEVBQUUsaUJBQWlCLENBQUMsSUFBSTttQ0FDeEM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7b1NBQ0k7QUFBQztBQUFvRCxZQVpoQyxZQUFZO0FBQUksNENBbUJ6QixNQUFNLFNBQUMsZUFBZTtBQUNoQyxZQWxCRSxVQUFVO0FBQUksWUFDZCxrQkFBa0I7QUFBRzs7Ozs7Ozs7Ozs7OztvR0FBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgQ29tcG9uZW50LCBJbmplY3QsIE9uSW5pdCwgVmlld0VuY2Fwc3VsYXRpb24gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE1BVF9ESUFMT0dfREFUQSwgTWF0RGlhbG9nUmVmIH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwvZGlhbG9nJztcbmltcG9ydCB7IERvd25sb2FkRW50cnksIE5vZGVFbnRyeSB9IGZyb20gJ0BhbGZyZXNjby9qcy1hcGknO1xuaW1wb3J0IHsgTG9nU2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL2xvZy5zZXJ2aWNlJztcbmltcG9ydCB7IERvd25sb2FkWmlwU2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL2Rvd25sb2FkLXppcC5zZXJ2aWNlJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdhZGYtZG93bmxvYWQtemlwLWRpYWxvZycsXG4gICAgdGVtcGxhdGVVcmw6ICcuL2Rvd25sb2FkLXppcC5kaWFsb2cuaHRtbCcsXG4gICAgc3R5bGVVcmxzOiBbJy4vZG93bmxvYWQtemlwLmRpYWxvZy5zY3NzJ10sXG4gICAgaG9zdDogeyAnY2xhc3MnOiAnYWRmLWRvd25sb2FkLXppcC1kaWFsb2cnIH0sXG4gICAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZVxufSlcbmV4cG9ydCBjbGFzcyBEb3dubG9hZFppcERpYWxvZ0NvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG5cbiAgICAvLyBmbGFnIGZvciBhc3luYyB0aHJlYWRzXG4gICAgY2FuY2VsbGVkID0gZmFsc2U7XG4gICAgZG93bmxvYWRJZDogc3RyaW5nO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBkaWFsb2dSZWY6IE1hdERpYWxvZ1JlZjxEb3dubG9hZFppcERpYWxvZ0NvbXBvbmVudD4sXG4gICAgICAgICAgICAgICAgQEluamVjdChNQVRfRElBTE9HX0RBVEEpXG4gICAgICAgICAgICAgICAgcHVibGljIGRhdGE6IGFueSxcbiAgICAgICAgICAgICAgICBwcml2YXRlIGxvZ1NlcnZpY2U6IExvZ1NlcnZpY2UsXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSBkb3dubG9hZFppcFNlcnZpY2U6IERvd25sb2FkWmlwU2VydmljZSkge1xuICAgIH1cblxuICAgIG5nT25Jbml0KCkge1xuICAgICAgICBpZiAodGhpcy5kYXRhICYmIHRoaXMuZGF0YS5ub2RlSWRzICYmIHRoaXMuZGF0YS5ub2RlSWRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5jYW5jZWxsZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRvd25sb2FkWmlwKHRoaXMuZGF0YS5ub2RlSWRzKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5sb2dTZXJ2aWNlLmxvZygnQ2FuY2VsbGVkJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjYW5jZWxEb3dubG9hZCgpIHtcbiAgICAgICAgdGhpcy5jYW5jZWxsZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLmRvd25sb2FkWmlwU2VydmljZS5jYW5jZWxEb3dubG9hZCh0aGlzLmRvd25sb2FkSWQpO1xuICAgICAgICB0aGlzLmRpYWxvZ1JlZi5jbG9zZShmYWxzZSk7XG4gICAgfVxuXG4gICAgZG93bmxvYWRaaXAobm9kZUlkczogc3RyaW5nW10pIHtcbiAgICAgICAgaWYgKG5vZGVJZHMgJiYgbm9kZUlkcy5sZW5ndGggPiAwKSB7XG5cbiAgICAgICAgICAgIHRoaXMuZG93bmxvYWRaaXBTZXJ2aWNlLmNyZWF0ZURvd25sb2FkKHsgbm9kZUlkcyB9KS5zdWJzY3JpYmUoKGRhdGE6IERvd25sb2FkRW50cnkpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZGF0YSAmJiBkYXRhLmVudHJ5ICYmIGRhdGEuZW50cnkuaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdXJsID0gdGhpcy5kb3dubG9hZFppcFNlcnZpY2UuZ2V0Q29udGVudFVybChkYXRhLmVudHJ5LmlkLCB0cnVlKTtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRvd25sb2FkWmlwU2VydmljZS5nZXROb2RlKGRhdGEuZW50cnkuaWQpLnN1YnNjcmliZSgoZG93bmxvYWROb2RlOiBOb2RlRW50cnkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nU2VydmljZS5sb2coZG93bmxvYWROb2RlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZpbGVOYW1lID0gZG93bmxvYWROb2RlLmVudHJ5Lm5hbWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRvd25sb2FkSWQgPSBkYXRhLmVudHJ5LmlkO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy53YWl0QW5kRG93bmxvYWQoZGF0YS5lbnRyeS5pZCwgdXJsLCBmaWxlTmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgd2FpdEFuZERvd25sb2FkKGRvd25sb2FkSWQ6IHN0cmluZywgdXJsOiBzdHJpbmcsIGZpbGVOYW1lOiBzdHJpbmcpIHtcbiAgICAgICAgaWYgKHRoaXMuY2FuY2VsbGVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmRvd25sb2FkWmlwU2VydmljZS5nZXREb3dubG9hZChkb3dubG9hZElkKS5zdWJzY3JpYmUoKGRvd25sb2FkRW50cnk6IERvd25sb2FkRW50cnkpID0+IHtcbiAgICAgICAgICAgIGlmIChkb3dubG9hZEVudHJ5LmVudHJ5KSB7XG4gICAgICAgICAgICAgICAgaWYgKGRvd25sb2FkRW50cnkuZW50cnkuc3RhdHVzID09PSAnRE9ORScpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kb3dubG9hZCh1cmwsIGZpbGVOYW1lKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMud2FpdEFuZERvd25sb2FkKGRvd25sb2FkSWQsIHVybCwgZmlsZU5hbWUpO1xuICAgICAgICAgICAgICAgICAgICB9LCAxMDAwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGRvd25sb2FkKHVybDogc3RyaW5nLCBmaWxlTmFtZTogc3RyaW5nKSB7XG4gICAgICAgIGlmICh1cmwgJiYgZmlsZU5hbWUpIHtcbiAgICAgICAgICAgIGNvbnN0IGxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG5cbiAgICAgICAgICAgIGxpbmsuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgICAgIGxpbmsuZG93bmxvYWQgPSBmaWxlTmFtZTtcbiAgICAgICAgICAgIGxpbmsuaHJlZiA9IHVybDtcblxuICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChsaW5rKTtcbiAgICAgICAgICAgIGxpbmsuY2xpY2soKTtcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQobGluayk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kaWFsb2dSZWYuY2xvc2UodHJ1ZSk7XG4gICAgfVxufVxuIl19