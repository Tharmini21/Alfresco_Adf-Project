/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { __awaiter } from "tslib";
import { Component, ContentChild, EventEmitter, HostListener, ElementRef, Input, Output, TemplateRef, ViewEncapsulation } from '@angular/core';
import { BaseEvent } from '../../events';
import { AlfrescoApiService } from '../../services/alfresco-api.service';
import { LogService } from '../../services/log.service';
import { ViewerMoreActionsComponent } from './viewer-more-actions.component';
import { ViewerOpenWithComponent } from './viewer-open-with.component';
import { ViewerSidebarComponent } from './viewer-sidebar.component';
import { ViewerToolbarComponent } from './viewer-toolbar.component';
import { fromEvent, Subject } from 'rxjs';
import { ViewUtilService } from '../services/view-util.service';
import { AppExtensionService } from '@alfresco/adf-extensions';
import { filter, skipWhile, takeUntil } from 'rxjs/operators';
import { MatDialog } from '@angular/material/dialog';
import { ContentService } from '../../services/content.service';
import { UploadService } from '../../services/upload.service';
import { FileModel } from '../../models';
export class ViewerComponent {
    constructor(apiService, viewUtilService, logService, extensionService, contentService, uploadService, el, dialog) {
        this.apiService = apiService;
        this.viewUtilService = viewUtilService;
        this.logService = logService;
        this.extensionService = extensionService;
        this.contentService = contentService;
        this.uploadService = uploadService;
        this.el = el;
        this.dialog = dialog;
        this.urlFile = '';
        this.urlFileViewer = null;
        this.nodeId = null;
        this.versionId = null;
        this.sharedLinkId = null;
        this.overlayMode = false;
        this.showViewer = true;
        this.showToolbar = true;
        this.allowGoBack = true;
        this.allowDownload = true;
        this.allowPrint = false;
        this.allowFullScreen = true;
        this.allowNavigate = false;
        this.canNavigateBefore = true;
        this.canNavigateNext = true;
        this.allowLeftSidebar = false;
        this.allowRightSidebar = false;
        this.allowThumbnails = true;
        this.showRightSidebar = false;
        this.showLeftSidebar = false;
        this.sidebarRightTemplate = null;
        this.sidebarLeftTemplate = null;
        this.thumbnailsTemplate = null;
        this.maxRetries = 30;
        this.goBack = new EventEmitter();
        this.print = new EventEmitter();
        this.showViewerChange = new EventEmitter();
        this.extensionChange = new EventEmitter();
        this.navigateBefore = new EventEmitter();
        this.navigateNext = new EventEmitter();
        this.invalidSharedLink = new EventEmitter();
        this.TRY_TIMEOUT = 10000;
        this.viewerType = 'unknown';
        this.isLoading = false;
        this.extensionTemplates = [];
        this.externalExtensions = [];
        this.sidebarRightTemplateContext = { node: null };
        this.sidebarLeftTemplateContext = { node: null };
        this.viewerExtensions = [];
        this.readOnly = true;
        this.cacheTypeForContent = '';
        this.extensions = {
            image: ['png', 'jpg', 'jpeg', 'gif', 'bpm', 'svg'],
            media: ['wav', 'mp4', 'mp3', 'webm', 'ogg'],
            text: ['txt', 'xml', 'html', 'json', 'ts', 'css', 'md'],
            pdf: ['pdf']
        };
        this.mimeTypes = {
            text: ['text/plain', 'text/csv', 'text/xml', 'text/html', 'application/x-javascript'],
            pdf: ['application/pdf'],
            image: ['image/png', 'image/jpeg', 'image/gif', 'image/bmp', 'image/svg+xml'],
            media: ['video/mp4', 'video/webm', 'video/ogg', 'audio/mpeg', 'audio/mp3', 'audio/ogg', 'audio/wav']
        };
        this.onDestroy$ = new Subject();
        this.shouldCloseViewer = true;
        this.keyDown$ = fromEvent(document, 'keydown');
        viewUtilService.maxRetries = this.maxRetries;
    }
    isSourceDefined() {
        return !!(this.urlFile || this.blobFile || this.nodeId || this.sharedLinkId);
    }
    ngOnInit() {
        this.apiService.nodeUpdated.pipe(filter((node) => {
            return node && node.id === this.nodeId &&
                (node.name !== this.fileName ||
                    this.getNodeVersionProperty(this.nodeEntry.entry) !== this.getNodeVersionProperty(node));
        }), takeUntil(this.onDestroy$)).subscribe((node) => this.onNodeUpdated(node));
        this.viewUtilService.viewerTypeChange.pipe(takeUntil(this.onDestroy$)).subscribe((type) => {
            this.viewerType = type;
        });
        this.viewUtilService.urlFileContentChange.pipe(takeUntil(this.onDestroy$)).subscribe((content) => {
            this.urlFileContent = content;
        });
        this.closeOverlayManager();
        this.loadExtensions();
        this.cacheTypeForContent = '';
    }
    loadExtensions() {
        this.viewerExtensions = this.extensionService.getViewerExtensions();
        this.viewerExtensions
            .forEach((extension) => {
            this.externalExtensions.push(extension.fileExtension);
        });
    }
    getNodeVersionProperty(node) {
        var _a;
        return (_a = node === null || node === void 0 ? void 0 : node.properties['cm:versionLabel']) !== null && _a !== void 0 ? _a : '';
    }
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
    onNodeUpdated(node) {
        if (node && node.id === this.nodeId) {
            this.cacheTypeForContent = 'no-cache';
            this.generateCacheBusterNumber();
            this.isLoading = true;
            this.setUpNodeFile(node).then(() => {
                this.isLoading = false;
            });
        }
    }
    ngOnChanges() {
        if (this.showViewer) {
            if (!this.isSourceDefined()) {
                throw new Error('A content source attribute value is missing.');
            }
            this.isLoading = true;
            if (this.blobFile) {
                this.setUpBlobData();
                this.isLoading = false;
            }
            else if (this.urlFile) {
                this.setUpUrlFile();
                this.isLoading = false;
            }
            else if (this.nodeId) {
                this.apiService.nodesApi.getNode(this.nodeId, { include: ['allowableOperations'] }).then((node) => {
                    this.nodeEntry = node;
                    if (this.versionId) {
                        this.apiService.versionsApi.getVersion(this.nodeId, this.versionId).then((version) => {
                            this.versionEntry = version;
                            this.setUpNodeFile(node.entry, version.entry).then(() => {
                                this.isLoading = false;
                            });
                        });
                    }
                    else {
                        this.setUpNodeFile(node.entry).then(() => {
                            this.isLoading = false;
                        });
                    }
                }, () => {
                    this.isLoading = false;
                    this.logService.error('This node does not exist');
                });
            }
            else if (this.sharedLinkId) {
                this.allowGoBack = false;
                this.apiService.sharedLinksApi.getSharedLink(this.sharedLinkId).then((sharedLinkEntry) => {
                    this.setUpSharedLinkFile(sharedLinkEntry);
                    this.isLoading = false;
                }, () => {
                    this.isLoading = false;
                    this.logService.error('This sharedLink does not exist');
                    this.invalidSharedLink.next();
                });
            }
        }
    }
    setUpBlobData() {
        this.fileTitle = this.getDisplayName('Unknown');
        this.mimeType = this.blobFile.type;
        this.viewerType = this.getViewerTypeByMimeType(this.mimeType);
        this.allowDownload = false;
        this.extensionChange.emit(this.mimeType);
        this.scrollTop();
    }
    setUpUrlFile() {
        const filenameFromUrl = this.getFilenameFromUrl(this.urlFile);
        this.fileTitle = this.getDisplayName(filenameFromUrl);
        this.extension = this.getFileExtension(filenameFromUrl);
        this.urlFileContent = this.urlFile;
        this.fileName = this.displayName;
        this.viewerType = this.urlFileViewer || this.getViewerTypeByExtension(this.extension);
        if (this.viewerType === 'unknown') {
            this.viewerType = this.getViewerTypeByMimeType(this.mimeType);
        }
        this.extensionChange.emit(this.extension);
        this.scrollTop();
    }
    setUpNodeFile(nodeData, versionData) {
        var _a, _b, _c, _d;
        return __awaiter(this, void 0, void 0, function* () {
            this.readOnly = !this.contentService.hasAllowableOperations(nodeData, 'update');
            let setupNode;
            if (versionData && versionData.content) {
                this.mimeType = versionData.content.mimeType;
            }
            else if (nodeData.content) {
                this.mimeType = nodeData.content.mimeType;
            }
            this.fileTitle = this.getDisplayName(versionData ? versionData.name : nodeData.name);
            const currentFileVersion = ((_b = (_a = this.nodeEntry) === null || _a === void 0 ? void 0 : _a.entry) === null || _b === void 0 ? void 0 : _b.properties) && this.nodeEntry.entry.properties['cm:versionLabel'] ?
                encodeURI((_d = (_c = this.nodeEntry) === null || _c === void 0 ? void 0 : _c.entry) === null || _d === void 0 ? void 0 : _d.properties['cm:versionLabel']) : encodeURI('1.0');
            this.urlFileContent = versionData ? this.apiService.contentApi.getVersionContentUrl(this.nodeId, versionData.id) :
                this.apiService.contentApi.getContentUrl(this.nodeId);
            this.urlFileContent = this.cacheBusterNumber ? this.urlFileContent + '&' + currentFileVersion + '&' + this.cacheBusterNumber :
                this.urlFileContent + '&' + currentFileVersion;
            this.extension = this.getFileExtension(versionData ? versionData.name : nodeData.name);
            this.fileName = versionData ? versionData.name : nodeData.name;
            this.viewerType = this.getViewerTypeByExtension(this.extension);
            if (this.viewerType === 'unknown') {
                this.viewerType = this.getViewerTypeByMimeType(this.mimeType);
            }
            if (this.viewerType === 'unknown') {
                if (versionData) {
                    setupNode = this.viewUtilService.displayNodeRendition(nodeData.id, versionData.id);
                }
                else {
                    setupNode = this.viewUtilService.displayNodeRendition(nodeData.id);
                }
            }
            this.extensionChange.emit(this.extension);
            this.sidebarRightTemplateContext.node = nodeData;
            this.sidebarLeftTemplateContext.node = nodeData;
            this.scrollTop();
            return setupNode;
        });
    }
    setUpSharedLinkFile(details) {
        this.mimeType = details.entry.content.mimeType;
        this.fileTitle = this.getDisplayName(details.entry.name);
        this.extension = this.getFileExtension(details.entry.name);
        this.fileName = details.entry.name;
        this.urlFileContent = this.apiService.contentApi.getSharedLinkContentUrl(this.sharedLinkId, false);
        this.viewerType = this.getViewerTypeByMimeType(this.mimeType);
        if (this.viewerType === 'unknown') {
            this.viewerType = this.getViewerTypeByExtension(this.extension);
        }
        if (this.viewerType === 'unknown') {
            this.displaySharedLinkRendition(this.sharedLinkId);
        }
        this.extensionChange.emit(this.extension);
    }
    toggleSidebar() {
        this.showRightSidebar = !this.showRightSidebar;
        if (this.showRightSidebar && this.nodeId) {
            this.apiService.getInstance().nodes.getNode(this.nodeId, { include: ['allowableOperations'] })
                .then((nodeEntry) => {
                this.sidebarRightTemplateContext.node = nodeEntry.entry;
            });
        }
    }
    toggleLeftSidebar() {
        this.showLeftSidebar = !this.showLeftSidebar;
        if (this.showRightSidebar && this.nodeId) {
            this.apiService.getInstance().nodes.getNode(this.nodeId, { include: ['allowableOperations'] })
                .then((nodeEntry) => {
                this.sidebarLeftTemplateContext.node = nodeEntry.entry;
            });
        }
    }
    getDisplayName(name) {
        return this.displayName || name;
    }
    scrollTop() {
        window.scrollTo(0, 1);
    }
    getViewerTypeByMimeType(mimeType) {
        if (mimeType) {
            mimeType = mimeType.toLowerCase();
            const editorTypes = Object.keys(this.mimeTypes);
            for (const type of editorTypes) {
                if (this.mimeTypes[type].indexOf(mimeType) >= 0) {
                    return type;
                }
            }
        }
        return 'unknown';
    }
    getViewerTypeByExtension(extension) {
        if (extension) {
            extension = extension.toLowerCase();
        }
        if (this.isCustomViewerExtension(extension)) {
            return 'custom';
        }
        if (this.extensions.image.indexOf(extension) >= 0) {
            return 'image';
        }
        if (this.extensions.media.indexOf(extension) >= 0) {
            return 'media';
        }
        if (this.extensions.text.indexOf(extension) >= 0) {
            return 'text';
        }
        if (this.extensions.pdf.indexOf(extension) >= 0) {
            return 'pdf';
        }
        return 'unknown';
    }
    onBackButtonClick() {
        this.close();
    }
    onNavigateBeforeClick(event) {
        this.navigateBefore.next(event);
    }
    onNavigateNextClick(event) {
        this.navigateNext.next(event);
    }
    close() {
        if (this.otherMenu) {
            this.otherMenu.hidden = false;
        }
        this.showViewer = false;
        this.showViewerChange.emit(this.showViewer);
    }
    getFilenameFromUrl(url) {
        const anchor = url.indexOf('#');
        const query = url.indexOf('?');
        const end = Math.min(anchor > 0 ? anchor : url.length, query > 0 ? query : url.length);
        return url.substring(url.lastIndexOf('/', end) + 1, end);
    }
    getFileExtension(fileName) {
        if (fileName) {
            const match = fileName.match(/\.([^\./\?\#]+)($|\?|\#)/);
            return match ? match[1] : null;
        }
        return null;
    }
    isCustomViewerExtension(extension) {
        const extensions = this.externalExtensions || [];
        if (extension && extensions.length > 0) {
            extension = extension.toLowerCase();
            return extensions.flat().indexOf(extension) >= 0;
        }
        return false;
    }
    handleKeyboardEvent(event) {
        if (event && event.defaultPrevented) {
            return;
        }
        const key = event.keyCode;
        if (key === 37 && this.canNavigateBefore) {
            event.preventDefault();
            this.onNavigateBeforeClick(event);
        }
        if (key === 39 && this.canNavigateNext) {
            event.preventDefault();
            this.onNavigateNextClick(event);
        }
        if (key === 70 && event.ctrlKey) {
            event.preventDefault();
            this.enterFullScreen();
        }
    }
    printContent() {
        if (this.allowPrint) {
            const args = new BaseEvent();
            this.print.next(args);
            if (!args.defaultPrevented) {
                this.viewUtilService.printFileGeneric(this.nodeId, this.mimeType);
            }
        }
    }
    enterFullScreen() {
        if (this.allowFullScreen) {
            const container = this.el.nativeElement.querySelector('.adf-viewer__fullscreen-container');
            if (container) {
                if (container.requestFullscreen) {
                    container.requestFullscreen();
                }
                else if (container.webkitRequestFullscreen) {
                    container.webkitRequestFullscreen();
                }
                else if (container.mozRequestFullScreen) {
                    container.mozRequestFullScreen();
                }
                else if (container.msRequestFullscreen) {
                    container.msRequestFullscreen();
                }
            }
        }
    }
    displaySharedLinkRendition(sharedId) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const rendition = yield this.apiService.renditionsApi.getSharedLinkRendition(sharedId, 'pdf');
                if (rendition.entry.status.toString() === 'CREATED') {
                    this.viewerType = 'pdf';
                    this.urlFileContent = this.apiService.contentApi.getSharedLinkRenditionUrl(sharedId, 'pdf');
                }
            }
            catch (error) {
                this.logService.error(error);
                try {
                    const rendition = yield this.apiService.renditionsApi.getSharedLinkRendition(sharedId, 'imgpreview');
                    if (rendition.entry.status.toString() === 'CREATED') {
                        this.viewerType = 'image';
                        this.urlFileContent = this.apiService.contentApi.getSharedLinkRenditionUrl(sharedId, 'imgpreview');
                    }
                }
                catch (error) {
                    this.logService.error(error);
                }
            }
        });
    }
    checkExtensions(extensionAllowed) {
        if (typeof extensionAllowed === 'string') {
            return this.extension.toLowerCase() === extensionAllowed.toLowerCase();
        }
        else if (extensionAllowed.length > 0) {
            return extensionAllowed.find((currentExtension) => {
                return this.extension.toLowerCase() === currentExtension.toLowerCase();
            });
        }
    }
    onSubmitFile(newImageBlob) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;
        if (((_b = (_a = this === null || this === void 0 ? void 0 : this.nodeEntry) === null || _a === void 0 ? void 0 : _a.entry) === null || _b === void 0 ? void 0 : _b.id) && !this.readOnly) {
            const newImageFile = new File([newImageBlob], (_d = (_c = this === null || this === void 0 ? void 0 : this.nodeEntry) === null || _c === void 0 ? void 0 : _c.entry) === null || _d === void 0 ? void 0 : _d.name, { type: (_g = (_f = (_e = this === null || this === void 0 ? void 0 : this.nodeEntry) === null || _e === void 0 ? void 0 : _e.entry) === null || _f === void 0 ? void 0 : _f.content) === null || _g === void 0 ? void 0 : _g.mimeType });
            const newFile = new FileModel(newImageFile, {
                majorVersion: false,
                newVersion: true,
                parentId: (_j = (_h = this === null || this === void 0 ? void 0 : this.nodeEntry) === null || _h === void 0 ? void 0 : _h.entry) === null || _j === void 0 ? void 0 : _j.parentId,
                nodeType: (_m = (_l = (_k = this === null || this === void 0 ? void 0 : this.nodeEntry) === null || _k === void 0 ? void 0 : _k.entry) === null || _l === void 0 ? void 0 : _l.content) === null || _m === void 0 ? void 0 : _m.mimeType
            }, (_p = (_o = this === null || this === void 0 ? void 0 : this.nodeEntry) === null || _o === void 0 ? void 0 : _o.entry) === null || _p === void 0 ? void 0 : _p.id);
            this.uploadService.addToQueue(...[newFile]);
            this.uploadService.uploadFilesInTheQueue();
        }
    }
    onUnsupportedFile() {
        this.viewerType = 'unknown';
    }
    closeOverlayManager() {
        this.dialog.afterOpened.pipe(skipWhile(() => !this.overlayMode), takeUntil(this.onDestroy$)).subscribe(() => this.shouldCloseViewer = false);
        this.dialog.afterAllClosed.pipe(skipWhile(() => !this.overlayMode), takeUntil(this.onDestroy$)).subscribe(() => this.shouldCloseViewer = true);
        this.keyDown$.pipe(skipWhile(() => !this.overlayMode), filter((e) => e.keyCode === 27), takeUntil(this.onDestroy$)).subscribe((event) => {
            event.preventDefault();
            if (this.shouldCloseViewer) {
                this.close();
            }
        });
    }
    generateCacheBusterNumber() {
        this.cacheBusterNumber = Date.now();
    }
}
ViewerComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-viewer',
                template: "<div *ngIf=\"showViewer\"\n     class=\"adf-viewer-container\"\n     [class.adf-viewer-overlay-container]=\"overlayMode\"\n     [class.adf-viewer-inline-container]=\"!overlayMode\">\n\n    <div class=\"adf-viewer-content\"\n         fxLayout=\"column\"\n         [cdkTrapFocus]=\"overlayMode\"\n         cdkTrapFocusAutoCapture>\n        <ng-content select=\"adf-viewer-toolbar\"></ng-content>\n        <ng-container *ngIf=\"showToolbar && !toolbar\">\n            <adf-toolbar id=\"adf-viewer-toolbar\" class=\"adf-viewer-toolbar\">\n                <adf-toolbar-title>\n\n                    <ng-container *ngIf=\"allowLeftSidebar\">\n                        <button mat-icon-button\n                                [attr.aria-expanded]=\"showLeftSidebar\"\n                                [attr.aria-label]=\"'ADF_VIEWER.ACTIONS.INFO' | translate\"\n                                title=\"{{ 'ADF_VIEWER.ACTIONS.INFO' | translate }}\"\n                                data-automation-id=\"adf-toolbar-left-sidebar\"\n                                [color]=\"showLeftSidebar ? 'accent' : null\"\n                                (click)=\"toggleLeftSidebar()\">\n                            <mat-icon>info_outline</mat-icon>\n                        </button>\n                    </ng-container>\n\n                    <button *ngIf=\"allowGoBack\"\n                            class=\"adf-viewer-close-button\"\n                            data-automation-id=\"adf-toolbar-back\"\n                            [attr.aria-label]=\"'ADF_VIEWER.ACTIONS.CLOSE' | translate\"\n                            mat-icon-button\n                            title=\"{{ 'ADF_VIEWER.ACTIONS.CLOSE' | translate }}\"\n                            (click)=\"onBackButtonClick()\">\n                        <mat-icon>close</mat-icon>\n                    </button>\n                </adf-toolbar-title>\n\n                <div fxFlex=\"1 1 auto\"\n                     class=\"adf-viewer__file-title\">\n                    <button *ngIf=\"allowNavigate && canNavigateBefore\"\n                            data-automation-id=\"adf-toolbar-pref-file\"\n                            mat-icon-button\n                            [attr.aria-label]=\"'ADF_VIEWER.ACTIONS.PREV_FILE' | translate\"\n                            title=\"{{ 'ADF_VIEWER.ACTIONS.PREV_FILE' | translate }}\"\n                            (click)=\"onNavigateBeforeClick($event)\">\n                        <mat-icon>navigate_before</mat-icon>\n                    </button>\n                    <img class=\"adf-viewer__mimeicon\"\n                         [alt]=\"mimeType\"\n                         [src]=\"mimeType | adfMimeTypeIcon\"\n                         data-automation-id=\"adf-file-thumbnail\">\n                    <span class=\"adf-viewer__display-name\"\n                          id=\"adf-viewer-display-name\">{{ fileTitle }}</span>\n                    <button *ngIf=\"allowNavigate && canNavigateNext\"\n                            data-automation-id=\"adf-toolbar-next-file\"\n                            mat-icon-button\n                            [attr.aria-label]=\"'ADF_VIEWER.ACTIONS.NEXT_FILE' | translate\"\n                            title=\"{{ 'ADF_VIEWER.ACTIONS.NEXT_FILE' | translate }}\"\n                            (click)=\"onNavigateNextClick($event)\">\n                        <mat-icon>navigate_next</mat-icon>\n                    </button>\n                </div>\n\n                <ng-content select=\"adf-viewer-toolbar-actions\"></ng-content>\n\n                <ng-container *ngIf=\"mnuOpenWith\"\n                              data-automation-id='adf-toolbar-custom-btn'>\n                    <button id=\"adf-viewer-openwith\"\n                            mat-button\n                            [matMenuTriggerFor]=\"mnuOpenWith\"\n                            data-automation-id=\"adf-toolbar-open-with\">\n                        <span>{{ 'ADF_VIEWER.ACTIONS.OPEN_WITH' | translate }}</span>\n                        <mat-icon>arrow_drop_down</mat-icon>\n                    </button>\n                    <mat-menu #mnuOpenWith=\"matMenu\"\n                              [overlapTrigger]=\"false\">\n                        <ng-content select=\"adf-viewer-open-with\"></ng-content>\n                    </mat-menu>\n                </ng-container>\n\n                <adf-toolbar-divider></adf-toolbar-divider>\n\n                <button id=\"adf-viewer-download\"\n                        *ngIf=\"allowDownload\"\n                        mat-icon-button\n                        [attr.aria-label]=\"'ADF_VIEWER.ACTIONS.DOWNLOAD' | translate\"\n                        title=\"{{ 'ADF_VIEWER.ACTIONS.DOWNLOAD' | translate }}\"\n                        data-automation-id=\"adf-toolbar-download\"\n                        [adfNodeDownload]=\"nodeEntry\"\n                        [version]=\"versionEntry\">\n                    <mat-icon>file_download</mat-icon>\n                </button>\n\n                <button id=\"adf-viewer-print\"\n                        *ngIf=\"allowPrint\"\n                        mat-icon-button\n                        [attr.aria-label]=\"'ADF_VIEWER.ACTIONS.PRINT' | translate\"\n                        title=\"{{ 'ADF_VIEWER.ACTIONS.PRINT' | translate }}\"\n                        data-automation-id=\"adf-toolbar-print\"\n                        (click)=\"printContent()\">\n                    <mat-icon>print</mat-icon>\n                </button>\n\n                <button id=\"adf-viewer-fullscreen\"\n                        *ngIf=\"viewerType !== 'media' && allowFullScreen\"\n                        mat-icon-button\n                        [attr.aria-label]=\"'ADF_VIEWER.ACTIONS.FULLSCREEN' | translate\"\n                        title=\"{{ 'ADF_VIEWER.ACTIONS.FULLSCREEN' | translate }}\"\n                        data-automation-id=\"adf-toolbar-fullscreen\"\n                        (click)=\"enterFullScreen()\">\n                    <mat-icon>fullscreen</mat-icon>\n                </button>\n\n                <ng-container *ngIf=\"allowRightSidebar\">\n                    <adf-toolbar-divider></adf-toolbar-divider>\n\n                    <button mat-icon-button\n                            [attr.aria-expanded]=\"showRightSidebar\"\n                            [attr.aria-label]=\"'ADF_VIEWER.ACTIONS.INFO' | translate\"\n                            title=\"{{ 'ADF_VIEWER.ACTIONS.INFO' | translate }}\"\n                            data-automation-id=\"adf-toolbar-sidebar\"\n                            [color]=\"showRightSidebar ? 'accent' : null\"\n                            (click)=\"toggleSidebar()\">\n                        <mat-icon>info_outline</mat-icon>\n                    </button>\n\n                </ng-container>\n\n                <ng-container *ngIf=\"mnuMoreActions\">\n                    <button id=\"adf-viewer-moreactions\"\n                            mat-icon-button\n                            [matMenuTriggerFor]=\"mnuMoreActions\"\n                            [attr.aria-label]=\"'ADF_VIEWER.ACTIONS.MORE_ACTIONS' | translate\"\n                            title=\"{{ 'ADF_VIEWER.ACTIONS.MORE_ACTIONS' | translate }}\"\n                            data-automation-id=\"adf-toolbar-more-actions\">\n                        <mat-icon>more_vert</mat-icon>\n                    </button>\n                    <mat-menu #mnuMoreActions=\"matMenu\"\n                              [overlapTrigger]=\"false\">\n                        <ng-content select=\"adf-viewer-more-actions\"></ng-content>\n                    </mat-menu>\n                </ng-container>\n\n            </adf-toolbar>\n        </ng-container>\n\n        <div fxLayout=\"row\"\n             fxFlex=\"1 1 auto\">\n            <ng-container *ngIf=\"allowRightSidebar && showRightSidebar\">\n                <div class=\"adf-viewer__sidebar\"\n                     [ngClass]=\"'adf-viewer__sidebar__right'\"\n                     fxFlexOrder=\"4\"\n                     id=\"adf-right-sidebar\">\n                    <ng-container *ngIf=\"sidebarRightTemplate\">\n                        <ng-container *ngTemplateOutlet=\"sidebarRightTemplate;context:sidebarRightTemplateContext\">\n                        </ng-container>\n                    </ng-container>\n                    <ng-content *ngIf=\"!sidebarRightTemplate\"\n                                select=\"adf-viewer-sidebar\"></ng-content>\n                </div>\n            </ng-container>\n\n            <ng-container *ngIf=\"allowLeftSidebar && showLeftSidebar\">\n                <div class=\"adf-viewer__sidebar\"\n                     [ngClass]=\"'adf-viewer__sidebar__left'\"\n                     fxFlexOrder=\"1\"\n                     id=\"adf-left-sidebar\">\n                    <ng-container *ngIf=\"sidebarLeftTemplate\">\n                        <ng-container *ngTemplateOutlet=\"sidebarLeftTemplate;context:sidebarLeftTemplateContext\">\n                        </ng-container>\n                    </ng-container>\n                    <ng-content *ngIf=\"!sidebarLeftTemplate\"\n                                select=\"adf-viewer-sidebar\"></ng-content>\n                </div>\n            </ng-container>\n\n            <div *ngIf=\"isLoading\"\n                 class=\"adf-viewer-main\"\n                 fxFlexOrder=\"1\"\n                 fxFlex=\"1 1 auto\">\n                <div class=\"adf-viewer-layout-content adf-viewer__fullscreen-container\">\n                    <div class=\"adf-viewer-content-container\">\n                        <ng-container *ngIf=\"isLoading\">\n                            <div class=\"adf-viewer__loading-screen\"\n                                 fxFlex=\"1 1 auto\">\n                                <h2>{{ 'ADF_VIEWER.LOADING' | translate }}</h2>\n                                <div>\n                                    <mat-spinner></mat-spinner>\n                                </div>\n                            </div>\n                        </ng-container>\n\n                    </div>\n                </div>\n            </div>\n\n            <div *ngIf=\"!isLoading\"\n                 class=\"adf-viewer-main\"\n                 fxFlexOrder=\"1\"\n                 fxFlex=\"1 1 auto\">\n                <div class=\"adf-viewer-layout-content adf-viewer__fullscreen-container\">\n                    <div class=\"adf-viewer-content-container\"\n                         [ngSwitch]=\"viewerType\">\n\n                        <ng-container *ngSwitchCase=\"'pdf'\">\n                            <adf-pdf-viewer (close)=\"onBackButtonClick()\"\n                                            [thumbnailsTemplate]=\"thumbnailsTemplate\"\n                                            [allowThumbnails]=\"allowThumbnails\"\n                                            [blobFile]=\"blobFile\"\n                                            [urlFile]=\"urlFileContent\"\n                                            [nameFile]=\"displayName\"\n                                            [cacheType]=\"cacheTypeForContent\"\n                                            (error)=\"onUnsupportedFile()\"></adf-pdf-viewer>\n                        </ng-container>\n\n                        <ng-container *ngSwitchCase=\"'image'\">\n                            <adf-img-viewer [urlFile]=\"urlFileContent\"\n                                            [nameFile]=\"displayName\"\n                                            [blobFile]=\"blobFile\"\n                                            [readOnly]=\"readOnly\"\n                                            (error)=\"onUnsupportedFile()\"\n                                            (submit)=\"onSubmitFile($event)\"\n                            ></adf-img-viewer>\n                        </ng-container>\n\n                        <ng-container *ngSwitchCase=\"'media'\">\n                            <adf-media-player id=\"adf-mdedia-player\"\n                                              [urlFile]=\"urlFileContent\"\n                                              [nodeId]=\"nodeEntry?.entry?.id\"\n                                              [mimeType]=\"mimeType\"\n                                              [blobFile]=\"blobFile\"\n                                              [nameFile]=\"displayName\"\n                                              (error)=\"onUnsupportedFile()\"></adf-media-player>\n                        </ng-container>\n\n                        <ng-container *ngSwitchCase=\"'text'\">\n                            <adf-txt-viewer [urlFile]=\"urlFileContent\"\n                                            [blobFile]=\"blobFile\"></adf-txt-viewer>\n                        </ng-container>\n\n                        <ng-container *ngSwitchCase=\"'in_creation'\">\n                            <div class=\"adf-viewer__loading-screen\"\n                                 fxFlex=\"1 1 auto\">\n                                <h2>{{ 'ADF_VIEWER.LOADING' | translate }}</h2>\n                                <div>\n                                    <mat-spinner></mat-spinner>\n                                </div>\n                            </div>\n                        </ng-container>\n\n                        <ng-container *ngSwitchCase=\"'custom'\">\n                            <ng-container *ngFor=\"let ext of viewerExtensions\">\n                                <adf-preview-extension *ngIf=\"checkExtensions(ext.fileExtension)\"\n                                                       [id]=\"ext.component\"\n                                                       [node]=\"nodeEntry.entry\"\n                                                       [url]=\"urlFileContent\"\n                                                       [extension]=\"extension\"\n                                                       [attr.data-automation-id]=\"ext.component\">\n                                </adf-preview-extension>\n                            </ng-container>\n\n                            <span class=\"adf-viewer-custom-content\"\n                                  *ngFor=\"let extensionTemplate of extensionTemplates\">\n                                <ng-template *ngIf=\"extensionTemplate.isVisible\"\n                                             [ngTemplateOutlet]=\"extensionTemplate.template\"\n                                             [ngTemplateOutletContext]=\"{ urlFileContent: urlFileContent, extension:extension }\">\n                                </ng-template>\n                            </span>\n                        </ng-container>\n\n                        <ng-container *ngSwitchDefault>\n                            <adf-viewer-unknown-format></adf-viewer-unknown-format>\n                        </ng-container>\n                    </div>\n                </div>\n            </div>\n\n        </div>\n    </div>\n</div>\n",
                host: { 'class': 'adf-viewer' },
                encapsulation: ViewEncapsulation.None
            },] }
];
ViewerComponent.ctorParameters = () => [
    { type: AlfrescoApiService },
    { type: ViewUtilService },
    { type: LogService },
    { type: AppExtensionService },
    { type: ContentService },
    { type: UploadService },
    { type: ElementRef },
    { type: MatDialog }
];
ViewerComponent.propDecorators = {
    toolbar: [{ type: ContentChild, args: [ViewerToolbarComponent,] }],
    sidebar: [{ type: ContentChild, args: [ViewerSidebarComponent,] }],
    mnuOpenWith: [{ type: ContentChild, args: [ViewerOpenWithComponent,] }],
    mnuMoreActions: [{ type: ContentChild, args: [ViewerMoreActionsComponent,] }],
    urlFile: [{ type: Input }],
    urlFileViewer: [{ type: Input }],
    blobFile: [{ type: Input }],
    nodeId: [{ type: Input }],
    versionId: [{ type: Input }],
    sharedLinkId: [{ type: Input }],
    overlayMode: [{ type: Input }],
    showViewer: [{ type: Input }],
    showToolbar: [{ type: Input }],
    displayName: [{ type: Input }],
    allowGoBack: [{ type: Input }],
    allowDownload: [{ type: Input }],
    allowPrint: [{ type: Input }],
    allowFullScreen: [{ type: Input }],
    allowNavigate: [{ type: Input }],
    canNavigateBefore: [{ type: Input }],
    canNavigateNext: [{ type: Input }],
    allowLeftSidebar: [{ type: Input }],
    allowRightSidebar: [{ type: Input }],
    allowThumbnails: [{ type: Input }],
    showRightSidebar: [{ type: Input }],
    showLeftSidebar: [{ type: Input }],
    sidebarRightTemplate: [{ type: Input }],
    sidebarLeftTemplate: [{ type: Input }],
    thumbnailsTemplate: [{ type: Input }],
    mimeType: [{ type: Input }],
    fileName: [{ type: Input }],
    maxRetries: [{ type: Input }],
    goBack: [{ type: Output }],
    print: [{ type: Output }],
    showViewerChange: [{ type: Output }],
    extensionChange: [{ type: Output }],
    navigateBefore: [{ type: Output }],
    navigateNext: [{ type: Output }],
    invalidSharedLink: [{ type: Output }],
    handleKeyboardEvent: [{ type: HostListener, args: ['document:keyup', ['$event'],] }]
};
//# sourceMappingURL=data:application/json;base64,