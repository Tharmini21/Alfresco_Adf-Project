/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, Input, ContentChild, TemplateRef, HostListener, ElementRef, ViewEncapsulation, EventEmitter, Output, Inject, ViewChildren, QueryList } from '@angular/core';
import { ESCAPE, UP_ARROW, DOWN_ARROW } from '@angular/cdk/keycodes';
import { DOCUMENT } from '@angular/common';
import { FocusKeyManager } from '@angular/cdk/a11y';
import { PdfThumbComponent } from './pdf-viewer-thumb.component';
import { delay } from 'rxjs/operators';
export class PdfThumbListComponent {
    constructor(element, document) {
        this.element = element;
        this.document = document;
        this.close = new EventEmitter();
        this.virtualHeight = 0;
        this.translateY = 0;
        this.renderItems = [];
        this.width = 91;
        this.currentHeight = 0;
        this.items = [];
        this.margin = 15;
        this.itemHeight = 114 + this.margin;
        this.previouslyFocusedElement = null;
        this.calculateItems = this.calculateItems.bind(this);
        this.onPageChange = this.onPageChange.bind(this);
    }
    onKeydown(event) {
        const keyCode = event.keyCode;
        if (keyCode === UP_ARROW && this.canSelectPreviousItem()) {
            this.pdfViewer.currentPageNumber -= 1;
        }
        if (keyCode === DOWN_ARROW && this.canSelectNextItem()) {
            this.pdfViewer.currentPageNumber += 1;
        }
        if (keyCode === ESCAPE) {
            this.close.emit();
        }
        this.keyManager.setFocusOrigin('keyboard');
        event.preventDefault();
    }
    onResize() {
        this.calculateItems();
    }
    ngOnInit() {
        this.pdfViewer.eventBus.on('pagechanging', this.onPageChange);
        this.element.nativeElement.addEventListener('scroll', this.calculateItems, true);
        this.setHeight(this.pdfViewer.currentPageNumber);
        this.items = this.getPages();
        this.calculateItems();
        this.previouslyFocusedElement = this.document.activeElement;
    }
    ngAfterViewInit() {
        this.keyManager = new FocusKeyManager(this.thumbsList);
        this.thumbsList.changes
            .pipe(delay(0))
            .subscribe(() => this.keyManager.setActiveItem(this.getPageIndex(this.pdfViewer.currentPageNumber)));
        setTimeout(() => {
            this.scrollInto(this.pdfViewer.currentPageNumber);
            this.keyManager.setActiveItem(this.getPageIndex(this.pdfViewer.currentPageNumber));
        }, 0);
    }
    ngOnDestroy() {
        this.element.nativeElement.removeEventListener('scroll', this.calculateItems, true);
        this.pdfViewer.eventBus.on('pagechanging', this.onPageChange);
        if (this.previouslyFocusedElement) {
            this.previouslyFocusedElement.focus();
            this.previouslyFocusedElement = null;
        }
    }
    trackByFn(_, item) {
        return item.id;
    }
    isSelected(pageNumber) {
        return this.pdfViewer.currentPageNumber === pageNumber;
    }
    goTo(pageNumber) {
        this.pdfViewer.currentPageNumber = pageNumber;
    }
    scrollInto(pageNumber) {
        if (this.items.length) {
            const index = this.items.findIndex((element) => element.id === pageNumber);
            if (index < 0 || index >= this.items.length) {
                return;
            }
            this.element.nativeElement.scrollTop = index * this.itemHeight;
            this.calculateItems();
        }
    }
    getPages() {
        return this.pdfViewer._pages.map((page) => ({
            id: page.id,
            getWidth: () => {
                return this.width;
            },
            getHeight: () => {
                return this.currentHeight;
            },
            getPage: () => this.pdfViewer.pdfDocument.getPage(page.id)
        }));
    }
    setHeight(id) {
        const height = this.pdfViewer.pdfDocument.getPage(id).then((page) => this.calculateHeight(page));
        return height;
    }
    calculateHeight(page) {
        const viewport = page.getViewport({ scale: 1 });
        const pageRatio = viewport.width / viewport.height;
        const height = Math.floor(this.width / pageRatio);
        this.currentHeight = height;
        this.itemHeight = height + this.margin;
    }
    calculateItems() {
        const { element, viewPort, itemsInView } = this.getContainerSetup();
        const indexByScrollTop = element.scrollTop / viewPort * this.items.length / itemsInView;
        const start = Math.floor(indexByScrollTop);
        const end = Math.ceil(indexByScrollTop) + (itemsInView);
        this.translateY = this.itemHeight * Math.ceil(start);
        this.virtualHeight = this.itemHeight * this.items.length - this.translateY;
        this.renderItems = this.items.slice(start, end);
    }
    getContainerSetup() {
        const element = this.element.nativeElement;
        const elementRec = element.getBoundingClientRect();
        const itemsInView = Math.ceil(elementRec.height / this.itemHeight);
        const viewPort = (this.itemHeight * this.items.length) / itemsInView;
        return {
            element,
            viewPort,
            itemsInView
        };
    }
    onPageChange(event) {
        const index = this.renderItems.findIndex((element) => element.id === event.pageNumber);
        if (index < 0) {
            this.scrollInto(event.pageNumber);
        }
        if (index >= this.renderItems.length - 1) {
            this.element.nativeElement.scrollTop += this.itemHeight;
        }
        this.keyManager.setActiveItem(this.getPageIndex(event.pageNumber));
    }
    getPageIndex(pageNumber) {
        const thumbsListArray = this.thumbsList.toArray();
        return thumbsListArray.findIndex(el => el.page.id === pageNumber);
    }
    canSelectNextItem() {
        return this.pdfViewer.currentPageNumber !== this.pdfViewer.pagesCount;
    }
    canSelectPreviousItem() {
        return this.pdfViewer.currentPageNumber !== 1;
    }
}
PdfThumbListComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-pdf-thumbnails',
                template: "<div class=\"adf-pdf-thumbnails__content\"\n    data-automation-id='adf-thumbnails-content'\n    [style.height.px]=\"virtualHeight\"\n    [style.transform]=\"'translate(-50%, ' + translateY + 'px)'\">\n    <adf-pdf-thumb *ngFor=\"let page of renderItems; trackBy: trackByFn\"\n        class=\"adf-pdf-thumbnails__thumb\"\n        [id]=\"page.id\"\n        [ngClass]=\"{'adf-pdf-thumbnails__thumb--selected' : isSelected(page.id)}\"\n        [page]=\"page\"\n        (click)=\"goTo(page.id)\">\n    </adf-pdf-thumb>\n</div>\n",
                host: { class: 'adf-pdf-thumbnails' },
                encapsulation: ViewEncapsulation.None
            },] }
];
PdfThumbListComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
];
PdfThumbListComponent.propDecorators = {
    pdfViewer: [{ type: Input }],
    close: [{ type: Output }],
    template: [{ type: ContentChild, args: [TemplateRef,] }],
    thumbsList: [{ type: ViewChildren, args: [PdfThumbComponent,] }],
    onKeydown: [{ type: HostListener, args: ['keydown', ['$event'],] }],
    onResize: [{ type: HostListener, args: ['window:resize',] }]
};
//# sourceMappingURL=data:application/json;base64,